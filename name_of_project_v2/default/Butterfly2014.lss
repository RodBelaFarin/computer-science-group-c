
Butterfly2014.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018a  00800100  00002dca  00002e5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000113  0080028a  0080028a  00002fe8  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000040b  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000102b  00000000  00000000  00003493  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000561  00000000  00000000  000044be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014e8  00000000  00000000  00004a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  00005f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000908  00000000  00000000  000061b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__ctors_end>
       4:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
       8:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
       c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      10:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      14:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      18:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      1c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      20:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      24:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      28:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      2c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      30:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      34:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__vector_13>
      38:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__vector_14>
      3c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      40:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      44:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      48:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      4c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      50:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      54:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      58:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__vector_22>

0000005c <LCD_character_table>:
      5c:	51 0a 80 2a 00 00 00 0a 00 40 00 00 59 55 18 01     Q..*.....@..YU..
      6c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
	...
      88:	00 00 51 0f 91 39 41 14 91 31 41 1e 41 0e 41 1d     ..Q..9A..1A.A.A.
      98:	50 0f 80 20 10 15 48 86 40 14 78 05 70 85 51 15     P.. ..H.@.x.p.Q.
      a8:	51 0e 51 95 51 8e 21 90 81 20 50 15 48 44 50 c5     Q.Q.Q.!.. P.HDP.
      b8:	28 c0 28 20 09 50 00 00 00 00 00 00 00 00 00 00     (.( .P..........

000000c8 <__c.1382>:
	...

000000c9 <__c.1410>:
      c9:	00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5     ..@z..Z..rN.....
      d9:	d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00     .....vH.....T...
      e9:	ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00     ..;.............
      f9:	00 40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00     .@B...........'.
     109:	00 00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a     .........d......
     119:	00 00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc     ...........,v...
     129:	67 4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4     gO.#....Y.......
     139:	53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c     S.:.Q.v.....&...
     149:	9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f     .b.@|o.....@...o
     159:	a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b     ....Z*.\.kl.gm..
     169:	fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03     ....G.. ........
     179:	00 94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00     ..5w........ N..
     189:	00 00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef     ....3333..n...A.
     199:	8d 21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b     .!..;.U........K
     1a9:	38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e     8..|......$ 2.r^
     1b9:	22 81 00 c9 f1 24 ec a1 e5 3d 27                    "....$...='

000001c4 <__ctors_end>:
     1c4:	11 24       	eor	r1, r1
     1c6:	1f be       	out	0x3f, r1	; 63
     1c8:	cf ef       	ldi	r28, 0xFF	; 255
     1ca:	d4 e0       	ldi	r29, 0x04	; 4
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	cd bf       	out	0x3d, r28	; 61

000001d0 <__do_copy_data>:
     1d0:	12 e0       	ldi	r17, 0x02	; 2
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b1 e0       	ldi	r27, 0x01	; 1
     1d6:	ea ec       	ldi	r30, 0xCA	; 202
     1d8:	fd e2       	ldi	r31, 0x2D	; 45
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <.do_copy_data_start>

000001dc <.do_copy_data_loop>:
     1dc:	05 90       	lpm	r0, Z+
     1de:	0d 92       	st	X+, r0

000001e0 <.do_copy_data_start>:
     1e0:	aa 38       	cpi	r26, 0x8A	; 138
     1e2:	b1 07       	cpc	r27, r17
     1e4:	d9 f7       	brne	.-10     	; 0x1dc <.do_copy_data_loop>

000001e6 <__do_clear_bss>:
     1e6:	13 e0       	ldi	r17, 0x03	; 3
     1e8:	aa e8       	ldi	r26, 0x8A	; 138
     1ea:	b2 e0       	ldi	r27, 0x02	; 2
     1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <.do_clear_bss_start>

000001ee <.do_clear_bss_loop>:
     1ee:	1d 92       	st	X+, r1

000001f0 <.do_clear_bss_start>:
     1f0:	ad 39       	cpi	r26, 0x9D	; 157
     1f2:	b1 07       	cpc	r27, r17
     1f4:	e1 f7       	brne	.-8      	; 0x1ee <.do_clear_bss_loop>
     1f6:	0e 94 20 0b 	call	0x1640	; 0x1640 <main>
     1fa:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <_exit>

000001fe <__bad_interrupt>:
     1fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000202 <set_seed>:
#include "AVRBFLY.h"

/// Set seed for random number generation
/// source: http://www.roboternetz.de/wissen/index.php/Zufallszahlen_mit_avr-gcc
void set_seed(void)
{
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	00 d0       	rcall	.+0      	; 0x208 <set_seed+0x6>
     208:	00 d0       	rcall	.+0      	; 0x20a <set_seed+0x8>
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
#ifndef SIMULATION
	unsigned short seed = 0, *p = (unsigned short*) (RAMEND+1);
     20e:	1c 82       	std	Y+4, r1	; 0x04
     210:	1b 82       	std	Y+3, r1	; 0x03
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	95 e0       	ldi	r25, 0x05	; 5
     216:	9a 83       	std	Y+2, r25	; 0x02
     218:	89 83       	std	Y+1, r24	; 0x01
     21a:	0f c0       	rjmp	.+30     	; 0x23a <set_seed+0x38>
	extern unsigned short __heap_start;
	while (p >= &__heap_start + 1)
		seed ^= * (--p);
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	9a 81       	ldd	r25, Y+2	; 0x02
     220:	02 97       	sbiw	r24, 0x02	; 2
     222:	9a 83       	std	Y+2, r25	; 0x02
     224:	89 83       	std	Y+1, r24	; 0x01
     226:	e9 81       	ldd	r30, Y+1	; 0x01
     228:	fa 81       	ldd	r31, Y+2	; 0x02
     22a:	20 81       	ld	r18, Z
     22c:	31 81       	ldd	r19, Z+1	; 0x01
     22e:	8b 81       	ldd	r24, Y+3	; 0x03
     230:	9c 81       	ldd	r25, Y+4	; 0x04
     232:	82 27       	eor	r24, r18
     234:	93 27       	eor	r25, r19
     236:	9c 83       	std	Y+4, r25	; 0x04
     238:	8b 83       	std	Y+3, r24	; 0x03
void set_seed(void)
{
#ifndef SIMULATION
	unsigned short seed = 0, *p = (unsigned short*) (RAMEND+1);
	extern unsigned short __heap_start;
	while (p >= &__heap_start + 1)
     23a:	2f e9       	ldi	r18, 0x9F	; 159
     23c:	33 e0       	ldi	r19, 0x03	; 3
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	82 17       	cp	r24, r18
     244:	93 07       	cpc	r25, r19
     246:	50 f7       	brcc	.-44     	; 0x21c <set_seed+0x1a>
		seed ^= * (--p);
	srandom((unsigned long) seed);
     248:	8b 81       	ldd	r24, Y+3	; 0x03
     24a:	9c 81       	ldd	r25, Y+4	; 0x04
     24c:	cc 01       	movw	r24, r24
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	bc 01       	movw	r22, r24
     254:	cd 01       	movw	r24, r26
     256:	0e 94 0d 14 	call	0x281a	; 0x281a <srandom>
#else
	srandom((unsigned long) 1);
#endif
}
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	cf 91       	pop	r28
     264:	df 91       	pop	r29
     266:	08 95       	ret

00000268 <InitBoard>:


/// Initialize the ports of the controller
void InitBoard(void)
{
     268:	df 93       	push	r29
     26a:	cf 93       	push	r28
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62

/// Inputs: PB4(center), PB6(up), PB7(down), PE2(left) and PE3(right)
	DDRB	= DDRB	& 0b00101111;
     270:	a4 e2       	ldi	r26, 0x24	; 36
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	e4 e2       	ldi	r30, 0x24	; 36
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	8f 72       	andi	r24, 0x2F	; 47
     27c:	8c 93       	st	X, r24
	DDRE	= DDRE	& 0b11110011;
     27e:	ad e2       	ldi	r26, 0x2D	; 45
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	ed e2       	ldi	r30, 0x2D	; 45
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	83 7f       	andi	r24, 0xF3	; 243
     28a:	8c 93       	st	X, r24
/// switch on pull up resistors
	PORTB	= PORTB	| 0b11010000;
     28c:	a5 e2       	ldi	r26, 0x25	; 37
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	e5 e2       	ldi	r30, 0x25	; 37
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	80 6d       	ori	r24, 0xD0	; 208
     298:	8c 93       	st	X, r24
	PORTE	= PORTE	| 0b00001100;
     29a:	ae e2       	ldi	r26, 0x2E	; 46
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	ee e2       	ldi	r30, 0x2E	; 46
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	8c 60       	ori	r24, 0x0C	; 12
     2a6:	8c 93       	st	X, r24
/// no button pressed
	PINB	= PINB	| 0b11010000;
     2a8:	a3 e2       	ldi	r26, 0x23	; 35
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	e3 e2       	ldi	r30, 0x23	; 35
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	80 6d       	ori	r24, 0xD0	; 208
     2b4:	8c 93       	st	X, r24
	PINE	= PINE	| 0b00001100;
     2b6:	ac e2       	ldi	r26, 0x2C	; 44
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	ec e2       	ldi	r30, 0x2C	; 44
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	8c 60       	ori	r24, 0x0C	; 12
     2c2:	8c 93       	st	X, r24
/// Output: LEDs at port C
	DDRC  = 0b11111111;
     2c4:	e7 e2       	ldi	r30, 0x27	; 39
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	80 83       	st	Z, r24
/// switch off all LEDs
	PORTC = 0b11111111;
     2cc:	e8 e2       	ldi	r30, 0x28	; 40
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	80 83       	st	Z, r24
/// initialize the random number generator
    set_seed();
     2d4:	0e 94 01 01 	call	0x202	; 0x202 <set_seed>
/// Output for buzzer on PORT B
	DDRB	= DDRB	| 0b00100000;
     2d8:	a4 e2       	ldi	r26, 0x24	; 36
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	e4 e2       	ldi	r30, 0x24	; 36
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	80 81       	ld	r24, Z
     2e2:	80 62       	ori	r24, 0x20	; 32
     2e4:	8c 93       	st	X, r24
//	PORTB	= PORTB	| 0b00100000;
}
     2e6:	cf 91       	pop	r28
     2e8:	df 91       	pop	r29
     2ea:	08 95       	ret

000002ec <delay_ds>:

/// Wait ds tenths of a second
void delay_ds(unsigned char ds)
{
     2ec:	df 93       	push	r29
     2ee:	cf 93       	push	r28
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	27 97       	sbiw	r28, 0x07	; 7
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	8f 83       	std	Y+7, r24	; 0x07
#ifndef SIMULATION
	uint16_t i, lim= 10*ds;
     302:	8f 81       	ldd	r24, Y+7	; 0x07
     304:	88 2f       	mov	r24, r24
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	9c 01       	movw	r18, r24
     30a:	22 0f       	add	r18, r18
     30c:	33 1f       	adc	r19, r19
     30e:	c9 01       	movw	r24, r18
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	82 0f       	add	r24, r18
     31a:	93 1f       	adc	r25, r19
     31c:	9c 83       	std	Y+4, r25	; 0x04
     31e:	8b 83       	std	Y+3, r24	; 0x03
	for(i=0; i<lim; i++)
     320:	1e 82       	std	Y+6, r1	; 0x06
     322:	1d 82       	std	Y+5, r1	; 0x05
     324:	0f c0       	rjmp	.+30     	; 0x344 <delay_ds+0x58>
	{
		uint16_t __ticks = F_CPU / 400;
     326:	88 e8       	ldi	r24, 0x88	; 136
     328:	93 e1       	ldi	r25, 0x13	; 19
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	89 83       	std	Y+1, r24	; 0x01
		__asm__ volatile (
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	f1 f7       	brne	.-4      	; 0x332 <delay_ds+0x46>
     336:	9a 83       	std	Y+2, r25	; 0x02
     338:	89 83       	std	Y+1, r24	; 0x01
/// Wait ds tenths of a second
void delay_ds(unsigned char ds)
{
#ifndef SIMULATION
	uint16_t i, lim= 10*ds;
	for(i=0; i<lim; i++)
     33a:	8d 81       	ldd	r24, Y+5	; 0x05
     33c:	9e 81       	ldd	r25, Y+6	; 0x06
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	9e 83       	std	Y+6, r25	; 0x06
     342:	8d 83       	std	Y+5, r24	; 0x05
     344:	2d 81       	ldd	r18, Y+5	; 0x05
     346:	3e 81       	ldd	r19, Y+6	; 0x06
     348:	8b 81       	ldd	r24, Y+3	; 0x03
     34a:	9c 81       	ldd	r25, Y+4	; 0x04
     34c:	28 17       	cp	r18, r24
     34e:	39 07       	cpc	r19, r25
     350:	50 f3       	brcs	.-44     	; 0x326 <delay_ds+0x3a>
			: "=w" (__ticks)
			: "0" (__ticks)
		);
	}
#endif
}
     352:	27 96       	adiw	r28, 0x07	; 7
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	de bf       	out	0x3e, r29	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	cd bf       	out	0x3d, r28	; 61
     35e:	cf 91       	pop	r28
     360:	df 91       	pop	r29
     362:	08 95       	ret

00000364 <autoADCps>:

void autoADCps(void)
{
     364:	df 93       	push	r29
     366:	cf 93       	push	r28
     368:	0f 92       	push	r0
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
  uint8_t ps012;
  /// Assures the ADC clock to be between 100 and 200 kHz
    if      (F_CPU <=   400000UL) ps012 = 0b00000001; //001 = PS   2
    else if (F_CPU <=   800000UL) ps012 = 0b00000010; //010 = PS   4
    else if (F_CPU <=  1600000UL) ps012 = 0b00000011; //011 = PS   8
    else if (F_CPU <=  3200000UL) ps012 = 0b00000100; //100 = PS  16
     36e:	84 e0       	ldi	r24, 0x04	; 4
     370:	89 83       	std	Y+1, r24	; 0x01
    else if (F_CPU <=  6400000UL) ps012 = 0b00000101; //101 = PS  32
    else if (F_CPU <= 12800000UL) ps012 = 0b00000110; //110 = PS  64
    else if (F_CPU >  12800000UL) ps012 = 0b00000111; //111 = PS 128

  	ADCSRA = ADCSRA & 0b11111000; // set bits PS0, PS1, PS2 to 0
     372:	aa e7       	ldi	r26, 0x7A	; 122
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ea e7       	ldi	r30, 0x7A	; 122
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	80 81       	ld	r24, Z
     37c:	88 7f       	andi	r24, 0xF8	; 248
     37e:	8c 93       	st	X, r24
    ADCSRA = ADCSRA | ps012;      // set prescaler bits
     380:	aa e7       	ldi	r26, 0x7A	; 122
     382:	b0 e0       	ldi	r27, 0x00	; 0
     384:	ea e7       	ldi	r30, 0x7A	; 122
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	90 81       	ld	r25, Z
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	89 2b       	or	r24, r25
     38e:	8c 93       	st	X, r24
}
     390:	0f 90       	pop	r0
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <InitBuzzer>:

void InitBuzzer(int f, int d)
{
     398:	df 93       	push	r29
     39a:	cf 93       	push	r28
     39c:	00 d0       	rcall	.+0      	; 0x39e <InitBuzzer+0x6>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <InitBuzzer+0x8>
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <InitBuzzer+0xa>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	9c 83       	std	Y+4, r25	; 0x04
     3a8:	8b 83       	std	Y+3, r24	; 0x03
     3aa:	7e 83       	std	Y+6, r23	; 0x06
     3ac:	6d 83       	std	Y+5, r22	; 0x05
//	char Volume=50;
	int icr1;
	icr1 = 1000000/(2*f);
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	9c 01       	movw	r18, r24
     3b8:	44 27       	eor	r20, r20
     3ba:	37 fd       	sbrc	r19, 7
     3bc:	40 95       	com	r20
     3be:	54 2f       	mov	r21, r20
     3c0:	80 e4       	ldi	r24, 0x40	; 64
     3c2:	92 e4       	ldi	r25, 0x42	; 66
     3c4:	af e0       	ldi	r26, 0x0F	; 15
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	bc 01       	movw	r22, r24
     3ca:	cd 01       	movw	r24, r26
     3cc:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__divmodsi4>
     3d0:	da 01       	movw	r26, r20
     3d2:	c9 01       	movw	r24, r18
     3d4:	9a 83       	std	Y+2, r25	; 0x02
     3d6:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = icr1;				// Top value of the Timer 1
     3d8:	e6 e8       	ldi	r30, 0x86	; 134
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	91 83       	std	Z+1, r25	; 0x01
     3e2:	80 83       	st	Z, r24
	TCCR1A = (1<<COM1A1);		// Set OC1A when upcounting, clear when downcounting
     3e4:	e0 e8       	ldi	r30, 0x80	; 128
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 e8       	ldi	r24, 0x80	; 128
     3ea:	80 83       	st	Z, r24
    TCCR1B = (1<<WGM13);        // Phase/Freq-correct PWM, top value = ICR1
     3ec:	e1 e8       	ldi	r30, 0x81	; 129
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 e1       	ldi	r24, 0x10	; 16
     3f2:	80 83       	st	Z, r24
	SET_BIT(TCCR1B, CS10)		// Start Timer1, prescaler(1)    
     3f4:	a1 e8       	ldi	r26, 0x81	; 129
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	e1 e8       	ldi	r30, 0x81	; 129
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	81 60       	ori	r24, 0x01	; 1
     400:	8c 93       	st	X, r24
	WAIT_SEC(d)
     402:	8d 81       	ldd	r24, Y+5	; 0x05
     404:	9e 81       	ldd	r25, Y+6	; 0x06
     406:	9c 01       	movw	r18, r24
     408:	22 0f       	add	r18, r18
     40a:	33 1f       	adc	r19, r19
     40c:	c9 01       	movw	r24, r18
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	82 0f       	add	r24, r18
     418:	93 1f       	adc	r25, r19
     41a:	0e 94 76 01 	call	0x2ec	; 0x2ec <delay_ds>
	CLEAR_BIT(TCCR1B, CS10)		// Stops Timer 1
     41e:	a1 e8       	ldi	r26, 0x81	; 129
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	e1 e8       	ldi	r30, 0x81	; 129
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	8e 7f       	andi	r24, 0xFE	; 254
     42a:	8c 93       	st	X, r24
}
     42c:	26 96       	adiw	r28, 0x06	; 6
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	cf 91       	pop	r28
     43a:	df 91       	pop	r29
     43c:	08 95       	ret

0000043e <DF_SPI_init>:
*	Purpose :		Sets up the HW SPI in Master mode, Mode 3
*					Note -> Uses the SS line to control the DF CS-line.
*
******************************************************************************/
void DF_SPI_init (void)
{
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
	
	PORTB |= (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
     446:	a5 e2       	ldi	r26, 0x25	; 37
     448:	b0 e0       	ldi	r27, 0x00	; 0
     44a:	e5 e2       	ldi	r30, 0x25	; 37
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	80 81       	ld	r24, Z
     450:	8f 60       	ori	r24, 0x0F	; 15
     452:	8c 93       	st	X, r24
	DDRB |= (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);		//Set MOSI, SCK AND SS as outputs
     454:	a4 e2       	ldi	r26, 0x24	; 36
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	e4 e2       	ldi	r30, 0x24	; 36
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	87 60       	ori	r24, 0x07	; 7
     460:	8c 93       	st	X, r24
	SPSR = (1<<SPI2X);                                      //SPI double speed settings
     462:	ed e4       	ldi	r30, 0x4D	; 77
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 83       	st	Z, r24
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPHA) | (1<<CPOL);	//Enable SPI in Master mode, mode 3, Fosc/2
     46a:	ec e4       	ldi	r30, 0x4C	; 76
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	8c e5       	ldi	r24, 0x5C	; 92
     470:	80 83       	st	Z, r24

}
     472:	cf 91       	pop	r28
     474:	df 91       	pop	r29
     476:	08 95       	ret

00000478 <DF_SPI_RW>:
*
*	Purpose :		Read and writes one byte from/to SPI master
*
******************************************************************************/
unsigned char DF_SPI_RW (unsigned char output)
{
     478:	df 93       	push	r29
     47a:	cf 93       	push	r28
     47c:	00 d0       	rcall	.+0      	; 0x47e <DF_SPI_RW+0x6>
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char input;
	
	SPDR = output;							//put byte 'output' in SPI data register
     484:	ee e4       	ldi	r30, 0x4E	; 78
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	80 83       	st	Z, r24
	while(!(SPSR & 0x80));					//wait for transfer complete, poll SPIF-flag
     48c:	ed e4       	ldi	r30, 0x4D	; 77
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	88 23       	and	r24, r24
     494:	dc f7       	brge	.-10     	; 0x48c <DF_SPI_RW+0x14>
	input = SPDR;							//read value in SPI data reg.
     496:	ee e4       	ldi	r30, 0x4E	; 78
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	89 83       	std	Y+1, r24	; 0x01
	
	return input;							//return the byte clocked in from SPI slave
     49e:	89 81       	ldd	r24, Y+1	; 0x01
}		
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	cf 91       	pop	r28
     4a6:	df 91       	pop	r29
     4a8:	08 95       	ret

000004aa <Read_DF_status>:
*					Status info concerning compare between buffer and flash page
*					Status info concerning size of actual device
*
******************************************************************************/
unsigned char Read_DF_status (void)
{
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <Read_DF_status+0x6>
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
	unsigned char result,index_copy;
	
	DF_CS_inactive;							//make sure to toggle CS signal in order
     4b4:	a5 e2       	ldi	r26, 0x25	; 37
     4b6:	b0 e0       	ldi	r27, 0x00	; 0
     4b8:	e5 e2       	ldi	r30, 0x25	; 37
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	81 60       	ori	r24, 0x01	; 1
     4c0:	8c 93       	st	X, r24
	DF_CS_active;							//to reset dataflash command decoder
     4c2:	a5 e2       	ldi	r26, 0x25	; 37
     4c4:	b0 e0       	ldi	r27, 0x00	; 0
     4c6:	e5 e2       	ldi	r30, 0x25	; 37
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	8c 93       	st	X, r24
	result = DF_SPI_RW(StatusReg);			//send status register read op-code
     4d0:	87 e5       	ldi	r24, 0x57	; 87
     4d2:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
     4d6:	8a 83       	std	Y+2, r24	; 0x02
	result = DF_SPI_RW(0x00);				//dummy write to get result
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
     4de:	8a 83       	std	Y+2, r24	; 0x02
	
	index_copy = ((result & 0x38) >> 3);	//get the size info from status register
     4e0:	8a 81       	ldd	r24, Y+2	; 0x02
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	88 73       	andi	r24, 0x38	; 56
     4e8:	90 70       	andi	r25, 0x00	; 0
     4ea:	95 95       	asr	r25
     4ec:	87 95       	ror	r24
     4ee:	95 95       	asr	r25
     4f0:	87 95       	ror	r24
     4f2:	95 95       	asr	r25
     4f4:	87 95       	ror	r24
     4f6:	89 83       	std	Y+1, r24	; 0x01
	PageBits   = DF_pagebits[index_copy];	//get number of internal page address bits from look-up table
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	88 2f       	mov	r24, r24
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	fc 01       	movw	r30, r24
     500:	e0 50       	subi	r30, 0x00	; 0
     502:	ff 4f       	sbci	r31, 0xFF	; 255
     504:	80 81       	ld	r24, Z
     506:	80 93 34 03 	sts	0x0334, r24
	PageSize   = DF_pagesize[index_copy];   //get the size of the page (in bytes)
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	88 2f       	mov	r24, r24
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	fc 01       	movw	r30, r24
     516:	e8 5f       	subi	r30, 0xF8	; 248
     518:	fe 4f       	sbci	r31, 0xFE	; 254
     51a:	80 81       	ld	r24, Z
     51c:	91 81       	ldd	r25, Z+1	; 0x01
     51e:	90 93 36 03 	sts	0x0336, r25
     522:	80 93 35 03 	sts	0x0335, r24
	return result;							//return the read status register value
     526:	8a 81       	ldd	r24, Y+2	; 0x02
}
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	cf 91       	pop	r28
     52e:	df 91       	pop	r29
     530:	08 95       	ret

00000532 <Page_To_Buffer>:
*
*	Purpose :		Transfers a page from flash to dataflash SRAM buffer
*					
******************************************************************************/
void Page_To_Buffer (unsigned int PageAdr, unsigned char BufferNo)
{
     532:	df 93       	push	r29
     534:	cf 93       	push	r28
     536:	00 d0       	rcall	.+0      	; 0x538 <Page_To_Buffer+0x6>
     538:	0f 92       	push	r0
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	9a 83       	std	Y+2, r25	; 0x02
     540:	89 83       	std	Y+1, r24	; 0x01
     542:	6b 83       	std	Y+3, r22	; 0x03
	DF_CS_inactive;												//make sure to toggle CS signal in order
     544:	a5 e2       	ldi	r26, 0x25	; 37
     546:	b0 e0       	ldi	r27, 0x00	; 0
     548:	e5 e2       	ldi	r30, 0x25	; 37
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	81 60       	ori	r24, 0x01	; 1
     550:	8c 93       	st	X, r24
	DF_CS_active;												//to reset dataflash command decoder
     552:	a5 e2       	ldi	r26, 0x25	; 37
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	e5 e2       	ldi	r30, 0x25	; 37
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	8e 7f       	andi	r24, 0xFE	; 254
     55e:	8c 93       	st	X, r24
	
	if (1 == BufferNo)											//transfer flash page to buffer 1
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	49 f5       	brne	.+82     	; 0x5b8 <Page_To_Buffer+0x86>
	{
		DF_SPI_RW(FlashToBuf1Transfer);							//transfer to buffer 1 op-code
     566:	83 e5       	ldi	r24, 0x53	; 83
     568:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr >> (16 - PageBits)));	//upper part of page address
     56c:	80 91 34 03 	lds	r24, 0x0334
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	80 e1       	ldi	r24, 0x10	; 16
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	ac 01       	movw	r20, r24
     57a:	42 1b       	sub	r20, r18
     57c:	53 0b       	sbc	r21, r19
     57e:	9a 01       	movw	r18, r20
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	9a 81       	ldd	r25, Y+2	; 0x02
     584:	02 c0       	rjmp	.+4      	; 0x58a <Page_To_Buffer+0x58>
     586:	96 95       	lsr	r25
     588:	87 95       	ror	r24
     58a:	2a 95       	dec	r18
     58c:	e2 f7       	brpl	.-8      	; 0x586 <Page_To_Buffer+0x54>
     58e:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr << (PageBits - 8)));	//lower part of page address
     592:	80 91 34 03 	lds	r24, 0x0334
     596:	88 2f       	mov	r24, r24
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	9c 01       	movw	r18, r24
     59c:	28 50       	subi	r18, 0x08	; 8
     59e:	30 40       	sbci	r19, 0x00	; 0
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <Page_To_Buffer+0x78>
     5a6:	88 0f       	add	r24, r24
     5a8:	99 1f       	adc	r25, r25
     5aa:	2a 95       	dec	r18
     5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <Page_To_Buffer+0x74>
     5ae:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);										//don't cares
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr << (PageBits - 8)));	//lower part of page address
		DF_SPI_RW(0x00);										//don't cares
	}
#endif
	
	DF_CS_inactive;												//initiate the transfer
     5b8:	a5 e2       	ldi	r26, 0x25	; 37
     5ba:	b0 e0       	ldi	r27, 0x00	; 0
     5bc:	e5 e2       	ldi	r30, 0x25	; 37
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	81 60       	ori	r24, 0x01	; 1
     5c4:	8c 93       	st	X, r24
	DF_CS_active;
     5c6:	a5 e2       	ldi	r26, 0x25	; 37
     5c8:	b0 e0       	ldi	r27, 0x00	; 0
     5ca:	e5 e2       	ldi	r30, 0x25	; 37
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	80 81       	ld	r24, Z
     5d0:	8e 7f       	andi	r24, 0xFE	; 254
     5d2:	8c 93       	st	X, r24
	
	while(!(Read_DF_status() & 0x80));							//monitor the status register, wait until busy-flag is high
     5d4:	0e 94 55 02 	call	0x4aa	; 0x4aa <Read_DF_status>
     5d8:	88 23       	and	r24, r24
     5da:	e4 f7       	brge	.-8      	; 0x5d4 <Page_To_Buffer+0xa2>
}
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	cf 91       	pop	r28
     5e4:	df 91       	pop	r29
     5e6:	08 95       	ret

000005e8 <Buffer_Read_Byte>:
*	Purpose :		Reads one byte from one of the dataflash
*					internal SRAM buffers
*
******************************************************************************/
unsigned char Buffer_Read_Byte (unsigned char BufferNo, unsigned int IntPageAdr)
{
     5e8:	df 93       	push	r29
     5ea:	cf 93       	push	r28
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <Buffer_Read_Byte+0x6>
     5ee:	00 d0       	rcall	.+0      	; 0x5f0 <Buffer_Read_Byte+0x8>
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	8a 83       	std	Y+2, r24	; 0x02
     5f6:	7c 83       	std	Y+4, r23	; 0x04
     5f8:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char data;
	
	DF_CS_inactive;								//make sure to toggle CS signal in order
     5fa:	a5 e2       	ldi	r26, 0x25	; 37
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	e5 e2       	ldi	r30, 0x25	; 37
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	81 60       	ori	r24, 0x01	; 1
     606:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     608:	a5 e2       	ldi	r26, 0x25	; 37
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	e5 e2       	ldi	r30, 0x25	; 37
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	80 81       	ld	r24, Z
     612:	8e 7f       	andi	r24, 0xFE	; 254
     614:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//read byte from buffer 1
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	b1 f4       	brne	.+44     	; 0x648 <Buffer_Read_Byte+0x60>
	{
		DF_SPI_RW(Buf1Read);					//buffer 1 read op-code
     61c:	84 e5       	ldi	r24, 0x54	; 84
     61e:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	9c 81       	ldd	r25, Y+4	; 0x04
     62c:	89 2f       	mov	r24, r25
     62e:	99 27       	eor	r25, r25
     630:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     634:	8b 81       	ldd	r24, Y+3	; 0x03
     636:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		data = DF_SPI_RW(0x00);					//read byte
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
     646:	89 83       	std	Y+1, r24	; 0x01
		DF_SPI_RW(0x00);						//don't cares
		data = DF_SPI_RW(0x00);					//read byte
	}
#endif
	
	return data;								//return the read data byte
     648:	89 81       	ldd	r24, Y+1	; 0x01
}
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	cf 91       	pop	r28
     654:	df 91       	pop	r29
     656:	08 95       	ret

00000658 <Buffer_Read_Str>:
*					internal SRAM buffers, and puts read bytes into
*					buffer pointed to by *BufferPtr
*
******************************************************************************/
void Buffer_Read_Str (unsigned char BufferNo, unsigned int IntPageAdr, unsigned int No_of_bytes, unsigned char *BufferPtr)
{
     658:	df 93       	push	r29
     65a:	cf 93       	push	r28
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	29 97       	sbiw	r28, 0x09	; 9
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
     66c:	8b 83       	std	Y+3, r24	; 0x03
     66e:	7d 83       	std	Y+5, r23	; 0x05
     670:	6c 83       	std	Y+4, r22	; 0x04
     672:	5f 83       	std	Y+7, r21	; 0x07
     674:	4e 83       	std	Y+6, r20	; 0x06
     676:	39 87       	std	Y+9, r19	; 0x09
     678:	28 87       	std	Y+8, r18	; 0x08
	unsigned int i;

	DF_CS_inactive;								//make sure to toggle CS signal in order
     67a:	a5 e2       	ldi	r26, 0x25	; 37
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	e5 e2       	ldi	r30, 0x25	; 37
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	81 60       	ori	r24, 0x01	; 1
     686:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     688:	a5 e2       	ldi	r26, 0x25	; 37
     68a:	b0 e0       	ldi	r27, 0x00	; 0
     68c:	e5 e2       	ldi	r30, 0x25	; 37
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	8e 7f       	andi	r24, 0xFE	; 254
     694:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//read byte(s) from buffer 1
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	81 30       	cpi	r24, 0x01	; 1
     69a:	61 f5       	brne	.+88     	; 0x6f4 <Buffer_Read_Str+0x9c>
	{
		DF_SPI_RW(Buf1Read);					//buffer 1 read op-code
     69c:	84 e5       	ldi	r24, 0x54	; 84
     69e:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     6a8:	8c 81       	ldd	r24, Y+4	; 0x04
     6aa:	9d 81       	ldd	r25, Y+5	; 0x05
     6ac:	89 2f       	mov	r24, r25
     6ae:	99 27       	eor	r25, r25
     6b0:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     6b4:	8c 81       	ldd	r24, Y+4	; 0x04
     6b6:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		for( i=0; i<No_of_bytes; i++)
     6c0:	1a 82       	std	Y+2, r1	; 0x02
     6c2:	19 82       	std	Y+1, r1	; 0x01
     6c4:	10 c0       	rjmp	.+32     	; 0x6e6 <Buffer_Read_Str+0x8e>
		{
			*(BufferPtr) = DF_SPI_RW(0x00);		//read byte and put it in AVR buffer pointed to by *BufferPtr
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
     6cc:	e8 85       	ldd	r30, Y+8	; 0x08
     6ce:	f9 85       	ldd	r31, Y+9	; 0x09
     6d0:	80 83       	st	Z, r24
			BufferPtr++;						//point to next element in AVR buffer
     6d2:	88 85       	ldd	r24, Y+8	; 0x08
     6d4:	99 85       	ldd	r25, Y+9	; 0x09
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	99 87       	std	Y+9, r25	; 0x09
     6da:	88 87       	std	Y+8, r24	; 0x08
		DF_SPI_RW(Buf1Read);					//buffer 1 read op-code
		DF_SPI_RW(0x00);						//don't cares
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
		DF_SPI_RW(0x00);						//don't cares
		for( i=0; i<No_of_bytes; i++)
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	9a 81       	ldd	r25, Y+2	; 0x02
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	9a 83       	std	Y+2, r25	; 0x02
     6e4:	89 83       	std	Y+1, r24	; 0x01
     6e6:	29 81       	ldd	r18, Y+1	; 0x01
     6e8:	3a 81       	ldd	r19, Y+2	; 0x02
     6ea:	8e 81       	ldd	r24, Y+6	; 0x06
     6ec:	9f 81       	ldd	r25, Y+7	; 0x07
     6ee:	28 17       	cp	r18, r24
     6f0:	39 07       	cpc	r19, r25
     6f2:	48 f3       	brcs	.-46     	; 0x6c6 <Buffer_Read_Str+0x6e>
			*(BufferPtr) = DF_SPI_RW(0x00);		//read byte and put it in AVR buffer pointed to by *BufferPtr
			BufferPtr++;						//point to next element in AVR buffer
		}
	}
#endif
}
     6f4:	29 96       	adiw	r28, 0x09	; 9
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	cf 91       	pop	r28
     702:	df 91       	pop	r29
     704:	08 95       	ret

00000706 <Buffer_Write_Enable>:
*					buffers. NOTE : User must ensure that CS goes high to terminate
*					this mode before accessing other dataflash functionalities 
*
******************************************************************************/
void Buffer_Write_Enable (unsigned char BufferNo, unsigned int IntPageAdr)
{
     706:	df 93       	push	r29
     708:	cf 93       	push	r28
     70a:	00 d0       	rcall	.+0      	; 0x70c <Buffer_Write_Enable+0x6>
     70c:	0f 92       	push	r0
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	89 83       	std	Y+1, r24	; 0x01
     714:	7b 83       	std	Y+3, r23	; 0x03
     716:	6a 83       	std	Y+2, r22	; 0x02
	DF_CS_inactive;								//make sure to toggle CS signal in order
     718:	a5 e2       	ldi	r26, 0x25	; 37
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	e5 e2       	ldi	r30, 0x25	; 37
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	81 60       	ori	r24, 0x01	; 1
     724:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     726:	a5 e2       	ldi	r26, 0x25	; 37
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	e5 e2       	ldi	r30, 0x25	; 37
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	8e 7f       	andi	r24, 0xFE	; 254
     732:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//write enable to buffer 1
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	81 30       	cpi	r24, 0x01	; 1
     738:	79 f4       	brne	.+30     	; 0x758 <Buffer_Write_Enable+0x52>
	{
		DF_SPI_RW(Buf1Write);					//buffer 1 write op-code
     73a:	84 e8       	ldi	r24, 0x84	; 132
     73c:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	9b 81       	ldd	r25, Y+3	; 0x03
     74a:	89 2f       	mov	r24, r25
     74c:	99 27       	eor	r25, r25
     74e:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
	}
#endif
}
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	cf 91       	pop	r28
     760:	df 91       	pop	r29
     762:	08 95       	ret

00000764 <Buffer_Write_Byte>:
*	Purpose :		Writes one byte to one of the dataflash
*					internal SRAM buffers
*
******************************************************************************/
void Buffer_Write_Byte (unsigned char BufferNo, unsigned int IntPageAdr, unsigned char Data)
{
     764:	df 93       	push	r29
     766:	cf 93       	push	r28
     768:	00 d0       	rcall	.+0      	; 0x76a <Buffer_Write_Byte+0x6>
     76a:	00 d0       	rcall	.+0      	; 0x76c <Buffer_Write_Byte+0x8>
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	89 83       	std	Y+1, r24	; 0x01
     772:	7b 83       	std	Y+3, r23	; 0x03
     774:	6a 83       	std	Y+2, r22	; 0x02
     776:	4c 83       	std	Y+4, r20	; 0x04
	
	DF_CS_inactive;								//make sure to toggle CS signal in order
     778:	a5 e2       	ldi	r26, 0x25	; 37
     77a:	b0 e0       	ldi	r27, 0x00	; 0
     77c:	e5 e2       	ldi	r30, 0x25	; 37
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	80 81       	ld	r24, Z
     782:	81 60       	ori	r24, 0x01	; 1
     784:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     786:	a5 e2       	ldi	r26, 0x25	; 37
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	e5 e2       	ldi	r30, 0x25	; 37
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	8e 7f       	andi	r24, 0xFE	; 254
     792:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//write byte to buffer 1
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	81 30       	cpi	r24, 0x01	; 1
     798:	91 f4       	brne	.+36     	; 0x7be <Buffer_Write_Byte+0x5a>
	{
		DF_SPI_RW(Buf1Write);					//buffer 1 write op-code
     79a:	84 e8       	ldi	r24, 0x84	; 132
     79c:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     7a6:	8a 81       	ldd	r24, Y+2	; 0x02
     7a8:	9b 81       	ldd	r25, Y+3	; 0x03
     7aa:	89 2f       	mov	r24, r25
     7ac:	99 27       	eor	r25, r25
     7ae:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     7b2:	8a 81       	ldd	r24, Y+2	; 0x02
     7b4:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(Data);						//write data byte
     7b8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ba:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
		DF_SPI_RW(Data);						//write data byte
	}		
#endif
}
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	08 95       	ret

000007cc <Buffer_Write_Str>:
*					internal SRAM buffers from AVR SRAM buffer
*					pointed to by *BufferPtr
*
******************************************************************************/
void Buffer_Write_Str (unsigned char BufferNo, unsigned int IntPageAdr, unsigned int No_of_bytes, unsigned char *BufferPtr)
{
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	29 97       	sbiw	r28, 0x09	; 9
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	8b 83       	std	Y+3, r24	; 0x03
     7e2:	7d 83       	std	Y+5, r23	; 0x05
     7e4:	6c 83       	std	Y+4, r22	; 0x04
     7e6:	5f 83       	std	Y+7, r21	; 0x07
     7e8:	4e 83       	std	Y+6, r20	; 0x06
     7ea:	39 87       	std	Y+9, r19	; 0x09
     7ec:	28 87       	std	Y+8, r18	; 0x08
	unsigned int i;

	DF_CS_inactive;								//make sure to toggle CS signal in order
     7ee:	a5 e2       	ldi	r26, 0x25	; 37
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	e5 e2       	ldi	r30, 0x25	; 37
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	81 60       	ori	r24, 0x01	; 1
     7fa:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     7fc:	a5 e2       	ldi	r26, 0x25	; 37
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	e5 e2       	ldi	r30, 0x25	; 37
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	8e 7f       	andi	r24, 0xFE	; 254
     808:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//write byte(s) to buffer 1
     80a:	8b 81       	ldd	r24, Y+3	; 0x03
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	41 f5       	brne	.+80     	; 0x860 <Buffer_Write_Str+0x94>
	{
		DF_SPI_RW(Buf1Write);					//buffer 1 write op-code
     810:	84 e8       	ldi	r24, 0x84	; 132
     812:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     81c:	8c 81       	ldd	r24, Y+4	; 0x04
     81e:	9d 81       	ldd	r25, Y+5	; 0x05
     820:	89 2f       	mov	r24, r25
     822:	99 27       	eor	r25, r25
     824:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     828:	8c 81       	ldd	r24, Y+4	; 0x04
     82a:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		for( i=0; i<No_of_bytes; i++)
     82e:	1a 82       	std	Y+2, r1	; 0x02
     830:	19 82       	std	Y+1, r1	; 0x01
     832:	0f c0       	rjmp	.+30     	; 0x852 <Buffer_Write_Str+0x86>
		{
			DF_SPI_RW(*(BufferPtr));			//write byte pointed at by *BufferPtr to dataflash buffer 1 location
     834:	e8 85       	ldd	r30, Y+8	; 0x08
     836:	f9 85       	ldd	r31, Y+9	; 0x09
     838:	80 81       	ld	r24, Z
     83a:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
			BufferPtr++;						//point to next element in AVR buffer
     83e:	88 85       	ldd	r24, Y+8	; 0x08
     840:	99 85       	ldd	r25, Y+9	; 0x09
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	99 87       	std	Y+9, r25	; 0x09
     846:	88 87       	std	Y+8, r24	; 0x08
	{
		DF_SPI_RW(Buf1Write);					//buffer 1 write op-code
		DF_SPI_RW(0x00);						//don't cares
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
		for( i=0; i<No_of_bytes; i++)
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	9a 81       	ldd	r25, Y+2	; 0x02
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	29 81       	ldd	r18, Y+1	; 0x01
     854:	3a 81       	ldd	r19, Y+2	; 0x02
     856:	8e 81       	ldd	r24, Y+6	; 0x06
     858:	9f 81       	ldd	r25, Y+7	; 0x07
     85a:	28 17       	cp	r18, r24
     85c:	39 07       	cpc	r19, r25
     85e:	50 f3       	brcs	.-44     	; 0x834 <Buffer_Write_Str+0x68>
			DF_SPI_RW(*(BufferPtr));			//write byte pointed at by *BufferPtr to dataflash buffer 2 location
			BufferPtr++;						//point to next element in AVR buffer
		}
	}
#endif
}
     860:	29 96       	adiw	r28, 0x09	; 9
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	cf 91       	pop	r28
     86e:	df 91       	pop	r29
     870:	08 95       	ret

00000872 <Buffer_To_Page>:
*
*	Purpose :		Transfers a page from dataflash SRAM buffer to flash
*					
******************************************************************************/
void Buffer_To_Page (unsigned char BufferNo, unsigned int PageAdr)
{
     872:	df 93       	push	r29
     874:	cf 93       	push	r28
     876:	00 d0       	rcall	.+0      	; 0x878 <Buffer_To_Page+0x6>
     878:	0f 92       	push	r0
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	89 83       	std	Y+1, r24	; 0x01
     880:	7b 83       	std	Y+3, r23	; 0x03
     882:	6a 83       	std	Y+2, r22	; 0x02
	DF_CS_inactive;												//make sure to toggle CS signal in order
     884:	a5 e2       	ldi	r26, 0x25	; 37
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e5 e2       	ldi	r30, 0x25	; 37
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	81 60       	ori	r24, 0x01	; 1
     890:	8c 93       	st	X, r24
	DF_CS_active;												//to reset dataflash command decoder
     892:	a5 e2       	ldi	r26, 0x25	; 37
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	e5 e2       	ldi	r30, 0x25	; 37
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	8e 7f       	andi	r24, 0xFE	; 254
     89e:	8c 93       	st	X, r24
		
	if (1 == BufferNo)											//program flash page from buffer 1
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	49 f5       	brne	.+82     	; 0x8f8 <Buffer_To_Page+0x86>
	{
		DF_SPI_RW(Buf1ToFlashWE);								//buffer 1 to flash with erase op-code
     8a6:	83 e8       	ldi	r24, 0x83	; 131
     8a8:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr >> (16 - PageBits)));	//upper part of page address
     8ac:	80 91 34 03 	lds	r24, 0x0334
     8b0:	28 2f       	mov	r18, r24
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	80 e1       	ldi	r24, 0x10	; 16
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	ac 01       	movw	r20, r24
     8ba:	42 1b       	sub	r20, r18
     8bc:	53 0b       	sbc	r21, r19
     8be:	9a 01       	movw	r18, r20
     8c0:	8a 81       	ldd	r24, Y+2	; 0x02
     8c2:	9b 81       	ldd	r25, Y+3	; 0x03
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <Buffer_To_Page+0x58>
     8c6:	96 95       	lsr	r25
     8c8:	87 95       	ror	r24
     8ca:	2a 95       	dec	r18
     8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <Buffer_To_Page+0x54>
     8ce:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr << (PageBits - 8)));	//lower part of page address
     8d2:	80 91 34 03 	lds	r24, 0x0334
     8d6:	88 2f       	mov	r24, r24
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	9c 01       	movw	r18, r24
     8dc:	28 50       	subi	r18, 0x08	; 8
     8de:	30 40       	sbci	r19, 0x00	; 0
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	9b 81       	ldd	r25, Y+3	; 0x03
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <Buffer_To_Page+0x78>
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	2a 95       	dec	r18
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <Buffer_To_Page+0x74>
     8ee:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);										//don't cares
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr << (PageBits - 8)));	//lower part of page address
		DF_SPI_RW(0x00);										//don't cares
	}
#endif
	
	DF_CS_inactive;												//initiate flash page programming
     8f8:	a5 e2       	ldi	r26, 0x25	; 37
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	e5 e2       	ldi	r30, 0x25	; 37
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	81 60       	ori	r24, 0x01	; 1
     904:	8c 93       	st	X, r24
	DF_CS_active;												
     906:	a5 e2       	ldi	r26, 0x25	; 37
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e5 e2       	ldi	r30, 0x25	; 37
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	8e 7f       	andi	r24, 0xFE	; 254
     912:	8c 93       	st	X, r24
	
	while(!(Read_DF_status() & 0x80));							//monitor the status register, wait until busy-flag is high
     914:	0e 94 55 02 	call	0x4aa	; 0x4aa <Read_DF_status>
     918:	88 23       	and	r24, r24
     91a:	e4 f7       	brge	.-8      	; 0x914 <Buffer_To_Page+0xa2>
}
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	cf 91       	pop	r28
     924:	df 91       	pop	r29
     926:	08 95       	ret

00000928 <Cont_Flash_Read_Enable>:
*
*	Purpose :		Initiates a continuous read from a location in the DataFlash
*					
******************************************************************************/
void Cont_Flash_Read_Enable (unsigned int PageAdr, unsigned int IntPageAdr)
{
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	00 d0       	rcall	.+0      	; 0x92e <Cont_Flash_Read_Enable+0x6>
     92e:	00 d0       	rcall	.+0      	; 0x930 <Cont_Flash_Read_Enable+0x8>
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	9a 83       	std	Y+2, r25	; 0x02
     936:	89 83       	std	Y+1, r24	; 0x01
     938:	7c 83       	std	Y+4, r23	; 0x04
     93a:	6b 83       	std	Y+3, r22	; 0x03
	DF_CS_inactive;																//make sure to toggle CS signal in order
     93c:	a5 e2       	ldi	r26, 0x25	; 37
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	e5 e2       	ldi	r30, 0x25	; 37
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	81 60       	ori	r24, 0x01	; 1
     948:	8c 93       	st	X, r24
	DF_CS_active;																//to reset dataflash command decoder
     94a:	a5 e2       	ldi	r26, 0x25	; 37
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	e5 e2       	ldi	r30, 0x25	; 37
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	8e 7f       	andi	r24, 0xFE	; 254
     956:	8c 93       	st	X, r24
	
	DF_SPI_RW(ContArrayRead);													//Continuous Array Read op-code
     958:	88 e6       	ldi	r24, 0x68	; 104
     95a:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW((unsigned char)(PageAdr >> (16 - PageBits)));						//upper part of page address
     95e:	80 91 34 03 	lds	r24, 0x0334
     962:	28 2f       	mov	r18, r24
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	80 e1       	ldi	r24, 0x10	; 16
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	ac 01       	movw	r20, r24
     96c:	42 1b       	sub	r20, r18
     96e:	53 0b       	sbc	r21, r19
     970:	9a 01       	movw	r18, r20
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	02 c0       	rjmp	.+4      	; 0x97c <Cont_Flash_Read_Enable+0x54>
     978:	96 95       	lsr	r25
     97a:	87 95       	ror	r24
     97c:	2a 95       	dec	r18
     97e:	e2 f7       	brpl	.-8      	; 0x978 <Cont_Flash_Read_Enable+0x50>
     980:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW((unsigned char)((PageAdr << (PageBits - 8))+ (IntPageAdr>>8)));	//lower part of page address and MSB of int.page adr.
     984:	80 91 34 03 	lds	r24, 0x0334
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	9c 01       	movw	r18, r24
     98e:	28 50       	subi	r18, 0x08	; 8
     990:	30 40       	sbci	r19, 0x00	; 0
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	02 c0       	rjmp	.+4      	; 0x99c <Cont_Flash_Read_Enable+0x74>
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	2a 95       	dec	r18
     99e:	e2 f7       	brpl	.-8      	; 0x998 <Cont_Flash_Read_Enable+0x70>
     9a0:	28 2f       	mov	r18, r24
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	89 2f       	mov	r24, r25
     9a8:	99 27       	eor	r25, r25
     9aa:	82 0f       	add	r24, r18
     9ac:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW((unsigned char)(IntPageAdr));										//LSB byte of internal page address
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW(0x00);															//perform 4 dummy writes
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW(0x00);															//in order to intiate DataFlash
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW(0x00);															//address pointers
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW(0x00);
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
}
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	cf 91       	pop	r28
     9d8:	df 91       	pop	r29
     9da:	08 95       	ret

000009dc <LCD_Init>:
*   Purpose :       Initialize LCD_displayData buffer.
*                   Set up the LCD (timing, contrast, etc.)
*
*****************************************************************************/
void LCD_Init (void)
{
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
    LCD_AllSegments(FALSE);                    // Clear segment buffer.
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <LCD_AllSegments>
    LCD_CONTRAST_LEVEL(LCD_INITIAL_CONTRAST);  //Set the LCD contrast level
     9ea:	e7 ee       	ldi	r30, 0xE7	; 231
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	8f e0       	ldi	r24, 0x0F	; 15
     9f0:	80 83       	st	Z, r24
    LCDCRB = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0); // Select asynchronous clock source, enable all COM pins and enable all segment pins.
     9f2:	e5 ee       	ldi	r30, 0xE5	; 229
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	87 eb       	ldi	r24, 0xB7	; 183
     9f8:	80 83       	st	Z, r24
    LCDFRR = (0<<LCDPS0) | (7<<LCDCD0);        // Set LCD prescaler to give a framerate of 32,0 Hz
     9fa:	e6 ee       	ldi	r30, 0xE6	; 230
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	87 e0       	ldi	r24, 0x07	; 7
     a00:	80 83       	st	Z, r24
    LCDCRA = (1<<LCDEN) | (1<<LCDAB);          // Enable LCD and set low power waveform
     a02:	e4 ee       	ldi	r30, 0xE4	; 228
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	80 ec       	ldi	r24, 0xC0	; 192
     a08:	80 83       	st	Z, r24
    LCDCRA |= (1<<LCDIE);                      //Enable LCD start of frame interrupt
     a0a:	a4 ee       	ldi	r26, 0xE4	; 228
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e4 ee       	ldi	r30, 0xE4	; 228
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	88 60       	ori	r24, 0x08	; 8
     a16:	8c 93       	st	X, r24
    gLCD_Update_Required = FALSE;
     a18:	10 92 8a 02 	sts	0x028A, r1
    sei();
     a1c:	78 94       	sei
}
     a1e:	cf 91       	pop	r28
     a20:	df 91       	pop	r29
     a22:	08 95       	ret

00000a24 <LCD_Clear>:
/****************************************************************************
*	Function name : LCD_Clear
*	Purpose :		Clear the LCD
*****************************************************************************/
void LCD_Clear(void)
{
     a24:	df 93       	push	r29
     a26:	cf 93       	push	r28
     a28:	0f 92       	push	r0
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
	enter=0;
     a2e:	10 92 8e 02 	sts	0x028E, r1
	for (i=0; i<TEXTBUFFER_SIZE; i++)
     a32:	19 82       	std	Y+1, r1	; 0x01
     a34:	0b c0       	rjmp	.+22     	; 0xa4c <LCD_Clear+0x28>
    gTextBuffer[i] = ' ';		
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	88 2f       	mov	r24, r24
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	fc 01       	movw	r30, r24
     a3e:	e2 59       	subi	r30, 0x92	; 146
     a40:	fc 4f       	sbci	r31, 0xFC	; 252
     a42:	80 e2       	ldi	r24, 0x20	; 32
     a44:	80 83       	st	Z, r24
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i;
	enter=0;
	for (i=0; i<TEXTBUFFER_SIZE; i++)
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	8f 5f       	subi	r24, 0xFF	; 255
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	89 31       	cpi	r24, 0x19	; 25
     a50:	90 f3       	brcs	.-28     	; 0xa36 <LCD_Clear+0x12>
    gTextBuffer[i] = ' ';		
	
}
     a52:	0f 90       	pop	r0
     a54:	cf 91       	pop	r28
     a56:	df 91       	pop	r29
     a58:	08 95       	ret

00000a5a <LCD_puts>:
*	Function name : LCD_puts
*	Parameters :	pStr: Pointer to the string
*	Purpose :		Writes a string to the LCD
*****************************************************************************/
void LCD_puts(char *pStr)
{
     a5a:	df 93       	push	r29
     a5c:	cf 93       	push	r28
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <LCD_puts+0x6>
     a60:	0f 92       	push	r0
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
     a66:	9b 83       	std	Y+3, r25	; 0x03
     a68:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i; 
	enter=1;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 8e 02 	sts	0x028E, r24
	gLCD_Update_Required = 1;
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	80 93 8a 02 	sts	0x028A, r24
	LCD_puts_f(PSTR(""));
     a76:	88 ec       	ldi	r24, 0xC8	; 200
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 66 07 	call	0xecc	; 0xecc <LCD_puts_f>
	enter=1;	
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 8e 02 	sts	0x028E, r24
	if(enter)// This condition is to enable the scroll function
     a84:	80 91 8e 02 	lds	r24, 0x028E
     a88:	88 23       	and	r24, r24
     a8a:	09 f4       	brne	.+2      	; 0xa8e <LCD_puts+0x34>
     a8c:	43 c0       	rjmp	.+134    	; 0xb14 <LCD_puts+0xba>
    {
    enter = 0;
     a8e:	10 92 8e 02 	sts	0x028E, r1
	while (gLCD_Update_Required);      // Wait for access to buffer
     a92:	80 91 8a 02 	lds	r24, 0x028A
     a96:	88 23       	and	r24, r24
     a98:	e1 f7       	brne	.-8      	; 0xa92 <LCD_puts+0x38>

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
     a9a:	19 82       	std	Y+1, r1	; 0x01
     a9c:	13 c0       	rjmp	.+38     	; 0xac4 <LCD_puts+0x6a>
    gTextBuffer[i] = pStr[i];
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	48 2f       	mov	r20, r24
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	28 2f       	mov	r18, r24
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	8a 81       	ldd	r24, Y+2	; 0x02
     aac:	9b 81       	ldd	r25, Y+3	; 0x03
     aae:	fc 01       	movw	r30, r24
     ab0:	e2 0f       	add	r30, r18
     ab2:	f3 1f       	adc	r31, r19
     ab4:	80 81       	ld	r24, Z
     ab6:	fa 01       	movw	r30, r20
     ab8:	e2 59       	subi	r30, 0x92	; 146
     aba:	fc 4f       	sbci	r31, 0xFC	; 252
     abc:	80 83       	st	Z, r24
	if(enter)// This condition is to enable the scroll function
    {
    enter = 0;
	while (gLCD_Update_Required);      // Wait for access to buffer

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	8f 5f       	subi	r24, 0xFF	; 255
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	8a 81       	ldd	r24, Y+2	; 0x02
     acc:	9b 81       	ldd	r25, Y+3	; 0x03
     ace:	fc 01       	movw	r30, r24
     ad0:	e2 0f       	add	r30, r18
     ad2:	f3 1f       	adc	r31, r19
     ad4:	80 81       	ld	r24, Z
     ad6:	88 23       	and	r24, r24
     ad8:	19 f0       	breq	.+6      	; 0xae0 <LCD_puts+0x86>
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	89 31       	cpi	r24, 0x19	; 25
     ade:	f8 f2       	brcs	.-66     	; 0xa9e <LCD_puts+0x44>
    gTextBuffer[i] = pStr[i];
    
	gTextBuffer[i] = '\0';
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	88 2f       	mov	r24, r24
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	fc 01       	movw	r30, r24
     ae8:	e2 59       	subi	r30, 0x92	; 146
     aea:	fc 4f       	sbci	r31, 0xFC	; 252
     aec:	10 82       	st	Z, r1

    if (i > 6)
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	87 30       	cpi	r24, 0x07	; 7
     af2:	48 f0       	brcs	.+18     	; 0xb06 <LCD_puts+0xac>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 37 03 	sts	0x0337, r24
        gScroll = 0;
     afa:	10 92 87 03 	sts	0x0387, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	80 93 8b 02 	sts	0x028B, r24
     b04:	04 c0       	rjmp	.+8      	; 0xb0e <LCD_puts+0xb4>
    }
    else
    {
        gScrollMode = 0;        
     b06:	10 92 37 03 	sts	0x0337, r1
        gScroll = 0;
     b0a:	10 92 87 03 	sts	0x0387, r1
    }

    gLCD_Update_Required = 1;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	80 93 8a 02 	sts	0x028A, r24
}
}
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	cf 91       	pop	r28
     b1c:	df 91       	pop	r29
     b1e:	08 95       	ret

00000b20 <LCD_putc>:
/****************************************************************************
*	Function name : LCD_putc
*	Purpose :		Writes a character to the LCD
*****************************************************************************/
void LCD_putc(char character)
{
     b20:	df 93       	push	r29
     b22:	cf 93       	push	r28
     b24:	00 d0       	rcall	.+0      	; 0xb26 <LCD_putc+0x6>
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t digit=0;
     b2c:	19 82       	std	Y+1, r1	; 0x01
	enter=1;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 93 8e 02 	sts	0x028E, r24
    LCD_puts_f(PSTR(""));
     b34:	89 ec       	ldi	r24, 0xC9	; 201
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 66 07 	call	0xecc	; 0xecc <LCD_puts_f>
	if (digit < TEXTBUFFER_SIZE)
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	89 31       	cpi	r24, 0x19	; 25
     b40:	40 f4       	brcc	.+16     	; 0xb52 <LCD_putc+0x32>
        gTextBuffer[digit] = character;
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	88 2f       	mov	r24, r24
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	fc 01       	movw	r30, r24
     b4a:	e2 59       	subi	r30, 0x92	; 146
     b4c:	fc 4f       	sbci	r31, 0xFC	; 252
     b4e:	8a 81       	ldd	r24, Y+2	; 0x02
     b50:	80 83       	st	Z, r24
}
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <LCD_Colon>:
*
*	Purpose :		Enable/disable colons on the LCD
*
*****************************************************************************/
void LCD_Colon(char show)
{
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	0f 92       	push	r0
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	89 83       	std	Y+1, r24	; 0x01
    gColon = show;
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	80 93 8d 02 	sts	0x028D, r24
}
     b6e:	0f 90       	pop	r0
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <LCD_UpdateRequired>:
*
*	Purpose :		Tells the LCD that there is new data to be presented
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <LCD_UpdateRequired+0x6>
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	89 83       	std	Y+1, r24	; 0x01
     b82:	6a 83       	std	Y+2, r22	; 0x02

    while (gLCD_Update_Required);
     b84:	80 91 8a 02 	lds	r24, 0x028A
     b88:	88 23       	and	r24, r24
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <LCD_UpdateRequired+0xe>
    
    gScrollMode = scrollmode;
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	80 93 37 03 	sts	0x0337, r24
    gScroll = 0;
     b92:	10 92 87 03 	sts	0x0387, r1

    gLCD_Update_Required = update;
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	80 93 8a 02 	sts	0x028A, r24
}
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <LCD_FlashReset>:
*
*	Purpose :		This function resets the blinking cycle of a flashing digit
*
*****************************************************************************/
void LCD_FlashReset(void)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
    gFlashTimer = 0;
     bae:	10 92 8c 02 	sts	0x028C, r1
}
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <LCD_WriteDigit>:
*   Purpose :       Stores LCD control data in the LCD_displayData buffer.
*                   (The LCD_displayData is latched in the LCD_SOF interrupt.)
*
*****************************************************************************/
void LCD_WriteDigit(char c, char digit)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	2d 97       	sbiw	r28, 0x0d	; 13
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	8c 87       	std	Y+12, r24	; 0x0c
     bce:	6d 87       	std	Y+13, r22	; 0x0d

    unsigned int seg = 0x0000;                  // Holds the segment pattern
     bd0:	1b 86       	std	Y+11, r1	; 0x0b
     bd2:	1a 86       	std	Y+10, r1	; 0x0a
    char mask, nibble;
    char *ptr;
    char i;


    if (digit > 5)                              // Skip if digit is illegal
     bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd6:	86 30       	cpi	r24, 0x06	; 6
     bd8:	08 f0       	brcs	.+2      	; 0xbdc <LCD_WriteDigit+0x24>
     bda:	68 c0       	rjmp	.+208    	; 0xcac <LCD_WriteDigit+0xf4>
        return;

    //Lookup character table for segmet data
    if ((c >= '*') && (c <= 'z'))
     bdc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bde:	8a 32       	cpi	r24, 0x2A	; 42
     be0:	10 f1       	brcs	.+68     	; 0xc26 <LCD_WriteDigit+0x6e>
     be2:	8c 85       	ldd	r24, Y+12	; 0x0c
     be4:	8b 37       	cpi	r24, 0x7B	; 123
     be6:	f8 f4       	brcc	.+62     	; 0xc26 <LCD_WriteDigit+0x6e>
    {
        // c is a letter
        if (c >= 'a')                           // Convert to upper case
     be8:	8c 85       	ldd	r24, Y+12	; 0x0c
     bea:	81 36       	cpi	r24, 0x61	; 97
     bec:	18 f0       	brcs	.+6      	; 0xbf4 <LCD_WriteDigit+0x3c>
            c &= ~0x20;                         // if necessarry
     bee:	8c 85       	ldd	r24, Y+12	; 0x0c
     bf0:	8f 7d       	andi	r24, 0xDF	; 223
     bf2:	8c 87       	std	Y+12, r24	; 0x0c

        c -= '*';
     bf4:	8c 85       	ldd	r24, Y+12	; 0x0c
     bf6:	8a 52       	subi	r24, 0x2A	; 42
     bf8:	8c 87       	std	Y+12, r24	; 0x0c

		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
     bfa:	8c 85       	ldd	r24, Y+12	; 0x0c
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	84 5a       	subi	r24, 0xA4	; 164
     c06:	9f 4f       	sbci	r25, 0xFF	; 255
     c08:	9c 83       	std	Y+4, r25	; 0x04
     c0a:	8b 83       	std	Y+3, r24	; 0x03
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	9c 81       	ldd	r25, Y+4	; 0x04
     c10:	fc 01       	movw	r30, r24
     c12:	85 91       	lpm	r24, Z+
     c14:	94 91       	lpm	r25, Z+
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	fc 83       	std	Y+4, r31	; 0x04
     c1c:	eb 83       	std	Y+3, r30	; 0x03
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	9a 81       	ldd	r25, Y+2	; 0x02
     c22:	9b 87       	std	Y+11, r25	; 0x0b
     c24:	8a 87       	std	Y+10, r24	; 0x0a
	}

    // Adjust mask according to LCD segment mapping
    if (digit & 0x01)
     c26:	8d 85       	ldd	r24, Y+13	; 0x0d
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	81 70       	andi	r24, 0x01	; 1
     c2e:	90 70       	andi	r25, 0x00	; 0
     c30:	88 23       	and	r24, r24
     c32:	19 f0       	breq	.+6      	; 0xc3a <LCD_WriteDigit+0x82>
        mask = 0x0F;                // Digit 1, 3, 5
     c34:	8f e0       	ldi	r24, 0x0F	; 15
     c36:	89 87       	std	Y+9, r24	; 0x09
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <LCD_WriteDigit+0x86>
    else
        mask = 0xF0;                // Digit 0, 2, 4
     c3a:	80 ef       	ldi	r24, 0xF0	; 240
     c3c:	89 87       	std	Y+9, r24	; 0x09

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
     c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c40:	86 95       	lsr	r24
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	86 5a       	subi	r24, 0xA6	; 166
     c48:	9c 4f       	sbci	r25, 0xFC	; 252
     c4a:	9f 83       	std	Y+7, r25	; 0x07
     c4c:	8e 83       	std	Y+6, r24	; 0x06

    for (i = 0; i < 4; i++)
     c4e:	1d 82       	std	Y+5, r1	; 0x05
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <LCD_WriteDigit+0xee>
    {
        nibble = seg & 0x000F;
     c52:	8a 85       	ldd	r24, Y+10	; 0x0a
     c54:	8f 70       	andi	r24, 0x0F	; 15
     c56:	88 87       	std	Y+8, r24	; 0x08
        seg >>= 4;
     c58:	8a 85       	ldd	r24, Y+10	; 0x0a
     c5a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c5c:	92 95       	swap	r25
     c5e:	82 95       	swap	r24
     c60:	8f 70       	andi	r24, 0x0F	; 15
     c62:	89 27       	eor	r24, r25
     c64:	9f 70       	andi	r25, 0x0F	; 15
     c66:	89 27       	eor	r24, r25
     c68:	9b 87       	std	Y+11, r25	; 0x0b
     c6a:	8a 87       	std	Y+10, r24	; 0x0a
        if (digit & 0x01)
     c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	81 70       	andi	r24, 0x01	; 1
     c74:	90 70       	andi	r25, 0x00	; 0
     c76:	88 23       	and	r24, r24
     c78:	21 f0       	breq	.+8      	; 0xc82 <LCD_WriteDigit+0xca>
            nibble <<= 4;
     c7a:	88 85       	ldd	r24, Y+8	; 0x08
     c7c:	82 95       	swap	r24
     c7e:	80 7f       	andi	r24, 0xF0	; 240
     c80:	88 87       	std	Y+8, r24	; 0x08
        *ptr = (*ptr & mask) | nibble;
     c82:	ee 81       	ldd	r30, Y+6	; 0x06
     c84:	ff 81       	ldd	r31, Y+7	; 0x07
     c86:	90 81       	ld	r25, Z
     c88:	89 85       	ldd	r24, Y+9	; 0x09
     c8a:	98 23       	and	r25, r24
     c8c:	88 85       	ldd	r24, Y+8	; 0x08
     c8e:	89 2b       	or	r24, r25
     c90:	ee 81       	ldd	r30, Y+6	; 0x06
     c92:	ff 81       	ldd	r31, Y+7	; 0x07
     c94:	80 83       	st	Z, r24
        ptr += 5;
     c96:	8e 81       	ldd	r24, Y+6	; 0x06
     c98:	9f 81       	ldd	r25, Y+7	; 0x07
     c9a:	05 96       	adiw	r24, 0x05	; 5
     c9c:	9f 83       	std	Y+7, r25	; 0x07
     c9e:	8e 83       	std	Y+6, r24	; 0x06
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}

    for (i = 0; i < 4; i++)
     ca0:	8d 81       	ldd	r24, Y+5	; 0x05
     ca2:	8f 5f       	subi	r24, 0xFF	; 255
     ca4:	8d 83       	std	Y+5, r24	; 0x05
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	84 30       	cpi	r24, 0x04	; 4
     caa:	98 f2       	brcs	.-90     	; 0xc52 <LCD_WriteDigit+0x9a>
        if (digit & 0x01)
            nibble <<= 4;
        *ptr = (*ptr & mask) | nibble;
        ptr += 5;
    }
}
     cac:	2d 96       	adiw	r28, 0x0d	; 13
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <LCD_AllSegments>:
*
*   Purpose :       shows or hide all all LCD segments on the LCD
*
*****************************************************************************/
void LCD_AllSegments(char show)
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <LCD_AllSegments+0x6>
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;

    if (show)
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	88 23       	and	r24, r24
     cce:	11 f0       	breq	.+4      	; 0xcd4 <LCD_AllSegments+0x16>
        show = 0xFF;
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	8a 83       	std	Y+2, r24	; 0x02

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
     cd4:	19 82       	std	Y+1, r1	; 0x01
     cd6:	0b c0       	rjmp	.+22     	; 0xcee <LCD_AllSegments+0x30>
        *(LCD_Data + i) = show;
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	fc 01       	movw	r30, r24
     ce0:	e6 5a       	subi	r30, 0xA6	; 166
     ce2:	fc 4f       	sbci	r31, 0xFC	; 252
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	80 83       	st	Z, r24

    if (show)
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	8f 5f       	subi	r24, 0xFF	; 255
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	84 31       	cpi	r24, 0x14	; 20
     cf2:	90 f3       	brcs	.-28     	; 0xcd8 <LCD_AllSegments+0x1a>
        *(LCD_Data + i) = show;
}
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <__vector_22>:
*   Purpose: Latch the LCD_displayData and Set LCD_status.updateComplete
*
*****************************************************************************/

SIGNAL(SIG_LCD)
{
     cfe:	1f 92       	push	r1
     d00:	0f 92       	push	r0
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	2f 93       	push	r18
     d0a:	3f 93       	push	r19
     d0c:	4f 93       	push	r20
     d0e:	5f 93       	push	r21
     d10:	6f 93       	push	r22
     d12:	7f 93       	push	r23
     d14:	8f 93       	push	r24
     d16:	9f 93       	push	r25
     d18:	af 93       	push	r26
     d1a:	bf 93       	push	r27
     d1c:	ef 93       	push	r30
     d1e:	ff 93       	push	r31
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <__vector_22+0x28>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <__vector_22+0x2a>
     d28:	0f 92       	push	r0
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
    char c_flash;
    char flash;

    char EOL;
    unsigned char i;
    LCD_timer--;                    // Decreased every LCD frame
     d2e:	80 91 18 01 	lds	r24, 0x0118
     d32:	81 50       	subi	r24, 0x01	; 1
     d34:	80 93 18 01 	sts	0x0118, r24

    if (gScrollMode)
     d38:	80 91 37 03 	lds	r24, 0x0337
     d3c:	88 23       	and	r24, r24
     d3e:	91 f0       	breq	.+36     	; 0xd64 <__vector_22+0x66>
    {
        // If we are in scroll mode, and the timer has expired,
        // we will update the LCD
        if (LCD_timer == 0)
     d40:	80 91 18 01 	lds	r24, 0x0118
     d44:	88 23       	and	r24, r24
     d46:	81 f4       	brne	.+32     	; 0xd68 <__vector_22+0x6a>
        {
            if (gLCD_Start_Scroll_Timer == 0)
     d48:	80 91 8b 02 	lds	r24, 0x028B
     d4c:	88 23       	and	r24, r24
     d4e:	21 f4       	brne	.+8      	; 0xd58 <__vector_22+0x5a>
            {
                gLCD_Update_Required = TRUE;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	80 93 8a 02 	sts	0x028A, r24
     d56:	08 c0       	rjmp	.+16     	; 0xd68 <__vector_22+0x6a>
            }
            else
                gLCD_Start_Scroll_Timer--;
     d58:	80 91 8b 02 	lds	r24, 0x028B
     d5c:	81 50       	subi	r24, 0x01	; 1
     d5e:	80 93 8b 02 	sts	0x028B, r24
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__vector_22+0x6a>
    }
    else    
    {   // if not scrolling,
        // disble LCD start of frame interrupt
//        cbi(LCDCRA, LCDIE);   //DEBUG
        gScroll = 0;
     d64:	10 92 87 03 	sts	0x0387, r1
    }


    EOL = FALSE;
     d68:	1a 82       	std	Y+2, r1	; 0x02
    if (gLCD_Update_Required == TRUE)
     d6a:	80 91 8a 02 	lds	r24, 0x028A
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	09 f0       	breq	.+2      	; 0xd74 <__vector_22+0x76>
     d72:	81 c0       	rjmp	.+258    	; 0xe76 <__vector_22+0x178>
    {
        // Duty cycle of flashing characters
        if (gFlashTimer < (LCD_FLASH_SEED >> 1))
     d74:	80 91 8c 02 	lds	r24, 0x028C
     d78:	85 30       	cpi	r24, 0x05	; 5
     d7a:	10 f4       	brcc	.+4      	; 0xd80 <__vector_22+0x82>
            flash = 0;
     d7c:	1b 82       	std	Y+3, r1	; 0x03
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <__vector_22+0x86>
        else
            flash = 1;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	8b 83       	std	Y+3, r24	; 0x03

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
     d84:	19 82       	std	Y+1, r1	; 0x01
     d86:	43 c0       	rjmp	.+134    	; 0xe0e <__vector_22+0x110>
        {
            if ((gScroll+i) >= 0 && (!EOL))
     d88:	80 91 87 03 	lds	r24, 0x0387
     d8c:	28 2f       	mov	r18, r24
     d8e:	33 27       	eor	r19, r19
     d90:	27 fd       	sbrc	r18, 7
     d92:	30 95       	com	r19
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	82 0f       	add	r24, r18
     d9c:	93 1f       	adc	r25, r19
     d9e:	99 23       	and	r25, r25
     da0:	14 f1       	brlt	.+68     	; 0xde6 <__vector_22+0xe8>
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	88 23       	and	r24, r24
     da6:	f9 f4       	brne	.+62     	; 0xde6 <__vector_22+0xe8>
            {
                // We have some visible characters
                c = gTextBuffer[i + gScroll];
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	80 91 87 03 	lds	r24, 0x0387
     db2:	99 27       	eor	r25, r25
     db4:	87 fd       	sbrc	r24, 7
     db6:	90 95       	com	r25
     db8:	82 0f       	add	r24, r18
     dba:	93 1f       	adc	r25, r19
     dbc:	fc 01       	movw	r30, r24
     dbe:	e2 59       	subi	r30, 0x92	; 146
     dc0:	fc 4f       	sbci	r31, 0xFC	; 252
     dc2:	80 81       	ld	r24, Z
     dc4:	8d 83       	std	Y+5, r24	; 0x05
                c_flash = c & 0x80 ? 1 : 0;
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	1c 82       	std	Y+4, r1	; 0x04
     dca:	88 23       	and	r24, r24
     dcc:	14 f4       	brge	.+4      	; 0xdd2 <__vector_22+0xd4>
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	8c 83       	std	Y+4, r24	; 0x04
                c = c & 0x7F;
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	8f 77       	andi	r24, 0x7F	; 127
     dd6:	8d 83       	std	Y+5, r24	; 0x05

                if (c == '\0')
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	88 23       	and	r24, r24
     ddc:	31 f4       	brne	.+12     	; 0xdea <__vector_22+0xec>
                    EOL = i+1;      // End of character data
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	8a 83       	std	Y+2, r24	; 0x02
     de4:	02 c0       	rjmp	.+4      	; 0xdea <__vector_22+0xec>
            }
            else
                c = ' ';
     de6:	80 e2       	ldi	r24, 0x20	; 32
     de8:	8d 83       	std	Y+5, r24	; 0x05

            // Check if this character is flashing

            if (c_flash && flash)
     dea:	8c 81       	ldd	r24, Y+4	; 0x04
     dec:	88 23       	and	r24, r24
     dee:	41 f0       	breq	.+16     	; 0xe00 <__vector_22+0x102>
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	88 23       	and	r24, r24
     df4:	29 f0       	breq	.+10     	; 0xe00 <__vector_22+0x102>
                LCD_WriteDigit(' ', i);
     df6:	80 e2       	ldi	r24, 0x20	; 32
     df8:	69 81       	ldd	r22, Y+1	; 0x01
     dfa:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <LCD_WriteDigit>
     dfe:	04 c0       	rjmp	.+8      	; 0xe08 <__vector_22+0x10a>
            else
                LCD_WriteDigit(c, i);
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	69 81       	ldd	r22, Y+1	; 0x01
     e04:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <LCD_WriteDigit>
            flash = 0;
        else
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	8f 5f       	subi	r24, 0xFF	; 255
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	86 30       	cpi	r24, 0x06	; 6
     e12:	08 f4       	brcc	.+2      	; 0xe16 <__vector_22+0x118>
     e14:	b9 cf       	rjmp	.-142    	; 0xd88 <__vector_22+0x8a>
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	11 c0       	rjmp	.+34     	; 0xe3c <__vector_22+0x13e>
            *(pLCDREG + i) = *(LCD_Data+i);
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	dc 01       	movw	r26, r24
     e22:	a4 51       	subi	r26, 0x14	; 20
     e24:	bf 4f       	sbci	r27, 0xFF	; 255
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	88 2f       	mov	r24, r24
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	fc 01       	movw	r30, r24
     e2e:	e6 5a       	subi	r30, 0xA6	; 166
     e30:	fc 4f       	sbci	r31, 0xFC	; 252
     e32:	80 81       	ld	r24, Z
     e34:	8c 93       	st	X, r24
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	84 31       	cpi	r24, 0x14	; 20
     e40:	60 f3       	brcs	.-40     	; 0xe1a <__vector_22+0x11c>
            *(pLCDREG + i) = *(LCD_Data+i);

        // Handle colon
        if (gColon)
     e42:	80 91 8d 02 	lds	r24, 0x028D
     e46:	88 23       	and	r24, r24
     e48:	29 f0       	breq	.+10     	; 0xe54 <__vector_22+0x156>
            *(pLCDREG + 8) = 0x01;
     e4a:	e4 ef       	ldi	r30, 0xF4	; 244
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 83       	st	Z, r24
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <__vector_22+0x15c>
        else
            *(pLCDREG + 8) = 0x00;
     e54:	e4 ef       	ldi	r30, 0xF4	; 244
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1

        // If the text scrolled off the display,
        // we have to start over again.
        if (EOL == 1)
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	21 f4       	brne	.+8      	; 0xe68 <__vector_22+0x16a>
            gScroll = -6;
     e60:	8a ef       	ldi	r24, 0xFA	; 250
     e62:	80 93 87 03 	sts	0x0387, r24
     e66:	05 c0       	rjmp	.+10     	; 0xe72 <__vector_22+0x174>
        else
            gScroll++;
     e68:	80 91 87 03 	lds	r24, 0x0387
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	80 93 87 03 	sts	0x0387, r24

        // No need to update anymore
        gLCD_Update_Required = FALSE;
     e72:	10 92 8a 02 	sts	0x028A, r1
    }


    // LCD_timer is used when scrolling text
    if (LCD_timer == 0)
     e76:	80 91 18 01 	lds	r24, 0x0118
     e7a:	88 23       	and	r24, r24
     e7c:	19 f4       	brne	.+6      	; 0xe84 <__vector_22+0x186>
    {
/*        if ((gScroll <= 0) || EOL)
            LCD_timer = LCD_TIMER_SEED/2;
        else*/
            LCD_timer = LCD_TIMER_SEED;
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	80 93 18 01 	sts	0x0118, r24
    }

    // gFlashTimer is used when flashing characters
    if (gFlashTimer == LCD_FLASH_SEED)
     e84:	80 91 8c 02 	lds	r24, 0x028C
     e88:	8a 30       	cpi	r24, 0x0A	; 10
     e8a:	19 f4       	brne	.+6      	; 0xe92 <__vector_22+0x194>
        gFlashTimer= 0;
     e8c:	10 92 8c 02 	sts	0x028C, r1
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <__vector_22+0x19e>
    else
        gFlashTimer++;
     e92:	80 91 8c 02 	lds	r24, 0x028C
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	80 93 8c 02 	sts	0x028C, r24

}
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <LCD_puts_f>:
*
*****************************************************************************/

// mt void LCD_puts_f(char __flash *pFlashStr, char scrollmode)
void LCD_puts_f(const char *pFlashStr )
{	
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	29 97       	sbiw	r28, 0x09	; 9
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	99 87       	std	Y+9, r25	; 0x09
     ee2:	88 87       	std	Y+8, r24	; 0x08
uint8_t i;
////////////////////////////////
enter = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	80 93 8e 02 	sts	0x028E, r24
	if(enter)
     eea:	80 91 8e 02 	lds	r24, 0x028E
     eee:	88 23       	and	r24, r24
     ef0:	09 f4       	brne	.+2      	; 0xef4 <LCD_puts_f+0x28>
     ef2:	4d c0       	rjmp	.+154    	; 0xf8e <LCD_puts_f+0xc2>
    {
        enter = 0;
     ef4:	10 92 8e 02 	sts	0x028E, r1
    //} CLOSE DOWN
////////////////////////////////
    // char i;


    while (gLCD_Update_Required);      // Wait for access to buffer
     ef8:	80 91 8a 02 	lds	r24, 0x028A
     efc:	88 23       	and	r24, r24
     efe:	e1 f7       	brne	.-8      	; 0xef8 <LCD_puts_f+0x2c>

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
     f00:	1f 82       	std	Y+7, r1	; 0x07
     f02:	18 c0       	rjmp	.+48     	; 0xf34 <LCD_puts_f+0x68>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
     f04:	8f 81       	ldd	r24, Y+7	; 0x07
     f06:	48 2f       	mov	r20, r24
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	8f 81       	ldd	r24, Y+7	; 0x07
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	88 85       	ldd	r24, Y+8	; 0x08
     f12:	99 85       	ldd	r25, Y+9	; 0x09
     f14:	82 0f       	add	r24, r18
     f16:	93 1f       	adc	r25, r19
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	ed 81       	ldd	r30, Y+5	; 0x05
     f1e:	fe 81       	ldd	r31, Y+6	; 0x06
     f20:	84 91       	lpm	r24, Z+
     f22:	8c 83       	std	Y+4, r24	; 0x04
     f24:	8c 81       	ldd	r24, Y+4	; 0x04
     f26:	fa 01       	movw	r30, r20
     f28:	e2 59       	subi	r30, 0x92	; 146
     f2a:	fc 4f       	sbci	r31, 0xFC	; 252
     f2c:	80 83       	st	Z, r24


    while (gLCD_Update_Required);      // Wait for access to buffer

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
     f2e:	8f 81       	ldd	r24, Y+7	; 0x07
     f30:	8f 5f       	subi	r24, 0xFF	; 255
     f32:	8f 83       	std	Y+7, r24	; 0x07
     f34:	8f 81       	ldd	r24, Y+7	; 0x07
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	88 85       	ldd	r24, Y+8	; 0x08
     f3c:	99 85       	ldd	r25, Y+9	; 0x09
     f3e:	82 0f       	add	r24, r18
     f40:	93 1f       	adc	r25, r19
     f42:	9b 83       	std	Y+3, r25	; 0x03
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	ea 81       	ldd	r30, Y+2	; 0x02
     f48:	fb 81       	ldd	r31, Y+3	; 0x03
     f4a:	84 91       	lpm	r24, Z+
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	88 23       	and	r24, r24
     f52:	19 f0       	breq	.+6      	; 0xf5a <LCD_puts_f+0x8e>
     f54:	8f 81       	ldd	r24, Y+7	; 0x07
     f56:	89 31       	cpi	r24, 0x19	; 25
     f58:	a8 f2       	brcs	.-86     	; 0xf04 <LCD_puts_f+0x38>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
    }

    gTextBuffer[i] = '\0';
     f5a:	8f 81       	ldd	r24, Y+7	; 0x07
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	fc 01       	movw	r30, r24
     f62:	e2 59       	subi	r30, 0x92	; 146
     f64:	fc 4f       	sbci	r31, 0xFC	; 252
     f66:	10 82       	st	Z, r1

    if (i > 6)
     f68:	8f 81       	ldd	r24, Y+7	; 0x07
     f6a:	87 30       	cpi	r24, 0x07	; 7
     f6c:	48 f0       	brcs	.+18     	; 0xf80 <LCD_puts_f+0xb4>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	80 93 37 03 	sts	0x0337, r24
        gScroll = 0;
     f74:	10 92 87 03 	sts	0x0387, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	80 93 8b 02 	sts	0x028B, r24
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <LCD_puts_f+0xbc>
    }
    else
    {
        gScrollMode = 0;        
     f80:	10 92 37 03 	sts	0x0337, r1
        gScroll = 0;
     f84:	10 92 87 03 	sts	0x0387, r1
    }

    gLCD_Update_Required = 1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 8a 02 	sts	0x028A, r24
}
}//CLOSE DOWN
     f8e:	29 96       	adiw	r28, 0x09	; 9
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     fa0:	1f 92       	push	r1
     fa2:	0f 92       	push	r0
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	0f 92       	push	r0
     fa8:	11 24       	eor	r1, r1
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <__vector_13+0x18>
     fb8:	00 d0       	rcall	.+0      	; 0xfba <__vector_13+0x1a>
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
     fbe:	e0 ec       	ldi	r30, 0xC0	; 192
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
     fc6:	e6 ec       	ldi	r30, 0xC6	; 198
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8b 83       	std	Y+3, r24	; 0x03

    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	88 71       	andi	r24, 0x18	; 24
     fd2:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     fd4:	80 91 31 03 	lds	r24, 0x0331
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
     fda:	8f 77       	andi	r24, 0x7F	; 127
     fdc:	8c 83       	std	Y+4, r24	; 0x04

    if ( tmphead == UART_RxTail ) {
     fde:	90 91 32 03 	lds	r25, 0x0332
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	89 17       	cp	r24, r25
     fe6:	19 f4       	brne	.+6      	; 0xfee <__vector_13+0x4e>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	0b c0       	rjmp	.+22     	; 0x1004 <__vector_13+0x64>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	80 93 31 03 	sts	0x0331, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	88 2f       	mov	r24, r24
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	fc 01       	movw	r30, r24
     ffc:	e1 55       	subi	r30, 0x51	; 81
     ffe:	fd 4f       	sbci	r31, 0xFD	; 253
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	80 83       	st	Z, r24
    }
    UART_LastRxError = lastRxError;
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	80 93 33 03 	sts	0x0333, r24
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	9f 91       	pop	r25
    101c:	8f 91       	pop	r24
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	8f 93       	push	r24
    1034:	9f 93       	push	r25
    1036:	af 93       	push	r26
    1038:	bf 93       	push	r27
    103a:	ef 93       	push	r30
    103c:	ff 93       	push	r31
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;


    if ( UART_TxHead != UART_TxTail) {
    1048:	90 91 2f 03 	lds	r25, 0x032F
    104c:	80 91 30 03 	lds	r24, 0x0330
    1050:	98 17       	cp	r25, r24
    1052:	99 f0       	breq	.+38     	; 0x107a <__vector_14+0x52>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1054:	80 91 30 03 	lds	r24, 0x0330
    1058:	8f 5f       	subi	r24, 0xFF	; 255
    105a:	8f 71       	andi	r24, 0x1F	; 31
    105c:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	80 93 30 03 	sts	0x0330, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1064:	a6 ec       	ldi	r26, 0xC6	; 198
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	fc 01       	movw	r30, r24
    1070:	e1 57       	subi	r30, 0x71	; 113
    1072:	fd 4f       	sbci	r31, 0xFD	; 253
    1074:	80 81       	ld	r24, Z
    1076:	8c 93       	st	X, r24
    1078:	07 c0       	rjmp	.+14     	; 0x1088 <__vector_14+0x60>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    107a:	a1 ec       	ldi	r26, 0xC1	; 193
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e1 ec       	ldi	r30, 0xC1	; 193
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8f 7d       	andi	r24, 0xDF	; 223
    1086:	8c 93       	st	X, r24
    }
}
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	0f 90       	pop	r0
    10a0:	1f 90       	pop	r1
    10a2:	18 95       	reti

000010a4 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <uart_init+0x6>
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
    10b2:	10 92 2f 03 	sts	0x032F, r1
    UART_TxTail = 0;
    10b6:	10 92 30 03 	sts	0x0330, r1
    UART_RxHead = 0;
    10ba:	10 92 31 03 	sts	0x0331, r1
    UART_RxTail = 0;
    10be:	10 92 32 03 	sts	0x0332, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	99 23       	and	r25, r25
    10c8:	4c f4       	brge	.+18     	; 0x10dc <uart_init+0x38>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed
    10ca:	e0 ec       	ldi	r30, 0xC0	; 192
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	80 83       	st	Z, r24
    	 baudrate &= ~0x8000;
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	9f 77       	andi	r25, 0x7F	; 127
    10d8:	9a 83       	std	Y+2, r25	; 0x02
    10da:	89 83       	std	Y+1, r24	; 0x01
    }
    UBRRH = (unsigned char)(baudrate>>8);
    10dc:	e5 ec       	ldi	r30, 0xC5	; 197
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	89 2f       	mov	r24, r25
    10e6:	99 27       	eor	r25, r25
    10e8:	80 83       	st	Z, r24
    UBRRL = (unsigned char) baudrate;
    10ea:	e4 ec       	ldi	r30, 0xC4	; 196
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	80 83       	st	Z, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
    10f2:	e1 ec       	ldi	r30, 0xC1	; 193
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	88 e9       	ldi	r24, 0x98	; 152
    10f8:	80 83       	st	Z, r24

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
    #else
    UCSRC = (3<<UCSZ0);
    10fa:	e2 ec       	ldi	r30, 0xC2	; 194
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	86 e0       	ldi	r24, 0x06	; 6
    1100:	80 83       	st	Z, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <uart_getc>:
Purpose:  return byte from ringbuffer
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <uart_getc+0x6>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <uart_getc+0x8>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    1118:	90 91 31 03 	lds	r25, 0x0331
    111c:	80 91 32 03 	lds	r24, 0x0332
    1120:	98 17       	cp	r25, r24
    1122:	29 f4       	brne	.+10     	; 0x112e <uart_getc+0x22>
        return UART_NO_DATA;   /* no data available */
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	1d c0       	rjmp	.+58     	; 0x1168 <uart_getc+0x5c>
    }

    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    112e:	80 91 32 03 	lds	r24, 0x0332
    1132:	8f 5f       	subi	r24, 0xFF	; 255
    1134:	8f 77       	andi	r24, 0x7F	; 127
    1136:	8a 83       	std	Y+2, r24	; 0x02
    UART_RxTail = tmptail;
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	80 93 32 03 	sts	0x0332, r24

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	fc 01       	movw	r30, r24
    1146:	e1 55       	subi	r30, 0x51	; 81
    1148:	fd 4f       	sbci	r31, 0xFD	; 253
    114a:	80 81       	ld	r24, Z
    114c:	89 83       	std	Y+1, r24	; 0x01

    return (UART_LastRxError << 8) + data;
    114e:	80 91 33 03 	lds	r24, 0x0333
    1152:	88 2f       	mov	r24, r24
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	38 2f       	mov	r19, r24
    1158:	22 27       	eor	r18, r18
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	82 0f       	add	r24, r18
    1162:	93 1f       	adc	r25, r19
    1164:	9c 83       	std	Y+4, r25	; 0x04
    1166:	8b 83       	std	Y+3, r24	; 0x03
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none
**************************************************************************/
void uart_putc(unsigned char data)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <uart_putc+0x6>
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;


    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1186:	80 91 2f 03 	lds	r24, 0x032F
    118a:	8f 5f       	subi	r24, 0xFF	; 255
    118c:	8f 71       	andi	r24, 0x1F	; 31
    118e:	89 83       	std	Y+1, r24	; 0x01

    while ( tmphead == UART_TxTail ){
    1190:	90 91 30 03 	lds	r25, 0x0330
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	89 17       	cp	r24, r25
    1198:	d9 f3       	breq	.-10     	; 0x1190 <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	fc 01       	movw	r30, r24
    11a2:	e1 57       	subi	r30, 0x71	; 113
    11a4:	fd 4f       	sbci	r31, 0xFD	; 253
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	80 93 2f 03 	sts	0x032F, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    11b0:	a1 ec       	ldi	r26, 0xC1	; 193
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e1 ec       	ldi	r30, 0xC1	; 193
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	80 62       	ori	r24, 0x20	; 32
    11bc:	8c 93       	st	X, r24

}/* uart_putc */
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts(const char *s )
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <uart_puts+0x6>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	9a 83       	std	Y+2, r25	; 0x02
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	0b c0       	rjmp	.+22     	; 0x11ee <uart_puts+0x26>
    while (*s)
      uart_putc(*s++);
    11d8:	e9 81       	ldd	r30, Y+1	; 0x01
    11da:	fa 81       	ldd	r31, Y+2	; 0x02
    11dc:	20 81       	ld	r18, Z
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	82 2f       	mov	r24, r18
    11ea:	0e 94 bd 08 	call	0x117a	; 0x117a <uart_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s)
    11ee:	e9 81       	ldd	r30, Y+1	; 0x01
    11f0:	fa 81       	ldd	r31, Y+2	; 0x02
    11f2:	80 81       	ld	r24, Z
    11f4:	88 23       	and	r24, r24
    11f6:	81 f7       	brne	.-32     	; 0x11d8 <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <uart_puts_p+0x6>
    1208:	00 d0       	rcall	.+0      	; 0x120a <uart_puts_p+0x8>
    120a:	00 d0       	rcall	.+0      	; 0x120c <uart_puts_p+0xa>
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	9d 83       	std	Y+5, r25	; 0x05
    1212:	8c 83       	std	Y+4, r24	; 0x04
    1214:	03 c0       	rjmp	.+6      	; 0x121c <uart_puts_p+0x1a>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
      uart_putc(c);
    1216:	8e 81       	ldd	r24, Y+6	; 0x06
    1218:	0e 94 bd 08 	call	0x117a	; 0x117a <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	9b 83       	std	Y+3, r25	; 0x03
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	9d 83       	std	Y+5, r25	; 0x05
    122c:	8c 83       	std	Y+4, r24	; 0x04
    122e:	ea 81       	ldd	r30, Y+2	; 0x02
    1230:	fb 81       	ldd	r31, Y+3	; 0x03
    1232:	84 91       	lpm	r24, Z+
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	8e 83       	std	Y+6, r24	; 0x06
    123a:	8e 81       	ldd	r24, Y+6	; 0x06
    123c:	88 23       	and	r24, r24
    123e:	59 f7       	brne	.-42     	; 0x1216 <uart_puts_p+0x14>
      uart_putc(c);

}/* uart_puts_p */
    1240:	26 96       	adiw	r28, 0x06	; 6
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <uart_read_line>:
}/* uart1_puts_p */


#endif
void uart_read_line(unsigned char * c_array, uint8_t max, int try_sec)
{
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	2f 97       	sbiw	r28, 0x0f	; 15
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	9b 87       	std	Y+11, r25	; 0x0b
    126c:	8a 87       	std	Y+10, r24	; 0x0a
    126e:	6c 87       	std	Y+12, r22	; 0x0c
    1270:	5e 87       	std	Y+14, r21	; 0x0e
    1272:	4d 87       	std	Y+13, r20	; 0x0d
	uint8_t i=0;
    1274:	19 86       	std	Y+9, r1	; 0x09
	unsigned long z = 0, tries = F_CPU / 160UL * try_sec + 10*max;
    1276:	1d 82       	std	Y+5, r1	; 0x05
    1278:	1e 82       	std	Y+6, r1	; 0x06
    127a:	1f 82       	std	Y+7, r1	; 0x07
    127c:	18 86       	std	Y+8, r1	; 0x08
    127e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1280:	9e 85       	ldd	r25, Y+14	; 0x0e
    1282:	aa 27       	eor	r26, r26
    1284:	97 fd       	sbrc	r25, 7
    1286:	a0 95       	com	r26
    1288:	ba 2f       	mov	r27, r26
    128a:	24 ed       	ldi	r18, 0xD4	; 212
    128c:	30 e3       	ldi	r19, 0x30	; 48
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__mulsi3>
    129a:	ab 01       	movw	r20, r22
    129c:	bc 01       	movw	r22, r24
    129e:	8c 85       	ldd	r24, Y+12	; 0x0c
    12a0:	88 2f       	mov	r24, r24
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	9c 01       	movw	r18, r24
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	c9 01       	movw	r24, r18
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	82 0f       	add	r24, r18
    12b6:	93 1f       	adc	r25, r19
    12b8:	aa 27       	eor	r26, r26
    12ba:	97 fd       	sbrc	r25, 7
    12bc:	a0 95       	com	r26
    12be:	ba 2f       	mov	r27, r26
    12c0:	84 0f       	add	r24, r20
    12c2:	95 1f       	adc	r25, r21
    12c4:	a6 1f       	adc	r26, r22
    12c6:	b7 1f       	adc	r27, r23
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	ab 83       	std	Y+3, r26	; 0x03
    12ce:	bc 83       	std	Y+4, r27	; 0x04
	c_array[0] = 0;
    12d0:	ea 85       	ldd	r30, Y+10	; 0x0a
    12d2:	fb 85       	ldd	r31, Y+11	; 0x0b
    12d4:	10 82       	st	Z, r1

	while(1)
	{
		if(z++ > tries) return;							// Timeout: give up after <try_sec> seconds
    12d6:	1f 86       	std	Y+15, r1	; 0x0f
    12d8:	2d 81       	ldd	r18, Y+5	; 0x05
    12da:	3e 81       	ldd	r19, Y+6	; 0x06
    12dc:	4f 81       	ldd	r20, Y+7	; 0x07
    12de:	58 85       	ldd	r21, Y+8	; 0x08
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	ab 81       	ldd	r26, Y+3	; 0x03
    12e6:	bc 81       	ldd	r27, Y+4	; 0x04
    12e8:	82 17       	cp	r24, r18
    12ea:	93 07       	cpc	r25, r19
    12ec:	a4 07       	cpc	r26, r20
    12ee:	b5 07       	cpc	r27, r21
    12f0:	10 f4       	brcc	.+4      	; 0x12f6 <uart_read_line+0xa4>
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	8f 87       	std	Y+15, r24	; 0x0f
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	af 81       	ldd	r26, Y+7	; 0x07
    12fc:	b8 85       	ldd	r27, Y+8	; 0x08
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	a1 1d       	adc	r26, r1
    1302:	b1 1d       	adc	r27, r1
    1304:	8d 83       	std	Y+5, r24	; 0x05
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	af 83       	std	Y+7, r26	; 0x07
    130a:	b8 87       	std	Y+8, r27	; 0x08
    130c:	ef 85       	ldd	r30, Y+15	; 0x0f
    130e:	ee 23       	and	r30, r30
    1310:	09 f0       	breq	.+2      	; 0x1314 <uart_read_line+0xc2>
    1312:	4c c0       	rjmp	.+152    	; 0x13ac <uart_read_line+0x15a>
		c_array[i]=uart_getc();
    1314:	89 85       	ldd	r24, Y+9	; 0x09
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	8a 85       	ldd	r24, Y+10	; 0x0a
    131c:	9b 85       	ldd	r25, Y+11	; 0x0b
    131e:	8c 01       	movw	r16, r24
    1320:	02 0f       	add	r16, r18
    1322:	13 1f       	adc	r17, r19
    1324:	0e 94 86 08 	call	0x110c	; 0x110c <uart_getc>
    1328:	f8 01       	movw	r30, r16
    132a:	80 83       	st	Z, r24
		if(c_array[i]!=0 && c_array[i]!=10) // A (non-LF) character was received
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	8a 85       	ldd	r24, Y+10	; 0x0a
    1334:	9b 85       	ldd	r25, Y+11	; 0x0b
    1336:	fc 01       	movw	r30, r24
    1338:	e2 0f       	add	r30, r18
    133a:	f3 1f       	adc	r31, r19
    133c:	80 81       	ld	r24, Z
    133e:	88 23       	and	r24, r24
    1340:	51 f2       	breq	.-108    	; 0x12d6 <uart_read_line+0x84>
    1342:	89 85       	ldd	r24, Y+9	; 0x09
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	8a 85       	ldd	r24, Y+10	; 0x0a
    134a:	9b 85       	ldd	r25, Y+11	; 0x0b
    134c:	fc 01       	movw	r30, r24
    134e:	e2 0f       	add	r30, r18
    1350:	f3 1f       	adc	r31, r19
    1352:	80 81       	ld	r24, Z
    1354:	8a 30       	cpi	r24, 0x0A	; 10
    1356:	09 f4       	brne	.+2      	; 0x135a <uart_read_line+0x108>
    1358:	be cf       	rjmp	.-132    	; 0x12d6 <uart_read_line+0x84>
																				// A possible LF from last sentence is skipped
		{
			if(c_array[i]==13 || i==max)
    135a:	89 85       	ldd	r24, Y+9	; 0x09
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	8a 85       	ldd	r24, Y+10	; 0x0a
    1362:	9b 85       	ldd	r25, Y+11	; 0x0b
    1364:	fc 01       	movw	r30, r24
    1366:	e2 0f       	add	r30, r18
    1368:	f3 1f       	adc	r31, r19
    136a:	80 81       	ld	r24, Z
    136c:	8d 30       	cpi	r24, 0x0D	; 13
    136e:	21 f0       	breq	.+8      	; 0x1378 <uart_read_line+0x126>
    1370:	99 85       	ldd	r25, Y+9	; 0x09
    1372:	8c 85       	ldd	r24, Y+12	; 0x0c
    1374:	98 17       	cp	r25, r24
    1376:	51 f4       	brne	.+20     	; 0x138c <uart_read_line+0x13a>
				{c_array[i]=0; break;}
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1380:	9b 85       	ldd	r25, Y+11	; 0x0b
    1382:	fc 01       	movw	r30, r24
    1384:	e2 0f       	add	r30, r18
    1386:	f3 1f       	adc	r31, r19
    1388:	10 82       	st	Z, r1
    138a:	10 c0       	rjmp	.+32     	; 0x13ac <uart_read_line+0x15a>
			else if(c_array[i])
    138c:	89 85       	ldd	r24, Y+9	; 0x09
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8a 85       	ldd	r24, Y+10	; 0x0a
    1394:	9b 85       	ldd	r25, Y+11	; 0x0b
    1396:	fc 01       	movw	r30, r24
    1398:	e2 0f       	add	r30, r18
    139a:	f3 1f       	adc	r31, r19
    139c:	80 81       	ld	r24, Z
    139e:	88 23       	and	r24, r24
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <uart_read_line+0x152>
    13a2:	99 cf       	rjmp	.-206    	; 0x12d6 <uart_read_line+0x84>
				i++;
    13a4:	89 85       	ldd	r24, Y+9	; 0x09
    13a6:	8f 5f       	subi	r24, 0xFF	; 255
    13a8:	89 87       	std	Y+9, r24	; 0x09
    13aa:	95 cf       	rjmp	.-214    	; 0x12d6 <uart_read_line+0x84>
		}
	}
}
    13ac:	2f 96       	adiw	r28, 0x0f	; 15
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	08 95       	ret

000013c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>:
#include "easybutterfly.h" // ACUASeasy library for Butterfly

#define DEBUG_MODE 1

void WAIT_FOR_RELEASE_JOYSTICK_ALL() {
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62

  WAIT_FOR_RELEASE_JOYSTICK_RIGHT
    13ca:	ec e2       	ldi	r30, 0x2C	; 44
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	88 70       	andi	r24, 0x08	; 8
    13d6:	90 70       	andi	r25, 0x00	; 0
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	b9 f3       	breq	.-18     	; 0x13ca <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x8>
  WAIT_FOR_RELEASE_JOYSTICK_LEFT
    13dc:	ec e2       	ldi	r30, 0x2C	; 44
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	84 70       	andi	r24, 0x04	; 4
    13e8:	90 70       	andi	r25, 0x00	; 0
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	b9 f3       	breq	.-18     	; 0x13dc <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x1a>
  WAIT_FOR_RELEASE_JOYSTICK_UP
    13ee:	e3 e2       	ldi	r30, 0x23	; 35
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	80 74       	andi	r24, 0x40	; 64
    13fa:	90 70       	andi	r25, 0x00	; 0
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	b9 f3       	breq	.-18     	; 0x13ee <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x2c>
  WAIT_FOR_RELEASE_JOYSTICK_DOWN
    1400:	e3 e2       	ldi	r30, 0x23	; 35
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	88 23       	and	r24, r24
    1408:	dc f7       	brge	.-10     	; 0x1400 <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x3e>
  WAIT_FOR_RELEASE_JOYSTICK_CENTER
    140a:	e3 e2       	ldi	r30, 0x23	; 35
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	80 71       	andi	r24, 0x10	; 16
    1416:	90 70       	andi	r25, 0x00	; 0
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	b9 f3       	breq	.-18     	; 0x140a <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x48>
  return;
}
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <set_volume>:

void set_volume(int a, int *volume) {
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	62 97       	sbiw	r28, 0x12	; 18
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	9e 83       	std	Y+6, r25	; 0x06
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	78 87       	std	Y+8, r23	; 0x08
    1440:	6f 83       	std	Y+7, r22	; 0x07
  *volume = *volume + a;
    1442:	ef 81       	ldd	r30, Y+7	; 0x07
    1444:	f8 85       	ldd	r31, Y+8	; 0x08
    1446:	20 81       	ld	r18, Z
    1448:	31 81       	ldd	r19, Z+1	; 0x01
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	82 0f       	add	r24, r18
    1450:	93 1f       	adc	r25, r19
    1452:	ef 81       	ldd	r30, Y+7	; 0x07
    1454:	f8 85       	ldd	r31, Y+8	; 0x08
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	80 83       	st	Z, r24
  if (*volume >= 100) *volume = 100;
    145a:	ef 81       	ldd	r30, Y+7	; 0x07
    145c:	f8 85       	ldd	r31, Y+8	; 0x08
    145e:	80 81       	ld	r24, Z
    1460:	91 81       	ldd	r25, Z+1	; 0x01
    1462:	84 36       	cpi	r24, 0x64	; 100
    1464:	91 05       	cpc	r25, r1
    1466:	3c f0       	brlt	.+14     	; 0x1476 <set_volume+0x54>
    1468:	ef 81       	ldd	r30, Y+7	; 0x07
    146a:	f8 85       	ldd	r31, Y+8	; 0x08
    146c:	84 e6       	ldi	r24, 0x64	; 100
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	91 83       	std	Z+1, r25	; 0x01
    1472:	80 83       	st	Z, r24
    1474:	0b c0       	rjmp	.+22     	; 0x148c <set_volume+0x6a>
  else if (*volume <= 0) *volume = 0;
    1476:	ef 81       	ldd	r30, Y+7	; 0x07
    1478:	f8 85       	ldd	r31, Y+8	; 0x08
    147a:	80 81       	ld	r24, Z
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	18 16       	cp	r1, r24
    1480:	19 06       	cpc	r1, r25
    1482:	24 f0       	brlt	.+8      	; 0x148c <set_volume+0x6a>
    1484:	ef 81       	ldd	r30, Y+7	; 0x07
    1486:	f8 85       	ldd	r31, Y+8	; 0x08
    1488:	11 82       	std	Z+1, r1	; 0x01
    148a:	10 82       	st	Z, r1
  BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    148c:	86 e1       	ldi	r24, 0x16	; 22
    148e:	94 e0       	ldi	r25, 0x04	; 4
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
  LCD_D_NUMBER(*volume,3,0)	
    1498:	ef 81       	ldd	r30, Y+7	; 0x07
    149a:	f8 85       	ldd	r31, Y+8	; 0x08
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	aa 27       	eor	r26, r26
    14a2:	97 fd       	sbrc	r25, 7
    14a4:	a0 95       	com	r26
    14a6:	ba 2f       	mov	r27, r26
    14a8:	bc 01       	movw	r22, r24
    14aa:	cd 01       	movw	r24, r26
    14ac:	0e 94 12 12 	call	0x2424	; 0x2424 <__floatsisf>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	e8 e3       	ldi	r30, 0x38	; 56
    14b6:	f3 e0       	ldi	r31, 0x03	; 3
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	43 e0       	ldi	r20, 0x03	; 3
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	8f 01       	movw	r16, r30
    14c2:	0e 94 94 13 	call	0x2728	; 0x2728 <dtostrf>
    14c6:	88 e3       	ldi	r24, 0x38	; 56
    14c8:	93 e0       	ldi	r25, 0x03	; 3
    14ca:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
  int j = 0;
    14ce:	1c 82       	std	Y+4, r1	; 0x04
    14d0:	1b 82       	std	Y+3, r1	; 0x03
    14d2:	61 c0       	rjmp	.+194    	; 0x1596 <set_volume+0x174>
  while (!(PINE & (1 << 2)) | !(PINE & (1 << 3)) | (*volume >= 100) | (*volume <= 0)) {
  	for (int i = 0; i<700; i++) ;
    14d4:	1a 82       	std	Y+2, r1	; 0x02
    14d6:	19 82       	std	Y+1, r1	; 0x01
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <set_volume+0xc2>
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	9a 83       	std	Y+2, r25	; 0x02
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	9a 81       	ldd	r25, Y+2	; 0x02
    14e8:	22 e0       	ldi	r18, 0x02	; 2
    14ea:	8c 3b       	cpi	r24, 0xBC	; 188
    14ec:	92 07       	cpc	r25, r18
    14ee:	ac f3       	brlt	.-22     	; 0x14da <set_volume+0xb8>
	j = j + 1;
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	9c 83       	std	Y+4, r25	; 0x04
    14f8:	8b 83       	std	Y+3, r24	; 0x03
	if (j > 23) {
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	88 31       	cpi	r24, 0x18	; 24
    1500:	91 05       	cpc	r25, r1
    1502:	0c f4       	brge	.+2      	; 0x1506 <set_volume+0xe4>
    1504:	48 c0       	rjmp	.+144    	; 0x1596 <set_volume+0x174>
		*volume = *volume + a;
    1506:	ef 81       	ldd	r30, Y+7	; 0x07
    1508:	f8 85       	ldd	r31, Y+8	; 0x08
    150a:	20 81       	ld	r18, Z
    150c:	31 81       	ldd	r19, Z+1	; 0x01
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	9e 81       	ldd	r25, Y+6	; 0x06
    1512:	82 0f       	add	r24, r18
    1514:	93 1f       	adc	r25, r19
    1516:	ef 81       	ldd	r30, Y+7	; 0x07
    1518:	f8 85       	ldd	r31, Y+8	; 0x08
    151a:	91 83       	std	Z+1, r25	; 0x01
    151c:	80 83       	st	Z, r24
		if (*volume >= 100) *volume = 100;
    151e:	ef 81       	ldd	r30, Y+7	; 0x07
    1520:	f8 85       	ldd	r31, Y+8	; 0x08
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	84 36       	cpi	r24, 0x64	; 100
    1528:	91 05       	cpc	r25, r1
    152a:	3c f0       	brlt	.+14     	; 0x153a <set_volume+0x118>
    152c:	ef 81       	ldd	r30, Y+7	; 0x07
    152e:	f8 85       	ldd	r31, Y+8	; 0x08
    1530:	84 e6       	ldi	r24, 0x64	; 100
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	80 83       	st	Z, r24
    1538:	0b c0       	rjmp	.+22     	; 0x1550 <set_volume+0x12e>
		else if (*volume <= 0) *volume = 0;
    153a:	ef 81       	ldd	r30, Y+7	; 0x07
    153c:	f8 85       	ldd	r31, Y+8	; 0x08
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	18 16       	cp	r1, r24
    1544:	19 06       	cpc	r1, r25
    1546:	24 f0       	brlt	.+8      	; 0x1550 <set_volume+0x12e>
    1548:	ef 81       	ldd	r30, Y+7	; 0x07
    154a:	f8 85       	ldd	r31, Y+8	; 0x08
    154c:	11 82       	std	Z+1, r1	; 0x01
    154e:	10 82       	st	Z, r1
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1550:	86 e1       	ldi	r24, 0x16	; 22
    1552:	94 e0       	ldi	r25, 0x04	; 4
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_D_NUMBER(*volume,3,0)
    155c:	ef 81       	ldd	r30, Y+7	; 0x07
    155e:	f8 85       	ldd	r31, Y+8	; 0x08
    1560:	80 81       	ld	r24, Z
    1562:	91 81       	ldd	r25, Z+1	; 0x01
    1564:	aa 27       	eor	r26, r26
    1566:	97 fd       	sbrc	r25, 7
    1568:	a0 95       	com	r26
    156a:	ba 2f       	mov	r27, r26
    156c:	bc 01       	movw	r22, r24
    156e:	cd 01       	movw	r24, r26
    1570:	0e 94 12 12 	call	0x2424	; 0x2424 <__floatsisf>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	e8 e3       	ldi	r30, 0x38	; 56
    157a:	f3 e0       	ldi	r31, 0x03	; 3
    157c:	bc 01       	movw	r22, r24
    157e:	cd 01       	movw	r24, r26
    1580:	43 e0       	ldi	r20, 0x03	; 3
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	8f 01       	movw	r16, r30
    1586:	0e 94 94 13 	call	0x2728	; 0x2728 <dtostrf>
    158a:	88 e3       	ldi	r24, 0x38	; 56
    158c:	93 e0       	ldi	r25, 0x03	; 3
    158e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		j = 0;
    1592:	1c 82       	std	Y+4, r1	; 0x04
    1594:	1b 82       	std	Y+3, r1	; 0x03
  if (*volume >= 100) *volume = 100;
  else if (*volume <= 0) *volume = 0;
  BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
  LCD_D_NUMBER(*volume,3,0)	
  int j = 0;
  while (!(PINE & (1 << 2)) | !(PINE & (1 << 3)) | (*volume >= 100) | (*volume <= 0)) {
    1596:	ec e2       	ldi	r30, 0x2C	; 44
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	84 70       	andi	r24, 0x04	; 4
    15a2:	90 70       	andi	r25, 0x00	; 0
    15a4:	1a 8a       	std	Y+18, r1	; 0x12
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	11 f4       	brne	.+4      	; 0x15ae <set_volume+0x18c>
    15aa:	31 e0       	ldi	r19, 0x01	; 1
    15ac:	3a 8b       	std	Y+18, r19	; 0x12
    15ae:	ec e2       	ldi	r30, 0x2C	; 44
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	88 70       	andi	r24, 0x08	; 8
    15ba:	90 70       	andi	r25, 0x00	; 0
    15bc:	19 8a       	std	Y+17, r1	; 0x11
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	11 f4       	brne	.+4      	; 0x15c6 <set_volume+0x1a4>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	89 8b       	std	Y+17, r24	; 0x11
    15c6:	8a 89       	ldd	r24, Y+18	; 0x12
    15c8:	99 89       	ldd	r25, Y+17	; 0x11
    15ca:	89 2b       	or	r24, r25
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	38 8b       	std	Y+16, r19	; 0x10
    15d2:	2f 87       	std	Y+15, r18	; 0x0f
    15d4:	ef 81       	ldd	r30, Y+7	; 0x07
    15d6:	f8 85       	ldd	r31, Y+8	; 0x08
    15d8:	80 81       	ld	r24, Z
    15da:	91 81       	ldd	r25, Z+1	; 0x01
    15dc:	1e 86       	std	Y+14, r1	; 0x0e
    15de:	1d 86       	std	Y+13, r1	; 0x0d
    15e0:	84 36       	cpi	r24, 0x64	; 100
    15e2:	91 05       	cpc	r25, r1
    15e4:	24 f0       	brlt	.+8      	; 0x15ee <set_volume+0x1cc>
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9e 87       	std	Y+14, r25	; 0x0e
    15ec:	8d 87       	std	Y+13, r24	; 0x0d
    15ee:	2f 85       	ldd	r18, Y+15	; 0x0f
    15f0:	38 89       	ldd	r19, Y+16	; 0x10
    15f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f6:	28 2b       	or	r18, r24
    15f8:	39 2b       	or	r19, r25
    15fa:	3c 87       	std	Y+12, r19	; 0x0c
    15fc:	2b 87       	std	Y+11, r18	; 0x0b
    15fe:	ef 81       	ldd	r30, Y+7	; 0x07
    1600:	f8 85       	ldd	r31, Y+8	; 0x08
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	1a 86       	std	Y+10, r1	; 0x0a
    1608:	19 86       	std	Y+9, r1	; 0x09
    160a:	18 16       	cp	r1, r24
    160c:	19 06       	cpc	r1, r25
    160e:	24 f0       	brlt	.+8      	; 0x1618 <set_volume+0x1f6>
    1610:	21 e0       	ldi	r18, 0x01	; 1
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	3a 87       	std	Y+10, r19	; 0x0a
    1616:	29 87       	std	Y+9, r18	; 0x09
    1618:	8b 85       	ldd	r24, Y+11	; 0x0b
    161a:	9c 85       	ldd	r25, Y+12	; 0x0c
    161c:	29 85       	ldd	r18, Y+9	; 0x09
    161e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1620:	82 2b       	or	r24, r18
    1622:	93 2b       	or	r25, r19
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	09 f0       	breq	.+2      	; 0x162a <set_volume+0x208>
    1628:	55 cf       	rjmp	.-342    	; 0x14d4 <set_volume+0xb2>
		LCD_D_NUMBER(*volume,3,0)
		j = 0;
	}	
  }
  return;
}
    162a:	62 96       	adiw	r28, 0x12	; 18
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	08 95       	ret

00001640 <main>:

PROGRAM_INIT
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	2b 97       	sbiw	r28, 0x0b	; 11
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	0e 94 34 01 	call	0x268	; 0x268 <InitBoard>
	ACTIVATE_LCD // initialize the LCD. The output begins at the first position of the display.
    165c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_Init>
	CLEAR_LCD // Clears the LCD screen.
    1660:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_Clear>
				  display_set_timer1_countdown, state_set_timer1_countdown,
				  display_set_timer2_countdown, state_set_timer2_countdown,
				  display_timer1_input, state_timer1_input,
				  display_timer2_input, state_timer2_input
				};
	enum states c = display_time;
    1664:	1b 82       	std	Y+3, r1	; 0x03
	int volume = 50;
    1666:	82 e3       	ldi	r24, 0x32	; 50
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9d 83       	std	Y+5, r25	; 0x05
    166c:	8c 83       	std	Y+4, r24	; 0x04
	int *v;
	v = &volume;
    166e:	ce 01       	movw	r24, r28
    1670:	04 96       	adiw	r24, 0x04	; 4
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
	BEEP_VOLUME(volume)
    1676:	e9 e8       	ldi	r30, 0x89	; 137
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	10 82       	st	Z, r1
    167c:	e8 e8       	ldi	r30, 0x88	; 136
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	9d 81       	ldd	r25, Y+5	; 0x05
    1684:	80 83       	st	Z, r24

PROGRAM_START

	switch (c)
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	3b 87       	std	Y+11, r19	; 0x0b
    168e:	2a 87       	std	Y+10, r18	; 0x0a
    1690:	8a 85       	ldd	r24, Y+10	; 0x0a
    1692:	9b 85       	ldd	r25, Y+11	; 0x0b
    1694:	8a 31       	cpi	r24, 0x1A	; 26
    1696:	91 05       	cpc	r25, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <main+0x5c>
    169a:	39 c3       	rjmp	.+1650   	; 0x1d0e <main+0x6ce>
    169c:	2a 85       	ldd	r18, Y+10	; 0x0a
    169e:	3b 85       	ldd	r19, Y+11	; 0x0b
    16a0:	2b 31       	cpi	r18, 0x1B	; 27
    16a2:	31 05       	cpc	r19, r1
    16a4:	0c f0       	brlt	.+2      	; 0x16a8 <main+0x68>
    16a6:	b5 c0       	rjmp	.+362    	; 0x1812 <main+0x1d2>
    16a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    16aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    16ac:	8d 30       	cpi	r24, 0x0D	; 13
    16ae:	91 05       	cpc	r25, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <main+0x74>
    16b2:	7a c2       	rjmp	.+1268   	; 0x1ba8 <main+0x568>
    16b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    16b6:	3b 85       	ldd	r19, Y+11	; 0x0b
    16b8:	2e 30       	cpi	r18, 0x0E	; 14
    16ba:	31 05       	cpc	r19, r1
    16bc:	0c f0       	brlt	.+2      	; 0x16c0 <main+0x80>
    16be:	54 c0       	rjmp	.+168    	; 0x1768 <main+0x128>
    16c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c4:	85 30       	cpi	r24, 0x05	; 5
    16c6:	91 05       	cpc	r25, r1
    16c8:	09 f4       	brne	.+2      	; 0x16cc <main+0x8c>
    16ca:	d1 c1       	rjmp	.+930    	; 0x1a6e <main+0x42e>
    16cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    16ce:	3b 85       	ldd	r19, Y+11	; 0x0b
    16d0:	26 30       	cpi	r18, 0x06	; 6
    16d2:	31 05       	cpc	r19, r1
    16d4:	24 f5       	brge	.+72     	; 0x171e <main+0xde>
    16d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    16d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    16da:	82 30       	cpi	r24, 0x02	; 2
    16dc:	91 05       	cpc	r25, r1
    16de:	09 f4       	brne	.+2      	; 0x16e2 <main+0xa2>
    16e0:	80 c1       	rjmp	.+768    	; 0x19e2 <main+0x3a2>
    16e2:	2a 85       	ldd	r18, Y+10	; 0x0a
    16e4:	3b 85       	ldd	r19, Y+11	; 0x0b
    16e6:	23 30       	cpi	r18, 0x03	; 3
    16e8:	31 05       	cpc	r19, r1
    16ea:	64 f4       	brge	.+24     	; 0x1704 <main+0xc4>
    16ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <main+0xb6>
    16f4:	44 c1       	rjmp	.+648    	; 0x197e <main+0x33e>
    16f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    16f8:	3b 85       	ldd	r19, Y+11	; 0x0b
    16fa:	21 30       	cpi	r18, 0x01	; 1
    16fc:	31 05       	cpc	r19, r1
    16fe:	09 f4       	brne	.+2      	; 0x1702 <main+0xc2>
    1700:	4d c1       	rjmp	.+666    	; 0x199c <main+0x35c>
    1702:	8e c6       	rjmp	.+3356   	; 0x2420 <main+0xde0>
    1704:	8a 85       	ldd	r24, Y+10	; 0x0a
    1706:	9b 85       	ldd	r25, Y+11	; 0x0b
    1708:	83 30       	cpi	r24, 0x03	; 3
    170a:	91 05       	cpc	r25, r1
    170c:	09 f4       	brne	.+2      	; 0x1710 <main+0xd0>
    170e:	78 c1       	rjmp	.+752    	; 0x1a00 <main+0x3c0>
    1710:	2a 85       	ldd	r18, Y+10	; 0x0a
    1712:	3b 85       	ldd	r19, Y+11	; 0x0b
    1714:	24 30       	cpi	r18, 0x04	; 4
    1716:	31 05       	cpc	r19, r1
    1718:	09 f4       	brne	.+2      	; 0x171c <main+0xdc>
    171a:	9a c1       	rjmp	.+820    	; 0x1a50 <main+0x410>
    171c:	81 c6       	rjmp	.+3330   	; 0x2420 <main+0xde0>
    171e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1720:	9b 85       	ldd	r25, Y+11	; 0x0b
    1722:	88 30       	cpi	r24, 0x08	; 8
    1724:	91 05       	cpc	r25, r1
    1726:	09 f4       	brne	.+2      	; 0x172a <main+0xea>
    1728:	ca c1       	rjmp	.+916    	; 0x1abe <main+0x47e>
    172a:	2a 85       	ldd	r18, Y+10	; 0x0a
    172c:	3b 85       	ldd	r19, Y+11	; 0x0b
    172e:	29 30       	cpi	r18, 0x09	; 9
    1730:	31 05       	cpc	r19, r1
    1732:	6c f4       	brge	.+26     	; 0x174e <main+0x10e>
    1734:	8a 85       	ldd	r24, Y+10	; 0x0a
    1736:	9b 85       	ldd	r25, Y+11	; 0x0b
    1738:	86 30       	cpi	r24, 0x06	; 6
    173a:	91 05       	cpc	r25, r1
    173c:	09 f4       	brne	.+2      	; 0x1740 <main+0x100>
    173e:	cd c1       	rjmp	.+922    	; 0x1ada <main+0x49a>
    1740:	2a 85       	ldd	r18, Y+10	; 0x0a
    1742:	3b 85       	ldd	r19, Y+11	; 0x0b
    1744:	27 30       	cpi	r18, 0x07	; 7
    1746:	31 05       	cpc	r19, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <main+0x10c>
    174a:	d6 c1       	rjmp	.+940    	; 0x1af8 <main+0x4b8>
    174c:	69 c6       	rjmp	.+3282   	; 0x2420 <main+0xde0>
    174e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1750:	9b 85       	ldd	r25, Y+11	; 0x0b
    1752:	89 30       	cpi	r24, 0x09	; 9
    1754:	91 05       	cpc	r25, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <main+0x11a>
    1758:	b6 c1       	rjmp	.+876    	; 0x1ac6 <main+0x486>
    175a:	2a 85       	ldd	r18, Y+10	; 0x0a
    175c:	3b 85       	ldd	r19, Y+11	; 0x0b
    175e:	2a 30       	cpi	r18, 0x0A	; 10
    1760:	31 05       	cpc	r19, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <main+0x126>
    1764:	b5 c1       	rjmp	.+874    	; 0x1ad0 <main+0x490>
    1766:	5c c6       	rjmp	.+3256   	; 0x2420 <main+0xde0>
    1768:	8a 85       	ldd	r24, Y+10	; 0x0a
    176a:	9b 85       	ldd	r25, Y+11	; 0x0b
    176c:	83 31       	cpi	r24, 0x13	; 19
    176e:	91 05       	cpc	r25, r1
    1770:	09 f4       	brne	.+2      	; 0x1774 <main+0x134>
    1772:	5b c2       	rjmp	.+1206   	; 0x1c2a <main+0x5ea>
    1774:	2a 85       	ldd	r18, Y+10	; 0x0a
    1776:	3b 85       	ldd	r19, Y+11	; 0x0b
    1778:	24 31       	cpi	r18, 0x14	; 20
    177a:	31 05       	cpc	r19, r1
    177c:	2c f5       	brge	.+74     	; 0x17c8 <main+0x188>
    177e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1780:	9b 85       	ldd	r25, Y+11	; 0x0b
    1782:	80 31       	cpi	r24, 0x10	; 16
    1784:	91 05       	cpc	r25, r1
    1786:	09 f4       	brne	.+2      	; 0x178a <main+0x14a>
    1788:	34 c3       	rjmp	.+1640   	; 0x1df2 <main+0x7b2>
    178a:	2a 85       	ldd	r18, Y+10	; 0x0a
    178c:	3b 85       	ldd	r19, Y+11	; 0x0b
    178e:	21 31       	cpi	r18, 0x11	; 17
    1790:	31 05       	cpc	r19, r1
    1792:	6c f4       	brge	.+26     	; 0x17ae <main+0x16e>
    1794:	8a 85       	ldd	r24, Y+10	; 0x0a
    1796:	9b 85       	ldd	r25, Y+11	; 0x0b
    1798:	8e 30       	cpi	r24, 0x0E	; 14
    179a:	91 05       	cpc	r25, r1
    179c:	09 f4       	brne	.+2      	; 0x17a0 <main+0x160>
    179e:	13 c2       	rjmp	.+1062   	; 0x1bc6 <main+0x586>
    17a0:	2a 85       	ldd	r18, Y+10	; 0x0a
    17a2:	3b 85       	ldd	r19, Y+11	; 0x0b
    17a4:	2f 30       	cpi	r18, 0x0F	; 15
    17a6:	31 05       	cpc	r19, r1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <main+0x16c>
    17aa:	14 c3       	rjmp	.+1576   	; 0x1dd4 <main+0x794>
    17ac:	39 c6       	rjmp	.+3186   	; 0x2420 <main+0xde0>
    17ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    17b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    17b2:	81 31       	cpi	r24, 0x11	; 17
    17b4:	91 05       	cpc	r25, r1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <main+0x17a>
    17b8:	51 c3       	rjmp	.+1698   	; 0x1e5c <main+0x81c>
    17ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    17bc:	3b 85       	ldd	r19, Y+11	; 0x0b
    17be:	22 31       	cpi	r18, 0x12	; 18
    17c0:	31 05       	cpc	r19, r1
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <main+0x186>
    17c4:	5a c3       	rjmp	.+1716   	; 0x1e7a <main+0x83a>
    17c6:	2c c6       	rjmp	.+3160   	; 0x2420 <main+0xde0>
    17c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    17cc:	86 31       	cpi	r24, 0x16	; 22
    17ce:	91 05       	cpc	r25, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <main+0x194>
    17d2:	cb c1       	rjmp	.+918    	; 0x1b6a <main+0x52a>
    17d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    17d6:	3b 85       	ldd	r19, Y+11	; 0x0b
    17d8:	27 31       	cpi	r18, 0x17	; 23
    17da:	31 05       	cpc	r19, r1
    17dc:	6c f4       	brge	.+26     	; 0x17f8 <main+0x1b8>
    17de:	8a 85       	ldd	r24, Y+10	; 0x0a
    17e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    17e2:	84 31       	cpi	r24, 0x14	; 20
    17e4:	91 05       	cpc	r25, r1
    17e6:	09 f4       	brne	.+2      	; 0x17ea <main+0x1aa>
    17e8:	2f c2       	rjmp	.+1118   	; 0x1c48 <main+0x608>
    17ea:	2a 85       	ldd	r18, Y+10	; 0x0a
    17ec:	3b 85       	ldd	r19, Y+11	; 0x0b
    17ee:	25 31       	cpi	r18, 0x15	; 21
    17f0:	31 05       	cpc	r19, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <main+0x1b6>
    17f4:	ab c1       	rjmp	.+854    	; 0x1b4c <main+0x50c>
    17f6:	14 c6       	rjmp	.+3112   	; 0x2420 <main+0xde0>
    17f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    17fc:	87 31       	cpi	r24, 0x17	; 23
    17fe:	91 05       	cpc	r25, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <main+0x1c4>
    1802:	57 c2       	rjmp	.+1198   	; 0x1cb2 <main+0x672>
    1804:	2a 85       	ldd	r18, Y+10	; 0x0a
    1806:	3b 85       	ldd	r19, Y+11	; 0x0b
    1808:	28 31       	cpi	r18, 0x18	; 24
    180a:	31 05       	cpc	r19, r1
    180c:	09 f4       	brne	.+2      	; 0x1810 <main+0x1d0>
    180e:	60 c2       	rjmp	.+1216   	; 0x1cd0 <main+0x690>
    1810:	07 c6       	rjmp	.+3086   	; 0x2420 <main+0xde0>
    1812:	8a 85       	ldd	r24, Y+10	; 0x0a
    1814:	9b 85       	ldd	r25, Y+11	; 0x0b
    1816:	86 32       	cpi	r24, 0x26	; 38
    1818:	91 05       	cpc	r25, r1
    181a:	09 f4       	brne	.+2      	; 0x181e <main+0x1de>
    181c:	89 c4       	rjmp	.+2322   	; 0x2130 <main+0xaf0>
    181e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1820:	3b 85       	ldd	r19, Y+11	; 0x0b
    1822:	27 32       	cpi	r18, 0x27	; 39
    1824:	31 05       	cpc	r19, r1
    1826:	0c f0       	brlt	.+2      	; 0x182a <main+0x1ea>
    1828:	55 c0       	rjmp	.+170    	; 0x18d4 <main+0x294>
    182a:	8a 85       	ldd	r24, Y+10	; 0x0a
    182c:	9b 85       	ldd	r25, Y+11	; 0x0b
    182e:	80 32       	cpi	r24, 0x20	; 32
    1830:	91 05       	cpc	r25, r1
    1832:	09 f4       	brne	.+2      	; 0x1836 <main+0x1f6>
    1834:	9b c3       	rjmp	.+1846   	; 0x1f6c <main+0x92c>
    1836:	2a 85       	ldd	r18, Y+10	; 0x0a
    1838:	3b 85       	ldd	r19, Y+11	; 0x0b
    183a:	21 32       	cpi	r18, 0x21	; 33
    183c:	31 05       	cpc	r19, r1
    183e:	2c f5       	brge	.+74     	; 0x188a <main+0x24a>
    1840:	8a 85       	ldd	r24, Y+10	; 0x0a
    1842:	9b 85       	ldd	r25, Y+11	; 0x0b
    1844:	8d 31       	cpi	r24, 0x1D	; 29
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <main+0x20c>
    184a:	5b c3       	rjmp	.+1718   	; 0x1f02 <main+0x8c2>
    184c:	2a 85       	ldd	r18, Y+10	; 0x0a
    184e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1850:	2e 31       	cpi	r18, 0x1E	; 30
    1852:	31 05       	cpc	r19, r1
    1854:	6c f4       	brge	.+26     	; 0x1870 <main+0x230>
    1856:	8a 85       	ldd	r24, Y+10	; 0x0a
    1858:	9b 85       	ldd	r25, Y+11	; 0x0b
    185a:	8b 31       	cpi	r24, 0x1B	; 27
    185c:	91 05       	cpc	r25, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <main+0x222>
    1860:	7a c2       	rjmp	.+1268   	; 0x1d56 <main+0x716>
    1862:	2a 85       	ldd	r18, Y+10	; 0x0a
    1864:	3b 85       	ldd	r19, Y+11	; 0x0b
    1866:	2c 31       	cpi	r18, 0x1C	; 28
    1868:	31 05       	cpc	r19, r1
    186a:	09 f4       	brne	.+2      	; 0x186e <main+0x22e>
    186c:	3b c3       	rjmp	.+1654   	; 0x1ee4 <main+0x8a4>
    186e:	d8 c5       	rjmp	.+2992   	; 0x2420 <main+0xde0>
    1870:	8a 85       	ldd	r24, Y+10	; 0x0a
    1872:	9b 85       	ldd	r25, Y+11	; 0x0b
    1874:	8e 31       	cpi	r24, 0x1E	; 30
    1876:	91 05       	cpc	r25, r1
    1878:	09 f4       	brne	.+2      	; 0x187c <main+0x23c>
    187a:	11 c4       	rjmp	.+2082   	; 0x209e <main+0xa5e>
    187c:	2a 85       	ldd	r18, Y+10	; 0x0a
    187e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1880:	2f 31       	cpi	r18, 0x1F	; 31
    1882:	31 05       	cpc	r19, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <main+0x248>
    1886:	1a c4       	rjmp	.+2100   	; 0x20bc <main+0xa7c>
    1888:	cb c5       	rjmp	.+2966   	; 0x2420 <main+0xde0>
    188a:	8a 85       	ldd	r24, Y+10	; 0x0a
    188c:	9b 85       	ldd	r25, Y+11	; 0x0b
    188e:	83 32       	cpi	r24, 0x23	; 35
    1890:	91 05       	cpc	r25, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <main+0x256>
    1894:	ba c3       	rjmp	.+1908   	; 0x200a <main+0x9ca>
    1896:	2a 85       	ldd	r18, Y+10	; 0x0a
    1898:	3b 85       	ldd	r19, Y+11	; 0x0b
    189a:	24 32       	cpi	r18, 0x24	; 36
    189c:	31 05       	cpc	r19, r1
    189e:	6c f4       	brge	.+26     	; 0x18ba <main+0x27a>
    18a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    18a4:	81 32       	cpi	r24, 0x21	; 33
    18a6:	91 05       	cpc	r25, r1
    18a8:	09 f4       	brne	.+2      	; 0x18ac <main+0x26c>
    18aa:	65 c3       	rjmp	.+1738   	; 0x1f76 <main+0x936>
    18ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    18ae:	3b 85       	ldd	r19, Y+11	; 0x0b
    18b0:	22 32       	cpi	r18, 0x22	; 34
    18b2:	31 05       	cpc	r19, r1
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <main+0x278>
    18b6:	6e c3       	rjmp	.+1756   	; 0x1f94 <main+0x954>
    18b8:	b3 c5       	rjmp	.+2918   	; 0x2420 <main+0xde0>
    18ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    18bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    18be:	84 32       	cpi	r24, 0x24	; 36
    18c0:	91 05       	cpc	r25, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <main+0x286>
    18c4:	b1 c3       	rjmp	.+1890   	; 0x2028 <main+0x9e8>
    18c6:	2a 85       	ldd	r18, Y+10	; 0x0a
    18c8:	3b 85       	ldd	r19, Y+11	; 0x0b
    18ca:	25 32       	cpi	r18, 0x25	; 37
    18cc:	31 05       	cpc	r19, r1
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <main+0x292>
    18d0:	2a c4       	rjmp	.+2132   	; 0x2126 <main+0xae6>
    18d2:	a6 c5       	rjmp	.+2892   	; 0x2420 <main+0xde0>
    18d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18d8:	8c 32       	cpi	r24, 0x2C	; 44
    18da:	91 05       	cpc	r25, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <main+0x2a0>
    18de:	2e c5       	rjmp	.+2652   	; 0x233c <main+0xcfc>
    18e0:	2a 85       	ldd	r18, Y+10	; 0x0a
    18e2:	3b 85       	ldd	r19, Y+11	; 0x0b
    18e4:	2d 32       	cpi	r18, 0x2D	; 45
    18e6:	31 05       	cpc	r19, r1
    18e8:	2c f5       	brge	.+74     	; 0x1934 <main+0x2f4>
    18ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    18ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ee:	89 32       	cpi	r24, 0x29	; 41
    18f0:	91 05       	cpc	r25, r1
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <main+0x2b6>
    18f4:	76 c4       	rjmp	.+2284   	; 0x21e2 <main+0xba2>
    18f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    18f8:	3b 85       	ldd	r19, Y+11	; 0x0b
    18fa:	2a 32       	cpi	r18, 0x2A	; 42
    18fc:	31 05       	cpc	r19, r1
    18fe:	6c f4       	brge	.+26     	; 0x191a <main+0x2da>
    1900:	8a 85       	ldd	r24, Y+10	; 0x0a
    1902:	9b 85       	ldd	r25, Y+11	; 0x0b
    1904:	87 32       	cpi	r24, 0x27	; 39
    1906:	91 05       	cpc	r25, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <main+0x2cc>
    190a:	21 c4       	rjmp	.+2114   	; 0x214e <main+0xb0e>
    190c:	2a 85       	ldd	r18, Y+10	; 0x0a
    190e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1910:	28 32       	cpi	r18, 0x28	; 40
    1912:	31 05       	cpc	r19, r1
    1914:	09 f4       	brne	.+2      	; 0x1918 <main+0x2d8>
    1916:	56 c4       	rjmp	.+2220   	; 0x21c4 <main+0xb84>
    1918:	83 c5       	rjmp	.+2822   	; 0x2420 <main+0xde0>
    191a:	8a 85       	ldd	r24, Y+10	; 0x0a
    191c:	9b 85       	ldd	r25, Y+11	; 0x0b
    191e:	8a 32       	cpi	r24, 0x2A	; 42
    1920:	91 05       	cpc	r25, r1
    1922:	09 f4       	brne	.+2      	; 0x1926 <main+0x2e6>
    1924:	99 c4       	rjmp	.+2354   	; 0x2258 <main+0xc18>
    1926:	2a 85       	ldd	r18, Y+10	; 0x0a
    1928:	3b 85       	ldd	r19, Y+11	; 0x0b
    192a:	2b 32       	cpi	r18, 0x2B	; 43
    192c:	31 05       	cpc	r19, r1
    192e:	09 f4       	brne	.+2      	; 0x1932 <main+0x2f2>
    1930:	a2 c4       	rjmp	.+2372   	; 0x2276 <main+0xc36>
    1932:	76 c5       	rjmp	.+2796   	; 0x2420 <main+0xde0>
    1934:	8a 85       	ldd	r24, Y+10	; 0x0a
    1936:	9b 85       	ldd	r25, Y+11	; 0x0b
    1938:	8f 32       	cpi	r24, 0x2F	; 47
    193a:	91 05       	cpc	r25, r1
    193c:	09 f4       	brne	.+2      	; 0x1940 <main+0x300>
    193e:	df c4       	rjmp	.+2494   	; 0x22fe <main+0xcbe>
    1940:	2a 85       	ldd	r18, Y+10	; 0x0a
    1942:	3b 85       	ldd	r19, Y+11	; 0x0b
    1944:	20 33       	cpi	r18, 0x30	; 48
    1946:	31 05       	cpc	r19, r1
    1948:	6c f4       	brge	.+26     	; 0x1964 <main+0x324>
    194a:	8a 85       	ldd	r24, Y+10	; 0x0a
    194c:	9b 85       	ldd	r25, Y+11	; 0x0b
    194e:	8d 32       	cpi	r24, 0x2D	; 45
    1950:	91 05       	cpc	r25, r1
    1952:	09 f4       	brne	.+2      	; 0x1956 <main+0x316>
    1954:	02 c5       	rjmp	.+2564   	; 0x235a <main+0xd1a>
    1956:	2a 85       	ldd	r18, Y+10	; 0x0a
    1958:	3b 85       	ldd	r19, Y+11	; 0x0b
    195a:	2e 32       	cpi	r18, 0x2E	; 46
    195c:	31 05       	cpc	r19, r1
    195e:	09 f4       	brne	.+2      	; 0x1962 <main+0x322>
    1960:	bf c4       	rjmp	.+2430   	; 0x22e0 <main+0xca0>
    1962:	5e c5       	rjmp	.+2748   	; 0x2420 <main+0xde0>
    1964:	8a 85       	ldd	r24, Y+10	; 0x0a
    1966:	9b 85       	ldd	r25, Y+11	; 0x0b
    1968:	80 33       	cpi	r24, 0x30	; 48
    196a:	91 05       	cpc	r25, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <main+0x330>
    196e:	2a c5       	rjmp	.+2644   	; 0x23c4 <main+0xd84>
    1970:	2a 85       	ldd	r18, Y+10	; 0x0a
    1972:	3b 85       	ldd	r19, Y+11	; 0x0b
    1974:	21 33       	cpi	r18, 0x31	; 49
    1976:	31 05       	cpc	r19, r1
    1978:	09 f4       	brne	.+2      	; 0x197c <main+0x33c>
    197a:	33 c5       	rjmp	.+2662   	; 0x23e2 <main+0xda2>
    197c:	51 c5       	rjmp	.+2722   	; 0x2420 <main+0xde0>

	// DISPLAY TIME AND WAIT FOR EVENT
	case display_time:
	    //save actual_time
		#if DEBUG_MODE
			BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    197e:	86 e1       	ldi	r24, 0x16	; 22
    1980:	94 e0       	ldi	r25, 0x04	; 4
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		#endif
		 //if (sound_is_on) play_sound;
		#if DEBUG_MODE
			LCD_TEXT("DEBUG")
    198a:	8a e1       	ldi	r24, 0x1A	; 26
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		#else
			LCD_TEXT("  0000")
		#endif
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1992:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_time;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	8b 83       	std	Y+3, r24	; 0x03
    199a:	75 ce       	rjmp	.-790    	; 0x1686 <main+0x46>
		break;
	case state_time:
		ON_JOYSTICK_LEFT   c = display_dev1;
    199c:	ec e2       	ldi	r30, 0x2C	; 44
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	84 70       	andi	r24, 0x04	; 4
    19a8:	90 70       	andi	r25, 0x00	; 0
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	11 f4       	brne	.+4      	; 0x19b2 <main+0x372>
    19ae:	82 e0       	ldi	r24, 0x02	; 2
    19b0:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_dev2;
    19b2:	ec e2       	ldi	r30, 0x2C	; 44
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	88 70       	andi	r24, 0x08	; 8
    19be:	90 70       	andi	r25, 0x00	; 0
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	11 f4       	brne	.+4      	; 0x19c8 <main+0x388>
    19c4:	84 e0       	ldi	r24, 0x04	; 4
    19c6:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = state_time_center_pressed;
    19c8:	e3 e2       	ldi	r30, 0x23	; 35
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	80 71       	andi	r24, 0x10	; 16
    19d4:	90 70       	andi	r25, 0x00	; 0
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	09 f0       	breq	.+2      	; 0x19dc <main+0x39c>
    19da:	55 ce       	rjmp	.-854    	; 0x1686 <main+0x46>
    19dc:	88 e0       	ldi	r24, 0x08	; 8
    19de:	8b 83       	std	Y+3, r24	; 0x03
    19e0:	52 ce       	rjmp	.-860    	; 0x1686 <main+0x46>
		break;

    // DISPLAY DEVICE1 TIMER AND WAIT FOR EVENT
	case display_dev1:
		#if DEBUG_MODE
			BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    19e2:	86 e1       	ldi	r24, 0x16	; 22
    19e4:	94 e0       	ldi	r25, 0x04	; 4
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		#endif
		 //if (sound_is_on) play_sound;
		LCD_TEXT("1 0010")
    19ee:	80 e2       	ldi	r24, 0x20	; 32
    19f0:	91 e0       	ldi	r25, 0x01	; 1
    19f2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    19f6:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_dev1;
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	8b 83       	std	Y+3, r24	; 0x03
    19fe:	43 ce       	rjmp	.-890    	; 0x1686 <main+0x46>
		break;
	case state_dev1:
		ON_JOYSTICK_LEFT   c = display_dev2;
    1a00:	ec e2       	ldi	r30, 0x2C	; 44
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	88 2f       	mov	r24, r24
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	84 70       	andi	r24, 0x04	; 4
    1a0c:	90 70       	andi	r25, 0x00	; 0
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	11 f4       	brne	.+4      	; 0x1a16 <main+0x3d6>
    1a12:	84 e0       	ldi	r24, 0x04	; 4
    1a14:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_time;
    1a16:	ec e2       	ldi	r30, 0x2C	; 44
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	88 70       	andi	r24, 0x08	; 8
    1a22:	90 70       	andi	r25, 0x00	; 0
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <main+0x3ea>
    1a28:	1b 82       	std	Y+3, r1	; 0x03
		ON_JOYSTICK_UP     {} //function turning on device 1
    1a2a:	e3 e2       	ldi	r30, 0x23	; 35
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	30 81       	ld	r19, Z
		ON_JOYSTICK_DOWN   {} //function turning off device 1
    1a30:	e3 e2       	ldi	r30, 0x23	; 35
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
		ON_JOYSTICK_CENTER c = state_d1_center_pressed;
    1a36:	e3 e2       	ldi	r30, 0x23	; 35
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	80 71       	andi	r24, 0x10	; 16
    1a42:	90 70       	andi	r25, 0x00	; 0
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <main+0x40a>
    1a48:	1e ce       	rjmp	.-964    	; 0x1686 <main+0x46>
    1a4a:	89 e0       	ldi	r24, 0x09	; 9
    1a4c:	8b 83       	std	Y+3, r24	; 0x03
    1a4e:	1b ce       	rjmp	.-970    	; 0x1686 <main+0x46>
		//if (now - start_timer > 1min) c = display_dev1;
		break;

    // DISPLAY DEVICE2 TIMER AND WAIT FOR EVENT
	case display_dev2:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1a50:	86 e1       	ldi	r24, 0x16	; 22
    1a52:	94 e0       	ldi	r25, 0x04	; 4
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("2 0005")
    1a5c:	87 e2       	ldi	r24, 0x27	; 39
    1a5e:	91 e0       	ldi	r25, 0x01	; 1
    1a60:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1a64:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_dev2;		
    1a68:	85 e0       	ldi	r24, 0x05	; 5
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
    1a6c:	0c ce       	rjmp	.-1000   	; 0x1686 <main+0x46>
		break;
	case state_dev2:
		ON_JOYSTICK_LEFT   c = display_time;
    1a6e:	ec e2       	ldi	r30, 0x2C	; 44
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	84 70       	andi	r24, 0x04	; 4
    1a7a:	90 70       	andi	r25, 0x00	; 0
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <main+0x442>
    1a80:	1b 82       	std	Y+3, r1	; 0x03
		ON_JOYSTICK_RIGHT  c = display_dev1;
    1a82:	ec e2       	ldi	r30, 0x2C	; 44
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	88 70       	andi	r24, 0x08	; 8
    1a8e:	90 70       	andi	r25, 0x00	; 0
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	11 f4       	brne	.+4      	; 0x1a98 <main+0x458>
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_UP     {} //function turning on device 2
    1a98:	e3 e2       	ldi	r30, 0x23	; 35
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	90 81       	ld	r25, Z
		ON_JOYSTICK_DOWN   {} //function turning off device 2
    1a9e:	e3 e2       	ldi	r30, 0x23	; 35
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	20 81       	ld	r18, Z
		ON_JOYSTICK_CENTER c = state_d2_center_pressed;
    1aa4:	e3 e2       	ldi	r30, 0x23	; 35
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	88 2f       	mov	r24, r24
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	80 71       	andi	r24, 0x10	; 16
    1ab0:	90 70       	andi	r25, 0x00	; 0
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <main+0x478>
    1ab6:	e7 cd       	rjmp	.-1074   	; 0x1686 <main+0x46>
    1ab8:	8a e0       	ldi	r24, 0x0A	; 10
    1aba:	8b 83       	std	Y+3, r24	; 0x03
    1abc:	e4 cd       	rjmp	.-1080   	; 0x1686 <main+0x46>
		break;

	// WAIT 5sec to get to set_time
	case state_time_center_pressed:
		//t0 = now;
		c = display_time;
    1abe:	1b 82       	std	Y+3, r1	; 0x03
		#if DEBUG_MODE
			c = display_set_time;
    1ac0:	86 e0       	ldi	r24, 0x06	; 6
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
    1ac4:	e0 cd       	rjmp	.-1088   	; 0x1686 <main+0x46>
		#endif
		break;
	// WAIT 5sec to get to settings_timer1 else start_timer1
	case state_d1_center_pressed:
		//t0 = now;
		c = state_start_timer1;
    1ac6:	8b e0       	ldi	r24, 0x0B	; 11
    1ac8:	8b 83       	std	Y+3, r24	; 0x03
		#if DEBUG_MODE
			c = display_set_timer1;
    1aca:	8f e0       	ldi	r24, 0x0F	; 15
    1acc:	8b 83       	std	Y+3, r24	; 0x03
    1ace:	db cd       	rjmp	.-1098   	; 0x1686 <main+0x46>
		#endif
		break;
	// WAIT 5sec to get to settings_timer2 else start_timer2
	case state_d2_center_pressed:
		//t0 = now;
		c = state_start_timer2;
    1ad0:	8c e0       	ldi	r24, 0x0C	; 12
    1ad2:	8b 83       	std	Y+3, r24	; 0x03
		#if DEBUG_MODE
			c = display_set_timer2;
    1ad4:	81 e1       	ldi	r24, 0x11	; 17
    1ad6:	8b 83       	std	Y+3, r24	; 0x03
    1ad8:	d6 cd       	rjmp	.-1108   	; 0x1686 <main+0x46>
			//{ if (now - t0 >= 5sec) c = display_set_timer2; }		
		#endif		
		break;
	// DISPLAY SET TIME AND WAIT FOR EVENT
	case display_set_time:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1ada:	86 e1       	ldi	r24, 0x16	; 22
    1adc:	94 e0       	ldi	r25, 0x04	; 4
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("SET T")
    1ae6:	8e e2       	ldi	r24, 0x2E	; 46
    1ae8:	91 e0       	ldi	r25, 0x01	; 1
    1aea:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1aee:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_time;
    1af2:	87 e0       	ldi	r24, 0x07	; 7
    1af4:	8b 83       	std	Y+3, r24	; 0x03
    1af6:	c7 cd       	rjmp	.-1138   	; 0x1686 <main+0x46>
		break;
	case state_set_time:
		ON_JOYSTICK_LEFT   c = display_leave_menu;
    1af8:	ec e2       	ldi	r30, 0x2C	; 44
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	88 2f       	mov	r24, r24
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	84 70       	andi	r24, 0x04	; 4
    1b04:	90 70       	andi	r25, 0x00	; 0
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	11 f4       	brne	.+4      	; 0x1b0e <main+0x4ce>
    1b0a:	8d e0       	ldi	r24, 0x0D	; 13
    1b0c:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_set_sound;
    1b0e:	ec e2       	ldi	r30, 0x2C	; 44
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	88 70       	andi	r24, 0x08	; 8
    1b1a:	90 70       	andi	r25, 0x00	; 0
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	11 f4       	brne	.+4      	; 0x1b24 <main+0x4e4>
    1b20:	83 e1       	ldi	r24, 0x13	; 19
    1b22:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   c = display_set_time_input;
    1b24:	e3 e2       	ldi	r30, 0x23	; 35
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 23       	and	r24, r24
    1b2c:	14 f0       	brlt	.+4      	; 0x1b32 <main+0x4f2>
    1b2e:	85 e1       	ldi	r24, 0x15	; 21
    1b30:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = display_set_time_input;
    1b32:	e3 e2       	ldi	r30, 0x23	; 35
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	80 71       	andi	r24, 0x10	; 16
    1b3e:	90 70       	andi	r25, 0x00	; 0
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <main+0x506>
    1b44:	a0 cd       	rjmp	.-1216   	; 0x1686 <main+0x46>
    1b46:	85 e1       	ldi	r24, 0x15	; 21
    1b48:	8b 83       	std	Y+3, r24	; 0x03
    1b4a:	9d cd       	rjmp	.-1222   	; 0x1686 <main+0x46>
		break;
	case display_set_time_input:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1b4c:	86 e1       	ldi	r24, 0x16	; 22
    1b4e:	94 e0       	ldi	r25, 0x04	; 4
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("  8888")
    1b58:	84 e3       	ldi	r24, 0x34	; 52
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1b60:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_time_input;
    1b64:	86 e1       	ldi	r24, 0x16	; 22
    1b66:	8b 83       	std	Y+3, r24	; 0x03
    1b68:	8e cd       	rjmp	.-1252   	; 0x1686 <main+0x46>
		break;
	case state_set_time_input:
		//wait for input
		ON_JOYSTICK_UP     c = display_set_time;
    1b6a:	e3 e2       	ldi	r30, 0x23	; 35
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	80 74       	andi	r24, 0x40	; 64
    1b76:	90 70       	andi	r25, 0x00	; 0
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	11 f4       	brne	.+4      	; 0x1b80 <main+0x540>
    1b7c:	86 e0       	ldi	r24, 0x06	; 6
    1b7e:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   c = display_set_time;
    1b80:	e3 e2       	ldi	r30, 0x23	; 35
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	88 23       	and	r24, r24
    1b88:	14 f0       	brlt	.+4      	; 0x1b8e <main+0x54e>
    1b8a:	86 e0       	ldi	r24, 0x06	; 6
    1b8c:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = display_set_time;
    1b8e:	e3 e2       	ldi	r30, 0x23	; 35
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	80 71       	andi	r24, 0x10	; 16
    1b9a:	90 70       	andi	r25, 0x00	; 0
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <main+0x562>
    1ba0:	72 cd       	rjmp	.-1308   	; 0x1686 <main+0x46>
    1ba2:	86 e0       	ldi	r24, 0x06	; 6
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
    1ba6:	6f cd       	rjmp	.-1314   	; 0x1686 <main+0x46>
		break;

	// DISPLAY LEAVE MENU AND WAIT FOR EVENT
	case display_leave_menu:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1ba8:	86 e1       	ldi	r24, 0x16	; 22
    1baa:	94 e0       	ldi	r25, 0x04	; 4
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("BACK")
    1bb4:	8b e3       	ldi	r24, 0x3B	; 59
    1bb6:	91 e0       	ldi	r25, 0x01	; 1
    1bb8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1bbc:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_leave_menu;
    1bc0:	8e e0       	ldi	r24, 0x0E	; 14
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
    1bc4:	60 cd       	rjmp	.-1344   	; 0x1686 <main+0x46>
		break;
	case state_leave_menu:
		ON_JOYSTICK_LEFT   c = display_set_timer1;
    1bc6:	ec e2       	ldi	r30, 0x2C	; 44
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	88 2f       	mov	r24, r24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	84 70       	andi	r24, 0x04	; 4
    1bd2:	90 70       	andi	r25, 0x00	; 0
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	11 f4       	brne	.+4      	; 0x1bdc <main+0x59c>
    1bd8:	8f e0       	ldi	r24, 0x0F	; 15
    1bda:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_set_time;
    1bdc:	ec e2       	ldi	r30, 0x2C	; 44
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	88 70       	andi	r24, 0x08	; 8
    1be8:	90 70       	andi	r25, 0x00	; 0
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	11 f4       	brne	.+4      	; 0x1bf2 <main+0x5b2>
    1bee:	86 e0       	ldi	r24, 0x06	; 6
    1bf0:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_UP     c = display_time;
    1bf2:	e3 e2       	ldi	r30, 0x23	; 35
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	88 2f       	mov	r24, r24
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	80 74       	andi	r24, 0x40	; 64
    1bfe:	90 70       	andi	r25, 0x00	; 0
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <main+0x5c6>
    1c04:	1b 82       	std	Y+3, r1	; 0x03
		ON_JOYSTICK_DOWN   c = display_time;
    1c06:	e3 e2       	ldi	r30, 0x23	; 35
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	88 23       	and	r24, r24
    1c0e:	0c f0       	brlt	.+2      	; 0x1c12 <main+0x5d2>
    1c10:	1b 82       	std	Y+3, r1	; 0x03
		ON_JOYSTICK_CENTER c = display_time;
    1c12:	e3 e2       	ldi	r30, 0x23	; 35
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	80 71       	andi	r24, 0x10	; 16
    1c1e:	90 70       	andi	r25, 0x00	; 0
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <main+0x5e6>
    1c24:	30 cd       	rjmp	.-1440   	; 0x1686 <main+0x46>
    1c26:	1b 82       	std	Y+3, r1	; 0x03
    1c28:	2e cd       	rjmp	.-1444   	; 0x1686 <main+0x46>
		break;

	// DISPLAY SET SOUND AND WAIT FOR EVENT
	case display_set_sound:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1c2a:	86 e1       	ldi	r24, 0x16	; 22
    1c2c:	94 e0       	ldi	r25, 0x04	; 4
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("SOUND")
    1c36:	80 e4       	ldi	r24, 0x40	; 64
    1c38:	91 e0       	ldi	r25, 0x01	; 1
    1c3a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1c3e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_sound;
    1c42:	84 e1       	ldi	r24, 0x14	; 20
    1c44:	8b 83       	std	Y+3, r24	; 0x03
    1c46:	1f cd       	rjmp	.-1474   	; 0x1686 <main+0x46>
		break;
	case state_set_sound:
		ON_JOYSTICK_LEFT   c = display_set_time;
    1c48:	ec e2       	ldi	r30, 0x2C	; 44
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	88 2f       	mov	r24, r24
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	84 70       	andi	r24, 0x04	; 4
    1c54:	90 70       	andi	r25, 0x00	; 0
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	11 f4       	brne	.+4      	; 0x1c5e <main+0x61e>
    1c5a:	86 e0       	ldi	r24, 0x06	; 6
    1c5c:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_set_timer2;
    1c5e:	ec e2       	ldi	r30, 0x2C	; 44
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	88 70       	andi	r24, 0x08	; 8
    1c6a:	90 70       	andi	r25, 0x00	; 0
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	11 f4       	brne	.+4      	; 0x1c74 <main+0x634>
    1c70:	81 e1       	ldi	r24, 0x11	; 17
    1c72:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_UP     c = display_sound_volume;
    1c74:	e3 e2       	ldi	r30, 0x23	; 35
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	80 74       	andi	r24, 0x40	; 64
    1c80:	90 70       	andi	r25, 0x00	; 0
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	11 f4       	brne	.+4      	; 0x1c8a <main+0x64a>
    1c86:	87 e1       	ldi	r24, 0x17	; 23
    1c88:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   c = display_sound_volume;
    1c8a:	e3 e2       	ldi	r30, 0x23	; 35
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	88 23       	and	r24, r24
    1c92:	14 f0       	brlt	.+4      	; 0x1c98 <main+0x658>
    1c94:	87 e1       	ldi	r24, 0x17	; 23
    1c96:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = display_sound_volume;
    1c98:	e3 e2       	ldi	r30, 0x23	; 35
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	88 2f       	mov	r24, r24
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	80 71       	andi	r24, 0x10	; 16
    1ca4:	90 70       	andi	r25, 0x00	; 0
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <main+0x66c>
    1caa:	ed cc       	rjmp	.-1574   	; 0x1686 <main+0x46>
    1cac:	87 e1       	ldi	r24, 0x17	; 23
    1cae:	8b 83       	std	Y+3, r24	; 0x03
    1cb0:	ea cc       	rjmp	.-1580   	; 0x1686 <main+0x46>
		break;

	case display_sound_volume:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1cb2:	86 e1       	ldi	r24, 0x16	; 22
    1cb4:	94 e0       	ldi	r25, 0x04	; 4
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("VOLUME")
    1cbe:	86 e4       	ldi	r24, 0x46	; 70
    1cc0:	91 e0       	ldi	r25, 0x01	; 1
    1cc2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1cc6:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_sound_volume;
    1cca:	88 e1       	ldi	r24, 0x18	; 24
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
    1cce:	db cc       	rjmp	.-1610   	; 0x1686 <main+0x46>
		break;
	case state_sound_volume:
		ON_JOYSTICK_UP     c = display_set_sound;
    1cd0:	e3 e2       	ldi	r30, 0x23	; 35
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	80 74       	andi	r24, 0x40	; 64
    1cdc:	90 70       	andi	r25, 0x00	; 0
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <main+0x6a6>
    1ce2:	83 e1       	ldi	r24, 0x13	; 19
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   c = display_set_volume;
    1ce6:	e3 e2       	ldi	r30, 0x23	; 35
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	88 23       	and	r24, r24
    1cee:	14 f0       	brlt	.+4      	; 0x1cf4 <main+0x6b4>
    1cf0:	8a e1       	ldi	r24, 0x1A	; 26
    1cf2:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = display_set_volume;
    1cf4:	e3 e2       	ldi	r30, 0x23	; 35
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	88 2f       	mov	r24, r24
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	80 71       	andi	r24, 0x10	; 16
    1d00:	90 70       	andi	r25, 0x00	; 0
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <main+0x6c8>
    1d06:	bf cc       	rjmp	.-1666   	; 0x1686 <main+0x46>
    1d08:	8a e1       	ldi	r24, 0x1A	; 26
    1d0a:	8b 83       	std	Y+3, r24	; 0x03
    1d0c:	bc cc       	rjmp	.-1672   	; 0x1686 <main+0x46>
		break;
	case display_set_volume:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1d0e:	86 e1       	ldi	r24, 0x16	; 22
    1d10:	94 e0       	ldi	r25, 0x04	; 4
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_D_NUMBER(volume,3,0)
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	aa 27       	eor	r26, r26
    1d20:	97 fd       	sbrc	r25, 7
    1d22:	a0 95       	com	r26
    1d24:	ba 2f       	mov	r27, r26
    1d26:	bc 01       	movw	r22, r24
    1d28:	cd 01       	movw	r24, r26
    1d2a:	0e 94 12 12 	call	0x2424	; 0x2424 <__floatsisf>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	e8 e3       	ldi	r30, 0x38	; 56
    1d34:	f3 e0       	ldi	r31, 0x03	; 3
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	43 e0       	ldi	r20, 0x03	; 3
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	8f 01       	movw	r16, r30
    1d40:	0e 94 94 13 	call	0x2728	; 0x2728 <dtostrf>
    1d44:	88 e3       	ldi	r24, 0x38	; 56
    1d46:	93 e0       	ldi	r25, 0x03	; 3
    1d48:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1d4c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_volume;
    1d50:	8b e1       	ldi	r24, 0x1B	; 27
    1d52:	8b 83       	std	Y+3, r24	; 0x03
    1d54:	98 cc       	rjmp	.-1744   	; 0x1686 <main+0x46>
		break;
	case state_set_volume:
		//wait for input
		ON_JOYSTICK_UP     c = display_sound_volume;
    1d56:	e3 e2       	ldi	r30, 0x23	; 35
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	88 2f       	mov	r24, r24
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	80 74       	andi	r24, 0x40	; 64
    1d62:	90 70       	andi	r25, 0x00	; 0
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	11 f4       	brne	.+4      	; 0x1d6c <main+0x72c>
    1d68:	87 e1       	ldi	r24, 0x17	; 23
    1d6a:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   c = display_sound_volume;
    1d6c:	e3 e2       	ldi	r30, 0x23	; 35
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	88 23       	and	r24, r24
    1d74:	14 f0       	brlt	.+4      	; 0x1d7a <main+0x73a>
    1d76:	87 e1       	ldi	r24, 0x17	; 23
    1d78:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = display_sound_volume;
    1d7a:	e3 e2       	ldi	r30, 0x23	; 35
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	80 71       	andi	r24, 0x10	; 16
    1d86:	90 70       	andi	r25, 0x00	; 0
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	11 f4       	brne	.+4      	; 0x1d90 <main+0x750>
    1d8c:	87 e1       	ldi	r24, 0x17	; 23
    1d8e:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_LEFT   set_volume(-1, v);
    1d90:	ec e2       	ldi	r30, 0x2C	; 44
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	88 2f       	mov	r24, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	84 70       	andi	r24, 0x04	; 4
    1d9c:	90 70       	andi	r25, 0x00	; 0
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	39 f4       	brne	.+14     	; 0x1db0 <main+0x770>
    1da2:	29 81       	ldd	r18, Y+1	; 0x01
    1da4:	3a 81       	ldd	r19, Y+2	; 0x02
    1da6:	8f ef       	ldi	r24, 0xFF	; 255
    1da8:	9f ef       	ldi	r25, 0xFF	; 255
    1daa:	b9 01       	movw	r22, r18
    1dac:	0e 94 11 0a 	call	0x1422	; 0x1422 <set_volume>
		ON_JOYSTICK_RIGHT  set_volume(+1, v);
    1db0:	ec e2       	ldi	r30, 0x2C	; 44
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	88 70       	andi	r24, 0x08	; 8
    1dbc:	90 70       	andi	r25, 0x00	; 0
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <main+0x784>
    1dc2:	61 cc       	rjmp	.-1854   	; 0x1686 <main+0x46>
    1dc4:	29 81       	ldd	r18, Y+1	; 0x01
    1dc6:	3a 81       	ldd	r19, Y+2	; 0x02
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	b9 01       	movw	r22, r18
    1dce:	0e 94 11 0a 	call	0x1422	; 0x1422 <set_volume>
    1dd2:	59 cc       	rjmp	.-1870   	; 0x1686 <main+0x46>
		break;

	// DISPLAY SET TIMER1 AND WAIT FOR EVENT
	case display_set_timer1:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1dd4:	86 e1       	ldi	r24, 0x16	; 22
    1dd6:	94 e0       	ldi	r25, 0x04	; 4
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("SET T1")
    1de0:	8d e4       	ldi	r24, 0x4D	; 77
    1de2:	91 e0       	ldi	r25, 0x01	; 1
    1de4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1de8:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer1;
    1dec:	80 e1       	ldi	r24, 0x10	; 16
    1dee:	8b 83       	std	Y+3, r24	; 0x03
    1df0:	4a cc       	rjmp	.-1900   	; 0x1686 <main+0x46>
		break;
	case state_set_timer1:
		ON_JOYSTICK_LEFT   c = display_set_timer2;
    1df2:	ec e2       	ldi	r30, 0x2C	; 44
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	84 70       	andi	r24, 0x04	; 4
    1dfe:	90 70       	andi	r25, 0x00	; 0
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	11 f4       	brne	.+4      	; 0x1e08 <main+0x7c8>
    1e04:	81 e1       	ldi	r24, 0x11	; 17
    1e06:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_leave_menu;
    1e08:	ec e2       	ldi	r30, 0x2C	; 44
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	88 70       	andi	r24, 0x08	; 8
    1e14:	90 70       	andi	r25, 0x00	; 0
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	11 f4       	brne	.+4      	; 0x1e1e <main+0x7de>
    1e1a:	8d e0       	ldi	r24, 0x0D	; 13
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_UP     c = display_set_timer1_on_off;
    1e1e:	e3 e2       	ldi	r30, 0x23	; 35
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	80 74       	andi	r24, 0x40	; 64
    1e2a:	90 70       	andi	r25, 0x00	; 0
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	11 f4       	brne	.+4      	; 0x1e34 <main+0x7f4>
    1e30:	8c e1       	ldi	r24, 0x1C	; 28
    1e32:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   c = display_set_timer1_on_off;
    1e34:	e3 e2       	ldi	r30, 0x23	; 35
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	88 23       	and	r24, r24
    1e3c:	14 f0       	brlt	.+4      	; 0x1e42 <main+0x802>
    1e3e:	8c e1       	ldi	r24, 0x1C	; 28
    1e40:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = display_set_timer1_on_off;
    1e42:	e3 e2       	ldi	r30, 0x23	; 35
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	88 2f       	mov	r24, r24
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	80 71       	andi	r24, 0x10	; 16
    1e4e:	90 70       	andi	r25, 0x00	; 0
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <main+0x816>
    1e54:	18 cc       	rjmp	.-2000   	; 0x1686 <main+0x46>
    1e56:	8c e1       	ldi	r24, 0x1C	; 28
    1e58:	8b 83       	std	Y+3, r24	; 0x03
    1e5a:	15 cc       	rjmp	.-2006   	; 0x1686 <main+0x46>
		break;

	// DISPLAY SET TIMER2 AND WAIT FOR EVENT
	case display_set_timer2:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1e5c:	86 e1       	ldi	r24, 0x16	; 22
    1e5e:	94 e0       	ldi	r25, 0x04	; 4
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("SET T2")
    1e68:	84 e5       	ldi	r24, 0x54	; 84
    1e6a:	91 e0       	ldi	r25, 0x01	; 1
    1e6c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1e70:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer2;
    1e74:	82 e1       	ldi	r24, 0x12	; 18
    1e76:	8b 83       	std	Y+3, r24	; 0x03
    1e78:	06 cc       	rjmp	.-2036   	; 0x1686 <main+0x46>
		break;
	case state_set_timer2:
		ON_JOYSTICK_LEFT   c = display_set_sound;
    1e7a:	ec e2       	ldi	r30, 0x2C	; 44
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 2f       	mov	r24, r24
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	84 70       	andi	r24, 0x04	; 4
    1e86:	90 70       	andi	r25, 0x00	; 0
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	11 f4       	brne	.+4      	; 0x1e90 <main+0x850>
    1e8c:	83 e1       	ldi	r24, 0x13	; 19
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_set_timer1;
    1e90:	ec e2       	ldi	r30, 0x2C	; 44
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	88 70       	andi	r24, 0x08	; 8
    1e9c:	90 70       	andi	r25, 0x00	; 0
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	11 f4       	brne	.+4      	; 0x1ea6 <main+0x866>
    1ea2:	8f e0       	ldi	r24, 0x0F	; 15
    1ea4:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_UP     c = display_set_timer2_on_off;
    1ea6:	e3 e2       	ldi	r30, 0x23	; 35
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	80 74       	andi	r24, 0x40	; 64
    1eb2:	90 70       	andi	r25, 0x00	; 0
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	11 f4       	brne	.+4      	; 0x1ebc <main+0x87c>
    1eb8:	8e e1       	ldi	r24, 0x1E	; 30
    1eba:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   c = display_set_timer2_on_off;
    1ebc:	e3 e2       	ldi	r30, 0x23	; 35
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	88 23       	and	r24, r24
    1ec4:	14 f0       	brlt	.+4      	; 0x1eca <main+0x88a>
    1ec6:	8e e1       	ldi	r24, 0x1E	; 30
    1ec8:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = display_set_timer2_on_off;
    1eca:	e3 e2       	ldi	r30, 0x23	; 35
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	80 71       	andi	r24, 0x10	; 16
    1ed6:	90 70       	andi	r25, 0x00	; 0
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	09 f0       	breq	.+2      	; 0x1ede <main+0x89e>
    1edc:	d4 cb       	rjmp	.-2136   	; 0x1686 <main+0x46>
    1ede:	8e e1       	ldi	r24, 0x1E	; 30
    1ee0:	8b 83       	std	Y+3, r24	; 0x03
    1ee2:	d1 cb       	rjmp	.-2142   	; 0x1686 <main+0x46>
		break;
	
	// DISPLAY SET TIMER1 ON/OFF AND WAIT FOR EVENT
	case display_set_timer1_on_off:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1ee4:	86 e1       	ldi	r24, 0x16	; 22
    1ee6:	94 e0       	ldi	r25, 0x04	; 4
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("ON/OFF")
    1ef0:	8b e5       	ldi	r24, 0x5B	; 91
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1ef8:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer1_on_off;
    1efc:	8d e1       	ldi	r24, 0x1D	; 29
    1efe:	8b 83       	std	Y+3, r24	; 0x03
    1f00:	c2 cb       	rjmp	.-2172   	; 0x1686 <main+0x46>
		break;
	case state_set_timer1_on_off:
		ON_JOYSTICK_LEFT   c = display_set_timer1_countdown;
    1f02:	ec e2       	ldi	r30, 0x2C	; 44
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	84 70       	andi	r24, 0x04	; 4
    1f0e:	90 70       	andi	r25, 0x00	; 0
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <main+0x8d8>
    1f14:	8a e2       	ldi	r24, 0x2A	; 42
    1f16:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_set_timer1_countdown;
    1f18:	ec e2       	ldi	r30, 0x2C	; 44
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	88 2f       	mov	r24, r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	88 70       	andi	r24, 0x08	; 8
    1f24:	90 70       	andi	r25, 0x00	; 0
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	11 f4       	brne	.+4      	; 0x1f2e <main+0x8ee>
    1f2a:	8a e2       	ldi	r24, 0x2A	; 42
    1f2c:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_UP     c = display_set_timer1;
    1f2e:	e3 e2       	ldi	r30, 0x23	; 35
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	88 2f       	mov	r24, r24
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	80 74       	andi	r24, 0x40	; 64
    1f3a:	90 70       	andi	r25, 0x00	; 0
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	11 f4       	brne	.+4      	; 0x1f44 <main+0x904>
    1f40:	8f e0       	ldi	r24, 0x0F	; 15
    1f42:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   c = get_timer1_on_off;
    1f44:	e3 e2       	ldi	r30, 0x23	; 35
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	88 23       	and	r24, r24
    1f4c:	14 f0       	brlt	.+4      	; 0x1f52 <main+0x912>
    1f4e:	80 e2       	ldi	r24, 0x20	; 32
    1f50:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = get_timer1_on_off;
    1f52:	e3 e2       	ldi	r30, 0x23	; 35
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	80 71       	andi	r24, 0x10	; 16
    1f5e:	90 70       	andi	r25, 0x00	; 0
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <main+0x926>
    1f64:	90 cb       	rjmp	.-2272   	; 0x1686 <main+0x46>
    1f66:	80 e2       	ldi	r24, 0x20	; 32
    1f68:	8b 83       	std	Y+3, r24	; 0x03
    1f6a:	8d cb       	rjmp	.-2278   	; 0x1686 <main+0x46>
		break;

	// ASK IF TIMER1 IS ACTUAL ON OR OFF --> GO IN THE STATE
	case get_timer1_on_off:
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1f6c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		//if ( timer1_is_on ) c = display_timer1_on; //function get_timer1_on_off_settings
		//else c = display_timer1_off;
		#if DEBUG_MODE
			c = display_timer1_on;
    1f70:	81 e2       	ldi	r24, 0x21	; 33
    1f72:	8b 83       	std	Y+3, r24	; 0x03
    1f74:	88 cb       	rjmp	.-2288   	; 0x1686 <main+0x46>
		#endif
		break;
	case display_timer1_on:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1f76:	86 e1       	ldi	r24, 0x16	; 22
    1f78:	94 e0       	ldi	r25, 0x04	; 4
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	70 e0       	ldi	r23, 0x00	; 0
    1f7e:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("ON")
    1f82:	82 e6       	ldi	r24, 0x62	; 98
    1f84:	91 e0       	ldi	r25, 0x01	; 1
    1f86:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1f8a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer1_on;
    1f8e:	82 e2       	ldi	r24, 0x22	; 34
    1f90:	8b 83       	std	Y+3, r24	; 0x03
    1f92:	79 cb       	rjmp	.-2318   	; 0x1686 <main+0x46>
		break;
	case state_timer1_on:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1f94:	86 e1       	ldi	r24, 0x16	; 22
    1f96:	94 e0       	ldi	r25, 0x04	; 4
    1f98:	60 e0       	ldi	r22, 0x00	; 0
    1f9a:	70 e0       	ldi	r23, 0x00	; 0
    1f9c:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		ON_JOYSTICK_LEFT   c = display_timer1_off;
    1fa0:	ec e2       	ldi	r30, 0x2C	; 44
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	88 2f       	mov	r24, r24
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	84 70       	andi	r24, 0x04	; 4
    1fac:	90 70       	andi	r25, 0x00	; 0
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <main+0x976>
    1fb2:	83 e2       	ldi	r24, 0x23	; 35
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_timer1_off;
    1fb6:	ec e2       	ldi	r30, 0x2C	; 44
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	88 2f       	mov	r24, r24
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	88 70       	andi	r24, 0x08	; 8
    1fc2:	90 70       	andi	r25, 0x00	; 0
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	11 f4       	brne	.+4      	; 0x1fcc <main+0x98c>
    1fc8:	83 e2       	ldi	r24, 0x23	; 35
    1fca:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_UP     { c = display_set_timer1_on_off; } //function set_timer2_on_off_settings
    1fcc:	e3 e2       	ldi	r30, 0x23	; 35
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	80 74       	andi	r24, 0x40	; 64
    1fd8:	90 70       	andi	r25, 0x00	; 0
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	11 f4       	brne	.+4      	; 0x1fe2 <main+0x9a2>
    1fde:	8c e1       	ldi	r24, 0x1C	; 28
    1fe0:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   { c = display_set_timer1_on_off; } //function set_timer2_on_off_settings
    1fe2:	e3 e2       	ldi	r30, 0x23	; 35
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	88 23       	and	r24, r24
    1fea:	14 f0       	brlt	.+4      	; 0x1ff0 <main+0x9b0>
    1fec:	8c e1       	ldi	r24, 0x1C	; 28
    1fee:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER { c = display_set_timer1_on_off; } //function set_timer2_on_off_settings
    1ff0:	e3 e2       	ldi	r30, 0x23	; 35
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	88 2f       	mov	r24, r24
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	80 71       	andi	r24, 0x10	; 16
    1ffc:	90 70       	andi	r25, 0x00	; 0
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	09 f0       	breq	.+2      	; 0x2004 <main+0x9c4>
    2002:	41 cb       	rjmp	.-2430   	; 0x1686 <main+0x46>
    2004:	8c e1       	ldi	r24, 0x1C	; 28
    2006:	8b 83       	std	Y+3, r24	; 0x03
    2008:	3e cb       	rjmp	.-2436   	; 0x1686 <main+0x46>
		break;
	case display_timer1_off:
		#if DEBUG_MODE
			BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    200a:	86 e1       	ldi	r24, 0x16	; 22
    200c:	94 e0       	ldi	r25, 0x04	; 4
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		#endif
		//if (sound_is_off) play_sound;
		LCD_TEXT("OFF")
    2016:	85 e6       	ldi	r24, 0x65	; 101
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    201e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer1_off;
    2022:	84 e2       	ldi	r24, 0x24	; 36
    2024:	8b 83       	std	Y+3, r24	; 0x03
    2026:	2f cb       	rjmp	.-2466   	; 0x1686 <main+0x46>
		break;
	case state_timer1_off:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    2028:	86 e1       	ldi	r24, 0x16	; 22
    202a:	94 e0       	ldi	r25, 0x04	; 4
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		ON_JOYSTICK_LEFT   c = display_timer1_on;
    2034:	ec e2       	ldi	r30, 0x2C	; 44
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	88 2f       	mov	r24, r24
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	84 70       	andi	r24, 0x04	; 4
    2040:	90 70       	andi	r25, 0x00	; 0
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	11 f4       	brne	.+4      	; 0x204a <main+0xa0a>
    2046:	81 e2       	ldi	r24, 0x21	; 33
    2048:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_timer1_on;
    204a:	ec e2       	ldi	r30, 0x2C	; 44
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	88 2f       	mov	r24, r24
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	88 70       	andi	r24, 0x08	; 8
    2056:	90 70       	andi	r25, 0x00	; 0
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	11 f4       	brne	.+4      	; 0x2060 <main+0xa20>
    205c:	81 e2       	ldi	r24, 0x21	; 33
    205e:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_UP     { c = display_set_timer1_on_off; } //function set_timer2_on_off_settings
    2060:	e3 e2       	ldi	r30, 0x23	; 35
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	88 2f       	mov	r24, r24
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	80 74       	andi	r24, 0x40	; 64
    206c:	90 70       	andi	r25, 0x00	; 0
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	11 f4       	brne	.+4      	; 0x2076 <main+0xa36>
    2072:	8c e1       	ldi	r24, 0x1C	; 28
    2074:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   { c = display_set_timer1_on_off; } //function set_timer2_on_off_settings
    2076:	e3 e2       	ldi	r30, 0x23	; 35
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	88 23       	and	r24, r24
    207e:	14 f0       	brlt	.+4      	; 0x2084 <main+0xa44>
    2080:	8c e1       	ldi	r24, 0x1C	; 28
    2082:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER { c = display_set_timer1_on_off; } //function set_timer2_on_off_settings
    2084:	e3 e2       	ldi	r30, 0x23	; 35
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	80 71       	andi	r24, 0x10	; 16
    2090:	90 70       	andi	r25, 0x00	; 0
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	09 f0       	breq	.+2      	; 0x2098 <main+0xa58>
    2096:	f7 ca       	rjmp	.-2578   	; 0x1686 <main+0x46>
    2098:	8c e1       	ldi	r24, 0x1C	; 28
    209a:	8b 83       	std	Y+3, r24	; 0x03
    209c:	f4 ca       	rjmp	.-2584   	; 0x1686 <main+0x46>
		break;

	// DISPLAY SET TIMER2 ON/OFF AND WAIT FOR EVENT
	case display_set_timer2_on_off:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    209e:	86 e1       	ldi	r24, 0x16	; 22
    20a0:	94 e0       	ldi	r25, 0x04	; 4
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("ON/OFF")
    20aa:	8b e5       	ldi	r24, 0x5B	; 91
    20ac:	91 e0       	ldi	r25, 0x01	; 1
    20ae:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    20b2:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer2_on_off;
    20b6:	8f e1       	ldi	r24, 0x1F	; 31
    20b8:	8b 83       	std	Y+3, r24	; 0x03
    20ba:	e5 ca       	rjmp	.-2614   	; 0x1686 <main+0x46>
		break;
	case state_set_timer2_on_off:
		ON_JOYSTICK_LEFT   c = display_set_timer2_countdown;
    20bc:	ec e2       	ldi	r30, 0x2C	; 44
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	84 70       	andi	r24, 0x04	; 4
    20c8:	90 70       	andi	r25, 0x00	; 0
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	11 f4       	brne	.+4      	; 0x20d2 <main+0xa92>
    20ce:	8c e2       	ldi	r24, 0x2C	; 44
    20d0:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_set_timer2_countdown;
    20d2:	ec e2       	ldi	r30, 0x2C	; 44
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	88 2f       	mov	r24, r24
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	88 70       	andi	r24, 0x08	; 8
    20de:	90 70       	andi	r25, 0x00	; 0
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	11 f4       	brne	.+4      	; 0x20e8 <main+0xaa8>
    20e4:	8c e2       	ldi	r24, 0x2C	; 44
    20e6:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_UP     c = display_set_timer2;
    20e8:	e3 e2       	ldi	r30, 0x23	; 35
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	88 2f       	mov	r24, r24
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	80 74       	andi	r24, 0x40	; 64
    20f4:	90 70       	andi	r25, 0x00	; 0
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	11 f4       	brne	.+4      	; 0x20fe <main+0xabe>
    20fa:	81 e1       	ldi	r24, 0x11	; 17
    20fc:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   c = get_timer2_on_off;
    20fe:	e3 e2       	ldi	r30, 0x23	; 35
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	88 23       	and	r24, r24
    2106:	14 f0       	brlt	.+4      	; 0x210c <main+0xacc>
    2108:	85 e2       	ldi	r24, 0x25	; 37
    210a:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = get_timer2_on_off;
    210c:	e3 e2       	ldi	r30, 0x23	; 35
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	80 71       	andi	r24, 0x10	; 16
    2118:	90 70       	andi	r25, 0x00	; 0
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	09 f0       	breq	.+2      	; 0x2120 <main+0xae0>
    211e:	b3 ca       	rjmp	.-2714   	; 0x1686 <main+0x46>
    2120:	85 e2       	ldi	r24, 0x25	; 37
    2122:	8b 83       	std	Y+3, r24	; 0x03
    2124:	b0 ca       	rjmp	.-2720   	; 0x1686 <main+0x46>
		break;

	// ASK IF TIMER2 IS ACTUAL ON OR OFF --> GO IN THE STATE
	case get_timer2_on_off:
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    2126:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		//if ( timer2_is_on ) c = display_timer2_on; //function get_timer2_on_off_settings
		//else c = display_timer2_off;
		#if DEBUG_MODE
			c = display_timer2_on;
    212a:	86 e2       	ldi	r24, 0x26	; 38
    212c:	8b 83       	std	Y+3, r24	; 0x03
    212e:	ab ca       	rjmp	.-2730   	; 0x1686 <main+0x46>
		#endif
		break;
	case display_timer2_on:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    2130:	86 e1       	ldi	r24, 0x16	; 22
    2132:	94 e0       	ldi	r25, 0x04	; 4
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	70 e0       	ldi	r23, 0x00	; 0
    2138:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("ON")
    213c:	82 e6       	ldi	r24, 0x62	; 98
    213e:	91 e0       	ldi	r25, 0x01	; 1
    2140:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    2144:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer2_on;
    2148:	87 e2       	ldi	r24, 0x27	; 39
    214a:	8b 83       	std	Y+3, r24	; 0x03
    214c:	9c ca       	rjmp	.-2760   	; 0x1686 <main+0x46>
		break;
	case state_timer2_on:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    214e:	86 e1       	ldi	r24, 0x16	; 22
    2150:	94 e0       	ldi	r25, 0x04	; 4
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		ON_JOYSTICK_LEFT   c = display_timer2_off;
    215a:	ec e2       	ldi	r30, 0x2C	; 44
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	84 70       	andi	r24, 0x04	; 4
    2166:	90 70       	andi	r25, 0x00	; 0
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	11 f4       	brne	.+4      	; 0x2170 <main+0xb30>
    216c:	88 e2       	ldi	r24, 0x28	; 40
    216e:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_timer2_off;
    2170:	ec e2       	ldi	r30, 0x2C	; 44
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	88 2f       	mov	r24, r24
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	88 70       	andi	r24, 0x08	; 8
    217c:	90 70       	andi	r25, 0x00	; 0
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	11 f4       	brne	.+4      	; 0x2186 <main+0xb46>
    2182:	88 e2       	ldi	r24, 0x28	; 40
    2184:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_UP     { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    2186:	e3 e2       	ldi	r30, 0x23	; 35
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	80 74       	andi	r24, 0x40	; 64
    2192:	90 70       	andi	r25, 0x00	; 0
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	11 f4       	brne	.+4      	; 0x219c <main+0xb5c>
    2198:	8e e1       	ldi	r24, 0x1E	; 30
    219a:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    219c:	e3 e2       	ldi	r30, 0x23	; 35
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	88 23       	and	r24, r24
    21a4:	14 f0       	brlt	.+4      	; 0x21aa <main+0xb6a>
    21a6:	8e e1       	ldi	r24, 0x1E	; 30
    21a8:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    21aa:	e3 e2       	ldi	r30, 0x23	; 35
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	80 71       	andi	r24, 0x10	; 16
    21b6:	90 70       	andi	r25, 0x00	; 0
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	09 f0       	breq	.+2      	; 0x21be <main+0xb7e>
    21bc:	64 ca       	rjmp	.-2872   	; 0x1686 <main+0x46>
    21be:	8e e1       	ldi	r24, 0x1E	; 30
    21c0:	8b 83       	std	Y+3, r24	; 0x03
    21c2:	61 ca       	rjmp	.-2878   	; 0x1686 <main+0x46>
		break;
	case display_timer2_off:
		#if DEBUG_MODE
			BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    21c4:	86 e1       	ldi	r24, 0x16	; 22
    21c6:	94 e0       	ldi	r25, 0x04	; 4
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		#endif
		//if (sound_is_off) play_sound;
		LCD_TEXT("OFF")
    21d0:	85 e6       	ldi	r24, 0x65	; 101
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    21d8:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer2_off;
    21dc:	89 e2       	ldi	r24, 0x29	; 41
    21de:	8b 83       	std	Y+3, r24	; 0x03
    21e0:	52 ca       	rjmp	.-2908   	; 0x1686 <main+0x46>
		break;
	case state_timer2_off:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    21e2:	86 e1       	ldi	r24, 0x16	; 22
    21e4:	94 e0       	ldi	r25, 0x04	; 4
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		ON_JOYSTICK_LEFT   c = display_timer2_on;
    21ee:	ec e2       	ldi	r30, 0x2C	; 44
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	88 2f       	mov	r24, r24
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	84 70       	andi	r24, 0x04	; 4
    21fa:	90 70       	andi	r25, 0x00	; 0
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	11 f4       	brne	.+4      	; 0x2204 <main+0xbc4>
    2200:	86 e2       	ldi	r24, 0x26	; 38
    2202:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_timer2_on;
    2204:	ec e2       	ldi	r30, 0x2C	; 44
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	88 2f       	mov	r24, r24
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	88 70       	andi	r24, 0x08	; 8
    2210:	90 70       	andi	r25, 0x00	; 0
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	11 f4       	brne	.+4      	; 0x221a <main+0xbda>
    2216:	86 e2       	ldi	r24, 0x26	; 38
    2218:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_UP     { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    221a:	e3 e2       	ldi	r30, 0x23	; 35
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	88 2f       	mov	r24, r24
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	80 74       	andi	r24, 0x40	; 64
    2226:	90 70       	andi	r25, 0x00	; 0
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	11 f4       	brne	.+4      	; 0x2230 <main+0xbf0>
    222c:	8e e1       	ldi	r24, 0x1E	; 30
    222e:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    2230:	e3 e2       	ldi	r30, 0x23	; 35
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	88 23       	and	r24, r24
    2238:	14 f0       	brlt	.+4      	; 0x223e <main+0xbfe>
    223a:	8e e1       	ldi	r24, 0x1E	; 30
    223c:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    223e:	e3 e2       	ldi	r30, 0x23	; 35
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	80 71       	andi	r24, 0x10	; 16
    224a:	90 70       	andi	r25, 0x00	; 0
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	09 f0       	breq	.+2      	; 0x2252 <main+0xc12>
    2250:	1a ca       	rjmp	.-3020   	; 0x1686 <main+0x46>
    2252:	8e e1       	ldi	r24, 0x1E	; 30
    2254:	8b 83       	std	Y+3, r24	; 0x03
    2256:	17 ca       	rjmp	.-3026   	; 0x1686 <main+0x46>
		break;

	// DISPLAY SET TIMER1 COUNTDOWN AND WAIT FOR EVENT
	case display_set_timer1_countdown:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    2258:	86 e1       	ldi	r24, 0x16	; 22
    225a:	94 e0       	ldi	r25, 0x04	; 4
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("CNTDW1")
    2264:	89 e6       	ldi	r24, 0x69	; 105
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    226c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer1_countdown;
    2270:	8b e2       	ldi	r24, 0x2B	; 43
    2272:	8b 83       	std	Y+3, r24	; 0x03
    2274:	08 ca       	rjmp	.-3056   	; 0x1686 <main+0x46>
		break;
	case state_set_timer1_countdown:
		ON_JOYSTICK_LEFT   c = display_set_timer1_on_off;
    2276:	ec e2       	ldi	r30, 0x2C	; 44
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	88 2f       	mov	r24, r24
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	84 70       	andi	r24, 0x04	; 4
    2282:	90 70       	andi	r25, 0x00	; 0
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	11 f4       	brne	.+4      	; 0x228c <main+0xc4c>
    2288:	8c e1       	ldi	r24, 0x1C	; 28
    228a:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_set_timer1_on_off;
    228c:	ec e2       	ldi	r30, 0x2C	; 44
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	88 70       	andi	r24, 0x08	; 8
    2298:	90 70       	andi	r25, 0x00	; 0
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	11 f4       	brne	.+4      	; 0x22a2 <main+0xc62>
    229e:	8c e1       	ldi	r24, 0x1C	; 28
    22a0:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_UP     c = display_set_timer1;
    22a2:	e3 e2       	ldi	r30, 0x23	; 35
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	88 2f       	mov	r24, r24
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	80 74       	andi	r24, 0x40	; 64
    22ae:	90 70       	andi	r25, 0x00	; 0
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	11 f4       	brne	.+4      	; 0x22b8 <main+0xc78>
    22b4:	8f e0       	ldi	r24, 0x0F	; 15
    22b6:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   c = display_timer1_input;
    22b8:	e3 e2       	ldi	r30, 0x23	; 35
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	88 23       	and	r24, r24
    22c0:	14 f0       	brlt	.+4      	; 0x22c6 <main+0xc86>
    22c2:	8e e2       	ldi	r24, 0x2E	; 46
    22c4:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = display_timer1_input;
    22c6:	e3 e2       	ldi	r30, 0x23	; 35
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	88 2f       	mov	r24, r24
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	80 71       	andi	r24, 0x10	; 16
    22d2:	90 70       	andi	r25, 0x00	; 0
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	09 f0       	breq	.+2      	; 0x22da <main+0xc9a>
    22d8:	d6 c9       	rjmp	.-3156   	; 0x1686 <main+0x46>
    22da:	8e e2       	ldi	r24, 0x2E	; 46
    22dc:	8b 83       	std	Y+3, r24	; 0x03
    22de:	d3 c9       	rjmp	.-3162   	; 0x1686 <main+0x46>
		break;
	case display_timer1_input:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    22e0:	86 e1       	ldi	r24, 0x16	; 22
    22e2:	94 e0       	ldi	r25, 0x04	; 4
    22e4:	60 e0       	ldi	r22, 0x00	; 0
    22e6:	70 e0       	ldi	r23, 0x00	; 0
    22e8:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("  0010")
    22ec:	80 e7       	ldi	r24, 0x70	; 112
    22ee:	91 e0       	ldi	r25, 0x01	; 1
    22f0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    22f4:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer1_input;
    22f8:	8f e2       	ldi	r24, 0x2F	; 47
    22fa:	8b 83       	std	Y+3, r24	; 0x03
    22fc:	c4 c9       	rjmp	.-3192   	; 0x1686 <main+0x46>
		break;
	case state_timer1_input:
		ON_JOYSTICK_UP     c = display_set_timer1_countdown;
    22fe:	e3 e2       	ldi	r30, 0x23	; 35
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	88 2f       	mov	r24, r24
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	80 74       	andi	r24, 0x40	; 64
    230a:	90 70       	andi	r25, 0x00	; 0
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	11 f4       	brne	.+4      	; 0x2314 <main+0xcd4>
    2310:	8a e2       	ldi	r24, 0x2A	; 42
    2312:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   c = display_set_timer1_countdown;
    2314:	e3 e2       	ldi	r30, 0x23	; 35
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	88 23       	and	r24, r24
    231c:	14 f0       	brlt	.+4      	; 0x2322 <main+0xce2>
    231e:	8a e2       	ldi	r24, 0x2A	; 42
    2320:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = display_set_timer1_countdown;
    2322:	e3 e2       	ldi	r30, 0x23	; 35
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	80 71       	andi	r24, 0x10	; 16
    232e:	90 70       	andi	r25, 0x00	; 0
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	09 f0       	breq	.+2      	; 0x2336 <main+0xcf6>
    2334:	a8 c9       	rjmp	.-3248   	; 0x1686 <main+0x46>
    2336:	8a e2       	ldi	r24, 0x2A	; 42
    2338:	8b 83       	std	Y+3, r24	; 0x03
    233a:	a5 c9       	rjmp	.-3254   	; 0x1686 <main+0x46>
		break;

	// DISPLAY SET TIMER2 COUNTDOWN AND WAIT FOR EVENT
	case display_set_timer2_countdown:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    233c:	86 e1       	ldi	r24, 0x16	; 22
    233e:	94 e0       	ldi	r25, 0x04	; 4
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("CNTDW2")
    2348:	87 e7       	ldi	r24, 0x77	; 119
    234a:	91 e0       	ldi	r25, 0x01	; 1
    234c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    2350:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer2_countdown;
    2354:	8d e2       	ldi	r24, 0x2D	; 45
    2356:	8b 83       	std	Y+3, r24	; 0x03
    2358:	96 c9       	rjmp	.-3284   	; 0x1686 <main+0x46>
		break;
	case state_set_timer2_countdown:
		ON_JOYSTICK_LEFT   c = display_set_timer2_on_off;
    235a:	ec e2       	ldi	r30, 0x2C	; 44
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	84 70       	andi	r24, 0x04	; 4
    2366:	90 70       	andi	r25, 0x00	; 0
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	11 f4       	brne	.+4      	; 0x2370 <main+0xd30>
    236c:	8e e1       	ldi	r24, 0x1E	; 30
    236e:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_RIGHT  c = display_set_timer2_on_off;
    2370:	ec e2       	ldi	r30, 0x2C	; 44
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	88 2f       	mov	r24, r24
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	88 70       	andi	r24, 0x08	; 8
    237c:	90 70       	andi	r25, 0x00	; 0
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	11 f4       	brne	.+4      	; 0x2386 <main+0xd46>
    2382:	8e e1       	ldi	r24, 0x1E	; 30
    2384:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_UP     c = display_set_timer2;
    2386:	e3 e2       	ldi	r30, 0x23	; 35
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	88 2f       	mov	r24, r24
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	80 74       	andi	r24, 0x40	; 64
    2392:	90 70       	andi	r25, 0x00	; 0
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	11 f4       	brne	.+4      	; 0x239c <main+0xd5c>
    2398:	81 e1       	ldi	r24, 0x11	; 17
    239a:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   c = display_timer2_input;
    239c:	e3 e2       	ldi	r30, 0x23	; 35
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	88 23       	and	r24, r24
    23a4:	14 f0       	brlt	.+4      	; 0x23aa <main+0xd6a>
    23a6:	80 e3       	ldi	r24, 0x30	; 48
    23a8:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = display_timer2_input;
    23aa:	e3 e2       	ldi	r30, 0x23	; 35
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	88 2f       	mov	r24, r24
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	80 71       	andi	r24, 0x10	; 16
    23b6:	90 70       	andi	r25, 0x00	; 0
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	09 f0       	breq	.+2      	; 0x23be <main+0xd7e>
    23bc:	64 c9       	rjmp	.-3384   	; 0x1686 <main+0x46>
    23be:	80 e3       	ldi	r24, 0x30	; 48
    23c0:	8b 83       	std	Y+3, r24	; 0x03
    23c2:	61 c9       	rjmp	.-3390   	; 0x1686 <main+0x46>
		break;
	case display_timer2_input:
		BEEP(1046.500, 0.25) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    23c4:	86 e1       	ldi	r24, 0x16	; 22
    23c6:	94 e0       	ldi	r25, 0x04	; 4
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	70 e0       	ldi	r23, 0x00	; 0
    23cc:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("  0005")
    23d0:	8e e7       	ldi	r24, 0x7E	; 126
    23d2:	91 e0       	ldi	r25, 0x01	; 1
    23d4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    23d8:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer2_input;
    23dc:	81 e3       	ldi	r24, 0x31	; 49
    23de:	8b 83       	std	Y+3, r24	; 0x03
    23e0:	52 c9       	rjmp	.-3420   	; 0x1686 <main+0x46>
		break;
	case state_timer2_input:
		ON_JOYSTICK_UP     c = display_set_timer2_countdown;
    23e2:	e3 e2       	ldi	r30, 0x23	; 35
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	80 74       	andi	r24, 0x40	; 64
    23ee:	90 70       	andi	r25, 0x00	; 0
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	11 f4       	brne	.+4      	; 0x23f8 <main+0xdb8>
    23f4:	8c e2       	ldi	r24, 0x2C	; 44
    23f6:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_DOWN   c = display_set_timer2_countdown;
    23f8:	e3 e2       	ldi	r30, 0x23	; 35
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	88 23       	and	r24, r24
    2400:	14 f0       	brlt	.+4      	; 0x2406 <main+0xdc6>
    2402:	8c e2       	ldi	r24, 0x2C	; 44
    2404:	8b 83       	std	Y+3, r24	; 0x03
		ON_JOYSTICK_CENTER c = display_set_timer2_countdown;
    2406:	e3 e2       	ldi	r30, 0x23	; 35
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	80 71       	andi	r24, 0x10	; 16
    2412:	90 70       	andi	r25, 0x00	; 0
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	09 f0       	breq	.+2      	; 0x241a <main+0xdda>
    2418:	36 c9       	rjmp	.-3476   	; 0x1686 <main+0x46>
    241a:	8c e2       	ldi	r24, 0x2C	; 44
    241c:	8b 83       	std	Y+3, r24	; 0x03
    241e:	33 c9       	rjmp	.-3482   	; 0x1686 <main+0x46>
		break;


	// If we are somehow in an undefined state go back to time again
    default:
		c = display_time;
    2420:	1b 82       	std	Y+3, r1	; 0x03
    2422:	31 c9       	rjmp	.-3486   	; 0x1686 <main+0x46>

00002424 <__floatsisf>:
    2424:	a8 e0       	ldi	r26, 0x08	; 8
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e8 e1       	ldi	r30, 0x18	; 24
    242a:	f2 e1       	ldi	r31, 0x12	; 18
    242c:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__prologue_saves__+0x12>
    2430:	9b 01       	movw	r18, r22
    2432:	ac 01       	movw	r20, r24
    2434:	83 e0       	ldi	r24, 0x03	; 3
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	da 01       	movw	r26, r20
    243a:	c9 01       	movw	r24, r18
    243c:	88 27       	eor	r24, r24
    243e:	b7 fd       	sbrc	r27, 7
    2440:	83 95       	inc	r24
    2442:	99 27       	eor	r25, r25
    2444:	aa 27       	eor	r26, r26
    2446:	bb 27       	eor	r27, r27
    2448:	b8 2e       	mov	r11, r24
    244a:	21 15       	cp	r18, r1
    244c:	31 05       	cpc	r19, r1
    244e:	41 05       	cpc	r20, r1
    2450:	51 05       	cpc	r21, r1
    2452:	19 f4       	brne	.+6      	; 0x245a <__floatsisf+0x36>
    2454:	82 e0       	ldi	r24, 0x02	; 2
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	3a c0       	rjmp	.+116    	; 0x24ce <__floatsisf+0xaa>
    245a:	88 23       	and	r24, r24
    245c:	a9 f0       	breq	.+42     	; 0x2488 <__floatsisf+0x64>
    245e:	20 30       	cpi	r18, 0x00	; 0
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	38 07       	cpc	r19, r24
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	48 07       	cpc	r20, r24
    2468:	80 e8       	ldi	r24, 0x80	; 128
    246a:	58 07       	cpc	r21, r24
    246c:	29 f4       	brne	.+10     	; 0x2478 <__floatsisf+0x54>
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	70 e0       	ldi	r23, 0x00	; 0
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	9f ec       	ldi	r25, 0xCF	; 207
    2476:	30 c0       	rjmp	.+96     	; 0x24d8 <__floatsisf+0xb4>
    2478:	ee 24       	eor	r14, r14
    247a:	ff 24       	eor	r15, r15
    247c:	87 01       	movw	r16, r14
    247e:	e2 1a       	sub	r14, r18
    2480:	f3 0a       	sbc	r15, r19
    2482:	04 0b       	sbc	r16, r20
    2484:	15 0b       	sbc	r17, r21
    2486:	02 c0       	rjmp	.+4      	; 0x248c <__floatsisf+0x68>
    2488:	79 01       	movw	r14, r18
    248a:	8a 01       	movw	r16, r20
    248c:	8e e1       	ldi	r24, 0x1E	; 30
    248e:	c8 2e       	mov	r12, r24
    2490:	d1 2c       	mov	r13, r1
    2492:	dc 82       	std	Y+4, r13	; 0x04
    2494:	cb 82       	std	Y+3, r12	; 0x03
    2496:	ed 82       	std	Y+5, r14	; 0x05
    2498:	fe 82       	std	Y+6, r15	; 0x06
    249a:	0f 83       	std	Y+7, r16	; 0x07
    249c:	18 87       	std	Y+8, r17	; 0x08
    249e:	c8 01       	movw	r24, r16
    24a0:	b7 01       	movw	r22, r14
    24a2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__clzsi2>
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	18 16       	cp	r1, r24
    24aa:	19 06       	cpc	r1, r25
    24ac:	84 f4       	brge	.+32     	; 0x24ce <__floatsisf+0xaa>
    24ae:	08 2e       	mov	r0, r24
    24b0:	04 c0       	rjmp	.+8      	; 0x24ba <__floatsisf+0x96>
    24b2:	ee 0c       	add	r14, r14
    24b4:	ff 1c       	adc	r15, r15
    24b6:	00 1f       	adc	r16, r16
    24b8:	11 1f       	adc	r17, r17
    24ba:	0a 94       	dec	r0
    24bc:	d2 f7       	brpl	.-12     	; 0x24b2 <__floatsisf+0x8e>
    24be:	ed 82       	std	Y+5, r14	; 0x05
    24c0:	fe 82       	std	Y+6, r15	; 0x06
    24c2:	0f 83       	std	Y+7, r16	; 0x07
    24c4:	18 87       	std	Y+8, r17	; 0x08
    24c6:	c8 1a       	sub	r12, r24
    24c8:	d9 0a       	sbc	r13, r25
    24ca:	dc 82       	std	Y+4, r13	; 0x04
    24cc:	cb 82       	std	Y+3, r12	; 0x03
    24ce:	ba 82       	std	Y+2, r11	; 0x02
    24d0:	ce 01       	movw	r24, r28
    24d2:	01 96       	adiw	r24, 0x01	; 1
    24d4:	0e 94 bf 12 	call	0x257e	; 0x257e <__pack_f>
    24d8:	28 96       	adiw	r28, 0x08	; 8
    24da:	e9 e0       	ldi	r30, 0x09	; 9
    24dc:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__epilogue_restores__+0x12>

000024e0 <__clzsi2>:
    24e0:	ef 92       	push	r14
    24e2:	ff 92       	push	r15
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	7b 01       	movw	r14, r22
    24ea:	8c 01       	movw	r16, r24
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	e8 16       	cp	r14, r24
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	f8 06       	cpc	r15, r24
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	08 07       	cpc	r16, r24
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	18 07       	cpc	r17, r24
    24fc:	88 f4       	brcc	.+34     	; 0x2520 <__clzsi2+0x40>
    24fe:	8f ef       	ldi	r24, 0xFF	; 255
    2500:	e8 16       	cp	r14, r24
    2502:	f1 04       	cpc	r15, r1
    2504:	01 05       	cpc	r16, r1
    2506:	11 05       	cpc	r17, r1
    2508:	31 f0       	breq	.+12     	; 0x2516 <__clzsi2+0x36>
    250a:	28 f0       	brcs	.+10     	; 0x2516 <__clzsi2+0x36>
    250c:	88 e0       	ldi	r24, 0x08	; 8
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a0 e0       	ldi	r26, 0x00	; 0
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	17 c0       	rjmp	.+46     	; 0x2544 <__clzsi2+0x64>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e0       	ldi	r26, 0x00	; 0
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	12 c0       	rjmp	.+36     	; 0x2544 <__clzsi2+0x64>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	e8 16       	cp	r14, r24
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	f8 06       	cpc	r15, r24
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	08 07       	cpc	r16, r24
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	18 07       	cpc	r17, r24
    2530:	28 f0       	brcs	.+10     	; 0x253c <__clzsi2+0x5c>
    2532:	88 e1       	ldi	r24, 0x18	; 24
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	a0 e0       	ldi	r26, 0x00	; 0
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <__clzsi2+0x64>
    253c:	80 e1       	ldi	r24, 0x10	; 16
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	a0 e0       	ldi	r26, 0x00	; 0
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	20 e2       	ldi	r18, 0x20	; 32
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e0       	ldi	r20, 0x00	; 0
    254a:	50 e0       	ldi	r21, 0x00	; 0
    254c:	28 1b       	sub	r18, r24
    254e:	39 0b       	sbc	r19, r25
    2550:	4a 0b       	sbc	r20, r26
    2552:	5b 0b       	sbc	r21, r27
    2554:	04 c0       	rjmp	.+8      	; 0x255e <__clzsi2+0x7e>
    2556:	16 95       	lsr	r17
    2558:	07 95       	ror	r16
    255a:	f7 94       	ror	r15
    255c:	e7 94       	ror	r14
    255e:	8a 95       	dec	r24
    2560:	d2 f7       	brpl	.-12     	; 0x2556 <__clzsi2+0x76>
    2562:	f7 01       	movw	r30, r14
    2564:	eb 57       	subi	r30, 0x7B	; 123
    2566:	fe 4f       	sbci	r31, 0xFE	; 254
    2568:	80 81       	ld	r24, Z
    256a:	28 1b       	sub	r18, r24
    256c:	31 09       	sbc	r19, r1
    256e:	41 09       	sbc	r20, r1
    2570:	51 09       	sbc	r21, r1
    2572:	c9 01       	movw	r24, r18
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	ff 90       	pop	r15
    257a:	ef 90       	pop	r14
    257c:	08 95       	ret

0000257e <__pack_f>:
    257e:	df 92       	push	r13
    2580:	ef 92       	push	r14
    2582:	ff 92       	push	r15
    2584:	0f 93       	push	r16
    2586:	1f 93       	push	r17
    2588:	fc 01       	movw	r30, r24
    258a:	e4 80       	ldd	r14, Z+4	; 0x04
    258c:	f5 80       	ldd	r15, Z+5	; 0x05
    258e:	06 81       	ldd	r16, Z+6	; 0x06
    2590:	17 81       	ldd	r17, Z+7	; 0x07
    2592:	d1 80       	ldd	r13, Z+1	; 0x01
    2594:	80 81       	ld	r24, Z
    2596:	82 30       	cpi	r24, 0x02	; 2
    2598:	48 f4       	brcc	.+18     	; 0x25ac <__pack_f+0x2e>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a0 e1       	ldi	r26, 0x10	; 16
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e8 2a       	or	r14, r24
    25a4:	f9 2a       	or	r15, r25
    25a6:	0a 2b       	or	r16, r26
    25a8:	1b 2b       	or	r17, r27
    25aa:	a5 c0       	rjmp	.+330    	; 0x26f6 <__pack_f+0x178>
    25ac:	84 30       	cpi	r24, 0x04	; 4
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <__pack_f+0x34>
    25b0:	9f c0       	rjmp	.+318    	; 0x26f0 <__pack_f+0x172>
    25b2:	82 30       	cpi	r24, 0x02	; 2
    25b4:	21 f4       	brne	.+8      	; 0x25be <__pack_f+0x40>
    25b6:	ee 24       	eor	r14, r14
    25b8:	ff 24       	eor	r15, r15
    25ba:	87 01       	movw	r16, r14
    25bc:	05 c0       	rjmp	.+10     	; 0x25c8 <__pack_f+0x4a>
    25be:	e1 14       	cp	r14, r1
    25c0:	f1 04       	cpc	r15, r1
    25c2:	01 05       	cpc	r16, r1
    25c4:	11 05       	cpc	r17, r1
    25c6:	19 f4       	brne	.+6      	; 0x25ce <__pack_f+0x50>
    25c8:	e0 e0       	ldi	r30, 0x00	; 0
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	96 c0       	rjmp	.+300    	; 0x26fa <__pack_f+0x17c>
    25ce:	62 81       	ldd	r22, Z+2	; 0x02
    25d0:	73 81       	ldd	r23, Z+3	; 0x03
    25d2:	9f ef       	ldi	r25, 0xFF	; 255
    25d4:	62 38       	cpi	r22, 0x82	; 130
    25d6:	79 07       	cpc	r23, r25
    25d8:	0c f0       	brlt	.+2      	; 0x25dc <__pack_f+0x5e>
    25da:	5b c0       	rjmp	.+182    	; 0x2692 <__pack_f+0x114>
    25dc:	22 e8       	ldi	r18, 0x82	; 130
    25de:	3f ef       	ldi	r19, 0xFF	; 255
    25e0:	26 1b       	sub	r18, r22
    25e2:	37 0b       	sbc	r19, r23
    25e4:	2a 31       	cpi	r18, 0x1A	; 26
    25e6:	31 05       	cpc	r19, r1
    25e8:	2c f0       	brlt	.+10     	; 0x25f4 <__pack_f+0x76>
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e0       	ldi	r20, 0x00	; 0
    25f0:	50 e0       	ldi	r21, 0x00	; 0
    25f2:	2a c0       	rjmp	.+84     	; 0x2648 <__pack_f+0xca>
    25f4:	b8 01       	movw	r22, r16
    25f6:	a7 01       	movw	r20, r14
    25f8:	02 2e       	mov	r0, r18
    25fa:	04 c0       	rjmp	.+8      	; 0x2604 <__pack_f+0x86>
    25fc:	76 95       	lsr	r23
    25fe:	67 95       	ror	r22
    2600:	57 95       	ror	r21
    2602:	47 95       	ror	r20
    2604:	0a 94       	dec	r0
    2606:	d2 f7       	brpl	.-12     	; 0x25fc <__pack_f+0x7e>
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e0       	ldi	r26, 0x00	; 0
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	04 c0       	rjmp	.+8      	; 0x261a <__pack_f+0x9c>
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	aa 1f       	adc	r26, r26
    2618:	bb 1f       	adc	r27, r27
    261a:	2a 95       	dec	r18
    261c:	d2 f7       	brpl	.-12     	; 0x2612 <__pack_f+0x94>
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	a1 09       	sbc	r26, r1
    2622:	b1 09       	sbc	r27, r1
    2624:	8e 21       	and	r24, r14
    2626:	9f 21       	and	r25, r15
    2628:	a0 23       	and	r26, r16
    262a:	b1 23       	and	r27, r17
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	a1 05       	cpc	r26, r1
    2630:	b1 05       	cpc	r27, r1
    2632:	21 f0       	breq	.+8      	; 0x263c <__pack_f+0xbe>
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a0 e0       	ldi	r26, 0x00	; 0
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	9a 01       	movw	r18, r20
    263e:	ab 01       	movw	r20, r22
    2640:	28 2b       	or	r18, r24
    2642:	39 2b       	or	r19, r25
    2644:	4a 2b       	or	r20, r26
    2646:	5b 2b       	or	r21, r27
    2648:	da 01       	movw	r26, r20
    264a:	c9 01       	movw	r24, r18
    264c:	8f 77       	andi	r24, 0x7F	; 127
    264e:	90 70       	andi	r25, 0x00	; 0
    2650:	a0 70       	andi	r26, 0x00	; 0
    2652:	b0 70       	andi	r27, 0x00	; 0
    2654:	80 34       	cpi	r24, 0x40	; 64
    2656:	91 05       	cpc	r25, r1
    2658:	a1 05       	cpc	r26, r1
    265a:	b1 05       	cpc	r27, r1
    265c:	39 f4       	brne	.+14     	; 0x266c <__pack_f+0xee>
    265e:	27 ff       	sbrs	r18, 7
    2660:	09 c0       	rjmp	.+18     	; 0x2674 <__pack_f+0xf6>
    2662:	20 5c       	subi	r18, 0xC0	; 192
    2664:	3f 4f       	sbci	r19, 0xFF	; 255
    2666:	4f 4f       	sbci	r20, 0xFF	; 255
    2668:	5f 4f       	sbci	r21, 0xFF	; 255
    266a:	04 c0       	rjmp	.+8      	; 0x2674 <__pack_f+0xf6>
    266c:	21 5c       	subi	r18, 0xC1	; 193
    266e:	3f 4f       	sbci	r19, 0xFF	; 255
    2670:	4f 4f       	sbci	r20, 0xFF	; 255
    2672:	5f 4f       	sbci	r21, 0xFF	; 255
    2674:	e0 e0       	ldi	r30, 0x00	; 0
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	20 30       	cpi	r18, 0x00	; 0
    267a:	a0 e0       	ldi	r26, 0x00	; 0
    267c:	3a 07       	cpc	r19, r26
    267e:	a0 e0       	ldi	r26, 0x00	; 0
    2680:	4a 07       	cpc	r20, r26
    2682:	a0 e4       	ldi	r26, 0x40	; 64
    2684:	5a 07       	cpc	r21, r26
    2686:	10 f0       	brcs	.+4      	; 0x268c <__pack_f+0x10e>
    2688:	e1 e0       	ldi	r30, 0x01	; 1
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	79 01       	movw	r14, r18
    268e:	8a 01       	movw	r16, r20
    2690:	27 c0       	rjmp	.+78     	; 0x26e0 <__pack_f+0x162>
    2692:	60 38       	cpi	r22, 0x80	; 128
    2694:	71 05       	cpc	r23, r1
    2696:	64 f5       	brge	.+88     	; 0x26f0 <__pack_f+0x172>
    2698:	fb 01       	movw	r30, r22
    269a:	e1 58       	subi	r30, 0x81	; 129
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	d8 01       	movw	r26, r16
    26a0:	c7 01       	movw	r24, r14
    26a2:	8f 77       	andi	r24, 0x7F	; 127
    26a4:	90 70       	andi	r25, 0x00	; 0
    26a6:	a0 70       	andi	r26, 0x00	; 0
    26a8:	b0 70       	andi	r27, 0x00	; 0
    26aa:	80 34       	cpi	r24, 0x40	; 64
    26ac:	91 05       	cpc	r25, r1
    26ae:	a1 05       	cpc	r26, r1
    26b0:	b1 05       	cpc	r27, r1
    26b2:	39 f4       	brne	.+14     	; 0x26c2 <__pack_f+0x144>
    26b4:	e7 fe       	sbrs	r14, 7
    26b6:	0d c0       	rjmp	.+26     	; 0x26d2 <__pack_f+0x154>
    26b8:	80 e4       	ldi	r24, 0x40	; 64
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a0 e0       	ldi	r26, 0x00	; 0
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	04 c0       	rjmp	.+8      	; 0x26ca <__pack_f+0x14c>
    26c2:	8f e3       	ldi	r24, 0x3F	; 63
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a0 e0       	ldi	r26, 0x00	; 0
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e8 0e       	add	r14, r24
    26cc:	f9 1e       	adc	r15, r25
    26ce:	0a 1f       	adc	r16, r26
    26d0:	1b 1f       	adc	r17, r27
    26d2:	17 ff       	sbrs	r17, 7
    26d4:	05 c0       	rjmp	.+10     	; 0x26e0 <__pack_f+0x162>
    26d6:	16 95       	lsr	r17
    26d8:	07 95       	ror	r16
    26da:	f7 94       	ror	r15
    26dc:	e7 94       	ror	r14
    26de:	31 96       	adiw	r30, 0x01	; 1
    26e0:	87 e0       	ldi	r24, 0x07	; 7
    26e2:	16 95       	lsr	r17
    26e4:	07 95       	ror	r16
    26e6:	f7 94       	ror	r15
    26e8:	e7 94       	ror	r14
    26ea:	8a 95       	dec	r24
    26ec:	d1 f7       	brne	.-12     	; 0x26e2 <__pack_f+0x164>
    26ee:	05 c0       	rjmp	.+10     	; 0x26fa <__pack_f+0x17c>
    26f0:	ee 24       	eor	r14, r14
    26f2:	ff 24       	eor	r15, r15
    26f4:	87 01       	movw	r16, r14
    26f6:	ef ef       	ldi	r30, 0xFF	; 255
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	6e 2f       	mov	r22, r30
    26fc:	67 95       	ror	r22
    26fe:	66 27       	eor	r22, r22
    2700:	67 95       	ror	r22
    2702:	90 2f       	mov	r25, r16
    2704:	9f 77       	andi	r25, 0x7F	; 127
    2706:	d7 94       	ror	r13
    2708:	dd 24       	eor	r13, r13
    270a:	d7 94       	ror	r13
    270c:	8e 2f       	mov	r24, r30
    270e:	86 95       	lsr	r24
    2710:	49 2f       	mov	r20, r25
    2712:	46 2b       	or	r20, r22
    2714:	58 2f       	mov	r21, r24
    2716:	5d 29       	or	r21, r13
    2718:	b7 01       	movw	r22, r14
    271a:	ca 01       	movw	r24, r20
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	ff 90       	pop	r15
    2722:	ef 90       	pop	r14
    2724:	df 90       	pop	r13
    2726:	08 95       	ret

00002728 <dtostrf>:
    2728:	ef 92       	push	r14
    272a:	ff 92       	push	r15
    272c:	0f 93       	push	r16
    272e:	1f 93       	push	r17
    2730:	f2 2f       	mov	r31, r18
    2732:	f0 2e       	mov	r15, r16
    2734:	47 fd       	sbrc	r20, 7
    2736:	02 c0       	rjmp	.+4      	; 0x273c <dtostrf+0x14>
    2738:	e4 e0       	ldi	r30, 0x04	; 4
    273a:	01 c0       	rjmp	.+2      	; 0x273e <dtostrf+0x16>
    273c:	e4 e1       	ldi	r30, 0x14	; 20
    273e:	24 2f       	mov	r18, r20
    2740:	33 27       	eor	r19, r19
    2742:	27 fd       	sbrc	r18, 7
    2744:	30 95       	com	r19
    2746:	37 ff       	sbrs	r19, 7
    2748:	03 c0       	rjmp	.+6      	; 0x2750 <dtostrf+0x28>
    274a:	30 95       	com	r19
    274c:	21 95       	neg	r18
    274e:	3f 4f       	sbci	r19, 0xFF	; 255
    2750:	4f 2d       	mov	r20, r15
    2752:	51 2f       	mov	r21, r17
    2754:	0f 2f       	mov	r16, r31
    2756:	ee 2e       	mov	r14, r30
    2758:	0e 94 16 14 	call	0x282c	; 0x282c <dtoa_prf>
    275c:	8f 2d       	mov	r24, r15
    275e:	91 2f       	mov	r25, r17
    2760:	1f 91       	pop	r17
    2762:	0f 91       	pop	r16
    2764:	ff 90       	pop	r15
    2766:	ef 90       	pop	r14
    2768:	08 95       	ret

0000276a <do_random>:
    276a:	a0 e0       	ldi	r26, 0x00	; 0
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	eb eb       	ldi	r30, 0xBB	; 187
    2770:	f3 e1       	ldi	r31, 0x13	; 19
    2772:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__prologue_saves__+0x10>
    2776:	ec 01       	movw	r28, r24
    2778:	a8 80       	ld	r10, Y
    277a:	b9 80       	ldd	r11, Y+1	; 0x01
    277c:	ca 80       	ldd	r12, Y+2	; 0x02
    277e:	db 80       	ldd	r13, Y+3	; 0x03
    2780:	a1 14       	cp	r10, r1
    2782:	b1 04       	cpc	r11, r1
    2784:	c1 04       	cpc	r12, r1
    2786:	d1 04       	cpc	r13, r1
    2788:	41 f4       	brne	.+16     	; 0x279a <do_random+0x30>
    278a:	84 e2       	ldi	r24, 0x24	; 36
    278c:	a8 2e       	mov	r10, r24
    278e:	89 ed       	ldi	r24, 0xD9	; 217
    2790:	b8 2e       	mov	r11, r24
    2792:	8b e5       	ldi	r24, 0x5B	; 91
    2794:	c8 2e       	mov	r12, r24
    2796:	87 e0       	ldi	r24, 0x07	; 7
    2798:	d8 2e       	mov	r13, r24
    279a:	c6 01       	movw	r24, r12
    279c:	b5 01       	movw	r22, r10
    279e:	2d e1       	ldi	r18, 0x1D	; 29
    27a0:	33 ef       	ldi	r19, 0xF3	; 243
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__divmodsi4>
    27aa:	27 ea       	ldi	r18, 0xA7	; 167
    27ac:	31 e4       	ldi	r19, 0x41	; 65
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	50 e0       	ldi	r21, 0x00	; 0
    27b2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__mulsi3>
    27b6:	7b 01       	movw	r14, r22
    27b8:	8c 01       	movw	r16, r24
    27ba:	c6 01       	movw	r24, r12
    27bc:	b5 01       	movw	r22, r10
    27be:	2d e1       	ldi	r18, 0x1D	; 29
    27c0:	33 ef       	ldi	r19, 0xF3	; 243
    27c2:	41 e0       	ldi	r20, 0x01	; 1
    27c4:	50 e0       	ldi	r21, 0x00	; 0
    27c6:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__divmodsi4>
    27ca:	ca 01       	movw	r24, r20
    27cc:	b9 01       	movw	r22, r18
    27ce:	2c ee       	ldi	r18, 0xEC	; 236
    27d0:	34 ef       	ldi	r19, 0xF4	; 244
    27d2:	4f ef       	ldi	r20, 0xFF	; 255
    27d4:	5f ef       	ldi	r21, 0xFF	; 255
    27d6:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__mulsi3>
    27da:	6e 0d       	add	r22, r14
    27dc:	7f 1d       	adc	r23, r15
    27de:	80 1f       	adc	r24, r16
    27e0:	91 1f       	adc	r25, r17
    27e2:	97 ff       	sbrs	r25, 7
    27e4:	04 c0       	rjmp	.+8      	; 0x27ee <do_random+0x84>
    27e6:	61 50       	subi	r22, 0x01	; 1
    27e8:	70 40       	sbci	r23, 0x00	; 0
    27ea:	80 40       	sbci	r24, 0x00	; 0
    27ec:	90 48       	sbci	r25, 0x80	; 128
    27ee:	68 83       	st	Y, r22
    27f0:	79 83       	std	Y+1, r23	; 0x01
    27f2:	8a 83       	std	Y+2, r24	; 0x02
    27f4:	9b 83       	std	Y+3, r25	; 0x03
    27f6:	9b 01       	movw	r18, r22
    27f8:	ac 01       	movw	r20, r24
    27fa:	5f 77       	andi	r21, 0x7F	; 127
    27fc:	b9 01       	movw	r22, r18
    27fe:	ca 01       	movw	r24, r20
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	ea e0       	ldi	r30, 0x0A	; 10
    2806:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__epilogue_restores__+0x10>

0000280a <random_r>:
    280a:	0e 94 b5 13 	call	0x276a	; 0x276a <do_random>
    280e:	08 95       	ret

00002810 <random>:
    2810:	85 e8       	ldi	r24, 0x85	; 133
    2812:	92 e0       	ldi	r25, 0x02	; 2
    2814:	0e 94 b5 13 	call	0x276a	; 0x276a <do_random>
    2818:	08 95       	ret

0000281a <srandom>:
    281a:	60 93 85 02 	sts	0x0285, r22
    281e:	70 93 86 02 	sts	0x0286, r23
    2822:	80 93 87 02 	sts	0x0287, r24
    2826:	90 93 88 02 	sts	0x0288, r25
    282a:	08 95       	ret

0000282c <dtoa_prf>:
    282c:	a9 e0       	ldi	r26, 0x09	; 9
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	ec e1       	ldi	r30, 0x1C	; 28
    2832:	f4 e1       	ldi	r31, 0x14	; 20
    2834:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__prologue_saves__+0x8>
    2838:	6a 01       	movw	r12, r20
    283a:	12 2f       	mov	r17, r18
    283c:	a0 2e       	mov	r10, r16
    283e:	be 2c       	mov	r11, r14
    2840:	2b e3       	ldi	r18, 0x3B	; 59
    2842:	20 17       	cp	r18, r16
    2844:	18 f4       	brcc	.+6      	; 0x284c <dtoa_prf+0x20>
    2846:	2c e3       	ldi	r18, 0x3C	; 60
    2848:	92 2e       	mov	r9, r18
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <dtoa_prf+0x24>
    284c:	90 2e       	mov	r9, r16
    284e:	93 94       	inc	r9
    2850:	ae 01       	movw	r20, r28
    2852:	4f 5f       	subi	r20, 0xFF	; 255
    2854:	5f 4f       	sbci	r21, 0xFF	; 255
    2856:	27 e0       	ldi	r18, 0x07	; 7
    2858:	09 2d       	mov	r16, r9
    285a:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__ftoa_engine>
    285e:	bc 01       	movw	r22, r24
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	e8 2e       	mov	r14, r24
    2864:	ff 24       	eor	r15, r15
    2866:	c7 01       	movw	r24, r14
    2868:	89 70       	andi	r24, 0x09	; 9
    286a:	90 70       	andi	r25, 0x00	; 0
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	11 f4       	brne	.+4      	; 0x2874 <dtoa_prf+0x48>
    2870:	ad e2       	ldi	r26, 0x2D	; 45
    2872:	09 c0       	rjmp	.+18     	; 0x2886 <dtoa_prf+0x5a>
    2874:	b1 fe       	sbrs	r11, 1
    2876:	02 c0       	rjmp	.+4      	; 0x287c <dtoa_prf+0x50>
    2878:	ab e2       	ldi	r26, 0x2B	; 43
    287a:	05 c0       	rjmp	.+10     	; 0x2886 <dtoa_prf+0x5a>
    287c:	b0 fc       	sbrc	r11, 0
    287e:	02 c0       	rjmp	.+4      	; 0x2884 <dtoa_prf+0x58>
    2880:	a0 e0       	ldi	r26, 0x00	; 0
    2882:	01 c0       	rjmp	.+2      	; 0x2886 <dtoa_prf+0x5a>
    2884:	a0 e2       	ldi	r26, 0x20	; 32
    2886:	e3 fe       	sbrs	r14, 3
    2888:	3b c0       	rjmp	.+118    	; 0x2900 <dtoa_prf+0xd4>
    288a:	aa 23       	and	r26, r26
    288c:	11 f4       	brne	.+4      	; 0x2892 <dtoa_prf+0x66>
    288e:	23 e0       	ldi	r18, 0x03	; 3
    2890:	01 c0       	rjmp	.+2      	; 0x2894 <dtoa_prf+0x68>
    2892:	24 e0       	ldi	r18, 0x04	; 4
    2894:	21 17       	cp	r18, r17
    2896:	10 f0       	brcs	.+4      	; 0x289c <dtoa_prf+0x70>
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <dtoa_prf+0x74>
    289c:	12 1b       	sub	r17, r18
    289e:	21 2f       	mov	r18, r17
    28a0:	eb 2c       	mov	r14, r11
    28a2:	b4 fe       	sbrs	r11, 4
    28a4:	02 c0       	rjmp	.+4      	; 0x28aa <dtoa_prf+0x7e>
    28a6:	32 2f       	mov	r19, r18
    28a8:	0a c0       	rjmp	.+20     	; 0x28be <dtoa_prf+0x92>
    28aa:	f6 01       	movw	r30, r12
    28ac:	32 2f       	mov	r19, r18
    28ae:	80 e2       	ldi	r24, 0x20	; 32
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <dtoa_prf+0x8a>
    28b2:	81 93       	st	Z+, r24
    28b4:	31 50       	subi	r19, 0x01	; 1
    28b6:	33 23       	and	r19, r19
    28b8:	e1 f7       	brne	.-8      	; 0x28b2 <dtoa_prf+0x86>
    28ba:	c2 0e       	add	r12, r18
    28bc:	d1 1c       	adc	r13, r1
    28be:	aa 23       	and	r26, r26
    28c0:	19 f0       	breq	.+6      	; 0x28c8 <dtoa_prf+0x9c>
    28c2:	f6 01       	movw	r30, r12
    28c4:	a1 93       	st	Z+, r26
    28c6:	6f 01       	movw	r12, r30
    28c8:	f6 01       	movw	r30, r12
    28ca:	31 96       	adiw	r30, 0x01	; 1
    28cc:	e2 fe       	sbrs	r14, 2
    28ce:	05 c0       	rjmp	.+10     	; 0x28da <dtoa_prf+0xae>
    28d0:	9e e4       	ldi	r25, 0x4E	; 78
    28d2:	d6 01       	movw	r26, r12
    28d4:	9c 93       	st	X, r25
    28d6:	81 e4       	ldi	r24, 0x41	; 65
    28d8:	04 c0       	rjmp	.+8      	; 0x28e2 <dtoa_prf+0xb6>
    28da:	9e e6       	ldi	r25, 0x6E	; 110
    28dc:	d6 01       	movw	r26, r12
    28de:	9c 93       	st	X, r25
    28e0:	81 e6       	ldi	r24, 0x61	; 97
    28e2:	11 96       	adiw	r26, 0x01	; 1
    28e4:	8c 93       	st	X, r24
    28e6:	91 83       	std	Z+1, r25	; 0x01
    28e8:	32 96       	adiw	r30, 0x02	; 2
    28ea:	df 01       	movw	r26, r30
    28ec:	83 2f       	mov	r24, r19
    28ee:	90 e2       	ldi	r25, 0x20	; 32
    28f0:	02 c0       	rjmp	.+4      	; 0x28f6 <dtoa_prf+0xca>
    28f2:	9d 93       	st	X+, r25
    28f4:	81 50       	subi	r24, 0x01	; 1
    28f6:	88 23       	and	r24, r24
    28f8:	e1 f7       	brne	.-8      	; 0x28f2 <dtoa_prf+0xc6>
    28fa:	e3 0f       	add	r30, r19
    28fc:	f1 1d       	adc	r31, r1
    28fe:	40 c0       	rjmp	.+128    	; 0x2980 <dtoa_prf+0x154>
    2900:	e2 fe       	sbrs	r14, 2
    2902:	42 c0       	rjmp	.+132    	; 0x2988 <dtoa_prf+0x15c>
    2904:	aa 23       	and	r26, r26
    2906:	11 f4       	brne	.+4      	; 0x290c <dtoa_prf+0xe0>
    2908:	23 e0       	ldi	r18, 0x03	; 3
    290a:	01 c0       	rjmp	.+2      	; 0x290e <dtoa_prf+0xe2>
    290c:	24 e0       	ldi	r18, 0x04	; 4
    290e:	21 17       	cp	r18, r17
    2910:	10 f0       	brcs	.+4      	; 0x2916 <dtoa_prf+0xea>
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	02 c0       	rjmp	.+4      	; 0x291a <dtoa_prf+0xee>
    2916:	12 1b       	sub	r17, r18
    2918:	21 2f       	mov	r18, r17
    291a:	eb 2c       	mov	r14, r11
    291c:	b4 fe       	sbrs	r11, 4
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <dtoa_prf+0xf8>
    2920:	92 2f       	mov	r25, r18
    2922:	0a c0       	rjmp	.+20     	; 0x2938 <dtoa_prf+0x10c>
    2924:	f6 01       	movw	r30, r12
    2926:	92 2f       	mov	r25, r18
    2928:	80 e2       	ldi	r24, 0x20	; 32
    292a:	02 c0       	rjmp	.+4      	; 0x2930 <dtoa_prf+0x104>
    292c:	81 93       	st	Z+, r24
    292e:	91 50       	subi	r25, 0x01	; 1
    2930:	99 23       	and	r25, r25
    2932:	e1 f7       	brne	.-8      	; 0x292c <dtoa_prf+0x100>
    2934:	c2 0e       	add	r12, r18
    2936:	d1 1c       	adc	r13, r1
    2938:	aa 23       	and	r26, r26
    293a:	19 f0       	breq	.+6      	; 0x2942 <dtoa_prf+0x116>
    293c:	f6 01       	movw	r30, r12
    293e:	a1 93       	st	Z+, r26
    2940:	6f 01       	movw	r12, r30
    2942:	f6 01       	movw	r30, r12
    2944:	31 96       	adiw	r30, 0x01	; 1
    2946:	e2 fe       	sbrs	r14, 2
    2948:	08 c0       	rjmp	.+16     	; 0x295a <dtoa_prf+0x12e>
    294a:	89 e4       	ldi	r24, 0x49	; 73
    294c:	d6 01       	movw	r26, r12
    294e:	8c 93       	st	X, r24
    2950:	8e e4       	ldi	r24, 0x4E	; 78
    2952:	11 96       	adiw	r26, 0x01	; 1
    2954:	8c 93       	st	X, r24
    2956:	86 e4       	ldi	r24, 0x46	; 70
    2958:	07 c0       	rjmp	.+14     	; 0x2968 <dtoa_prf+0x13c>
    295a:	89 e6       	ldi	r24, 0x69	; 105
    295c:	d6 01       	movw	r26, r12
    295e:	8c 93       	st	X, r24
    2960:	8e e6       	ldi	r24, 0x6E	; 110
    2962:	11 96       	adiw	r26, 0x01	; 1
    2964:	8c 93       	st	X, r24
    2966:	86 e6       	ldi	r24, 0x66	; 102
    2968:	81 83       	std	Z+1, r24	; 0x01
    296a:	32 96       	adiw	r30, 0x02	; 2
    296c:	df 01       	movw	r26, r30
    296e:	89 2f       	mov	r24, r25
    2970:	20 e2       	ldi	r18, 0x20	; 32
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <dtoa_prf+0x14c>
    2974:	2d 93       	st	X+, r18
    2976:	81 50       	subi	r24, 0x01	; 1
    2978:	88 23       	and	r24, r24
    297a:	e1 f7       	brne	.-8      	; 0x2974 <dtoa_prf+0x148>
    297c:	e9 0f       	add	r30, r25
    297e:	f1 1d       	adc	r31, r1
    2980:	10 82       	st	Z, r1
    2982:	2e ef       	ldi	r18, 0xFE	; 254
    2984:	3f ef       	ldi	r19, 0xFF	; 255
    2986:	af c0       	rjmp	.+350    	; 0x2ae6 <dtoa_prf+0x2ba>
    2988:	16 16       	cp	r1, r22
    298a:	17 06       	cpc	r1, r23
    298c:	1c f0       	brlt	.+6      	; 0x2994 <dtoa_prf+0x168>
    298e:	41 e0       	ldi	r20, 0x01	; 1
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	03 c0       	rjmp	.+6      	; 0x299a <dtoa_prf+0x16e>
    2994:	ab 01       	movw	r20, r22
    2996:	4f 5f       	subi	r20, 0xFF	; 255
    2998:	5f 4f       	sbci	r21, 0xFF	; 255
    299a:	aa 20       	and	r10, r10
    299c:	19 f4       	brne	.+6      	; 0x29a4 <dtoa_prf+0x178>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	03 c0       	rjmp	.+6      	; 0x29aa <dtoa_prf+0x17e>
    29a4:	8a 2d       	mov	r24, r10
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	01 96       	adiw	r24, 0x01	; 1
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	aa 23       	and	r26, r26
    29b0:	11 f0       	breq	.+4      	; 0x29b6 <dtoa_prf+0x18a>
    29b2:	21 e0       	ldi	r18, 0x01	; 1
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	24 0f       	add	r18, r20
    29b8:	35 1f       	adc	r19, r21
    29ba:	28 0f       	add	r18, r24
    29bc:	39 1f       	adc	r19, r25
    29be:	81 2f       	mov	r24, r17
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	28 17       	cp	r18, r24
    29c4:	39 07       	cpc	r19, r25
    29c6:	14 f0       	brlt	.+4      	; 0x29cc <dtoa_prf+0x1a0>
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <dtoa_prf+0x1a4>
    29cc:	12 1b       	sub	r17, r18
    29ce:	21 2f       	mov	r18, r17
    29d0:	4b 2d       	mov	r20, r11
    29d2:	50 e0       	ldi	r21, 0x00	; 0
    29d4:	ca 01       	movw	r24, r20
    29d6:	80 71       	andi	r24, 0x10	; 16
    29d8:	90 70       	andi	r25, 0x00	; 0
    29da:	b4 fc       	sbrc	r11, 4
    29dc:	0d c0       	rjmp	.+26     	; 0x29f8 <dtoa_prf+0x1cc>
    29de:	b3 fc       	sbrc	r11, 3
    29e0:	0b c0       	rjmp	.+22     	; 0x29f8 <dtoa_prf+0x1cc>
    29e2:	f6 01       	movw	r30, r12
    29e4:	32 2f       	mov	r19, r18
    29e6:	40 e2       	ldi	r20, 0x20	; 32
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <dtoa_prf+0x1c2>
    29ea:	41 93       	st	Z+, r20
    29ec:	31 50       	subi	r19, 0x01	; 1
    29ee:	33 23       	and	r19, r19
    29f0:	e1 f7       	brne	.-8      	; 0x29ea <dtoa_prf+0x1be>
    29f2:	c2 0e       	add	r12, r18
    29f4:	d1 1c       	adc	r13, r1
    29f6:	01 c0       	rjmp	.+2      	; 0x29fa <dtoa_prf+0x1ce>
    29f8:	32 2f       	mov	r19, r18
    29fa:	aa 23       	and	r26, r26
    29fc:	19 f0       	breq	.+6      	; 0x2a04 <dtoa_prf+0x1d8>
    29fe:	f6 01       	movw	r30, r12
    2a00:	a1 93       	st	Z+, r26
    2a02:	6f 01       	movw	r12, r30
    2a04:	89 2b       	or	r24, r25
    2a06:	11 f0       	breq	.+4      	; 0x2a0c <dtoa_prf+0x1e0>
    2a08:	13 2f       	mov	r17, r19
    2a0a:	0a c0       	rjmp	.+20     	; 0x2a20 <dtoa_prf+0x1f4>
    2a0c:	f6 01       	movw	r30, r12
    2a0e:	13 2f       	mov	r17, r19
    2a10:	80 e3       	ldi	r24, 0x30	; 48
    2a12:	02 c0       	rjmp	.+4      	; 0x2a18 <dtoa_prf+0x1ec>
    2a14:	81 93       	st	Z+, r24
    2a16:	11 50       	subi	r17, 0x01	; 1
    2a18:	11 23       	and	r17, r17
    2a1a:	e1 f7       	brne	.-8      	; 0x2a14 <dtoa_prf+0x1e8>
    2a1c:	c3 0e       	add	r12, r19
    2a1e:	d1 1c       	adc	r13, r1
    2a20:	09 2d       	mov	r16, r9
    2a22:	06 0f       	add	r16, r22
    2a24:	ba 80       	ldd	r11, Y+2	; 0x02
    2a26:	90 e1       	ldi	r25, 0x10	; 16
    2a28:	89 2e       	mov	r8, r25
    2a2a:	91 2c       	mov	r9, r1
    2a2c:	8e 20       	and	r8, r14
    2a2e:	9f 20       	and	r9, r15
    2a30:	e4 fe       	sbrs	r14, 4
    2a32:	04 c0       	rjmp	.+8      	; 0x2a3c <dtoa_prf+0x210>
    2a34:	f1 e3       	ldi	r31, 0x31	; 49
    2a36:	bf 16       	cp	r11, r31
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <dtoa_prf+0x210>
    2a3a:	01 50       	subi	r16, 0x01	; 1
    2a3c:	10 16       	cp	r1, r16
    2a3e:	14 f0       	brlt	.+4      	; 0x2a44 <dtoa_prf+0x218>
    2a40:	01 e0       	ldi	r16, 0x01	; 1
    2a42:	03 c0       	rjmp	.+6      	; 0x2a4a <dtoa_prf+0x21e>
    2a44:	09 30       	cpi	r16, 0x09	; 9
    2a46:	08 f0       	brcs	.+2      	; 0x2a4a <dtoa_prf+0x21e>
    2a48:	08 e0       	ldi	r16, 0x08	; 8
    2a4a:	9b 01       	movw	r18, r22
    2a4c:	77 ff       	sbrs	r23, 7
    2a4e:	02 c0       	rjmp	.+4      	; 0x2a54 <dtoa_prf+0x228>
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	cb 01       	movw	r24, r22
    2a56:	01 96       	adiw	r24, 0x01	; 1
    2a58:	82 1b       	sub	r24, r18
    2a5a:	93 0b       	sbc	r25, r19
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	31 96       	adiw	r30, 0x01	; 1
    2a60:	e8 0f       	add	r30, r24
    2a62:	f9 1f       	adc	r31, r25
    2a64:	8e e2       	ldi	r24, 0x2E	; 46
    2a66:	f8 2e       	mov	r15, r24
    2a68:	3b 01       	movw	r6, r22
    2a6a:	60 1a       	sub	r6, r16
    2a6c:	71 08       	sbc	r7, r1
    2a6e:	8a 2d       	mov	r24, r10
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	44 27       	eor	r20, r20
    2a74:	55 27       	eor	r21, r21
    2a76:	48 1b       	sub	r20, r24
    2a78:	59 0b       	sbc	r21, r25
    2a7a:	8f ef       	ldi	r24, 0xFF	; 255
    2a7c:	2f 3f       	cpi	r18, 0xFF	; 255
    2a7e:	38 07       	cpc	r19, r24
    2a80:	19 f4       	brne	.+6      	; 0x2a88 <dtoa_prf+0x25c>
    2a82:	d6 01       	movw	r26, r12
    2a84:	fd 92       	st	X+, r15
    2a86:	6d 01       	movw	r12, r26
    2a88:	62 17       	cp	r22, r18
    2a8a:	73 07       	cpc	r23, r19
    2a8c:	2c f0       	brlt	.+10     	; 0x2a98 <dtoa_prf+0x26c>
    2a8e:	62 16       	cp	r6, r18
    2a90:	73 06       	cpc	r7, r19
    2a92:	14 f4       	brge	.+4      	; 0x2a98 <dtoa_prf+0x26c>
    2a94:	80 81       	ld	r24, Z
    2a96:	01 c0       	rjmp	.+2      	; 0x2a9a <dtoa_prf+0x26e>
    2a98:	80 e3       	ldi	r24, 0x30	; 48
    2a9a:	21 50       	subi	r18, 0x01	; 1
    2a9c:	30 40       	sbci	r19, 0x00	; 0
    2a9e:	31 96       	adiw	r30, 0x01	; 1
    2aa0:	24 17       	cp	r18, r20
    2aa2:	35 07       	cpc	r19, r21
    2aa4:	24 f0       	brlt	.+8      	; 0x2aae <dtoa_prf+0x282>
    2aa6:	d6 01       	movw	r26, r12
    2aa8:	8d 93       	st	X+, r24
    2aaa:	6d 01       	movw	r12, r26
    2aac:	e6 cf       	rjmp	.-52     	; 0x2a7a <dtoa_prf+0x24e>
    2aae:	26 17       	cp	r18, r22
    2ab0:	37 07       	cpc	r19, r23
    2ab2:	49 f4       	brne	.+18     	; 0x2ac6 <dtoa_prf+0x29a>
    2ab4:	b5 e3       	ldi	r27, 0x35	; 53
    2ab6:	bb 15       	cp	r27, r11
    2ab8:	28 f0       	brcs	.+10     	; 0x2ac4 <dtoa_prf+0x298>
    2aba:	bb 16       	cp	r11, r27
    2abc:	21 f4       	brne	.+8      	; 0x2ac6 <dtoa_prf+0x29a>
    2abe:	81 14       	cp	r8, r1
    2ac0:	91 04       	cpc	r9, r1
    2ac2:	09 f4       	brne	.+2      	; 0x2ac6 <dtoa_prf+0x29a>
    2ac4:	81 e3       	ldi	r24, 0x31	; 49
    2ac6:	f6 01       	movw	r30, r12
    2ac8:	81 93       	st	Z+, r24
    2aca:	d6 01       	movw	r26, r12
    2acc:	81 2f       	mov	r24, r17
    2ace:	90 e2       	ldi	r25, 0x20	; 32
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <dtoa_prf+0x2aa>
    2ad2:	9c 93       	st	X, r25
    2ad4:	81 50       	subi	r24, 0x01	; 1
    2ad6:	11 96       	adiw	r26, 0x01	; 1
    2ad8:	88 23       	and	r24, r24
    2ada:	d9 f7       	brne	.-10     	; 0x2ad2 <dtoa_prf+0x2a6>
    2adc:	e1 0f       	add	r30, r17
    2ade:	f1 1d       	adc	r31, r1
    2ae0:	10 82       	st	Z, r1
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	c9 01       	movw	r24, r18
    2ae8:	29 96       	adiw	r28, 0x09	; 9
    2aea:	ee e0       	ldi	r30, 0x0E	; 14
    2aec:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__epilogue_restores__+0x8>

00002af0 <__ftoa_engine>:
    2af0:	28 30       	cpi	r18, 0x08	; 8
    2af2:	08 f0       	brcs	.+2      	; 0x2af6 <__ftoa_engine+0x6>
    2af4:	27 e0       	ldi	r18, 0x07	; 7
    2af6:	33 27       	eor	r19, r19
    2af8:	da 01       	movw	r26, r20
    2afa:	99 0f       	add	r25, r25
    2afc:	31 1d       	adc	r19, r1
    2afe:	87 fd       	sbrc	r24, 7
    2b00:	91 60       	ori	r25, 0x01	; 1
    2b02:	00 96       	adiw	r24, 0x00	; 0
    2b04:	61 05       	cpc	r22, r1
    2b06:	71 05       	cpc	r23, r1
    2b08:	39 f4       	brne	.+14     	; 0x2b18 <__ftoa_engine+0x28>
    2b0a:	32 60       	ori	r19, 0x02	; 2
    2b0c:	2e 5f       	subi	r18, 0xFE	; 254
    2b0e:	3d 93       	st	X+, r19
    2b10:	30 e3       	ldi	r19, 0x30	; 48
    2b12:	2a 95       	dec	r18
    2b14:	e1 f7       	brne	.-8      	; 0x2b0e <__ftoa_engine+0x1e>
    2b16:	08 95       	ret
    2b18:	9f 3f       	cpi	r25, 0xFF	; 255
    2b1a:	30 f0       	brcs	.+12     	; 0x2b28 <__ftoa_engine+0x38>
    2b1c:	80 38       	cpi	r24, 0x80	; 128
    2b1e:	71 05       	cpc	r23, r1
    2b20:	61 05       	cpc	r22, r1
    2b22:	09 f0       	breq	.+2      	; 0x2b26 <__ftoa_engine+0x36>
    2b24:	3c 5f       	subi	r19, 0xFC	; 252
    2b26:	3c 5f       	subi	r19, 0xFC	; 252
    2b28:	3d 93       	st	X+, r19
    2b2a:	91 30       	cpi	r25, 0x01	; 1
    2b2c:	08 f0       	brcs	.+2      	; 0x2b30 <__ftoa_engine+0x40>
    2b2e:	80 68       	ori	r24, 0x80	; 128
    2b30:	91 1d       	adc	r25, r1
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	1f 93       	push	r17
    2b38:	0f 93       	push	r16
    2b3a:	ff 92       	push	r15
    2b3c:	ef 92       	push	r14
    2b3e:	19 2f       	mov	r17, r25
    2b40:	98 7f       	andi	r25, 0xF8	; 248
    2b42:	96 95       	lsr	r25
    2b44:	e9 2f       	mov	r30, r25
    2b46:	96 95       	lsr	r25
    2b48:	96 95       	lsr	r25
    2b4a:	e9 0f       	add	r30, r25
    2b4c:	ff 27       	eor	r31, r31
    2b4e:	ec 5d       	subi	r30, 0xDC	; 220
    2b50:	fe 4f       	sbci	r31, 0xFE	; 254
    2b52:	99 27       	eor	r25, r25
    2b54:	33 27       	eor	r19, r19
    2b56:	ee 24       	eor	r14, r14
    2b58:	ff 24       	eor	r15, r15
    2b5a:	a7 01       	movw	r20, r14
    2b5c:	e7 01       	movw	r28, r14
    2b5e:	05 90       	lpm	r0, Z+
    2b60:	08 94       	sec
    2b62:	07 94       	ror	r0
    2b64:	28 f4       	brcc	.+10     	; 0x2b70 <__ftoa_engine+0x80>
    2b66:	36 0f       	add	r19, r22
    2b68:	e7 1e       	adc	r14, r23
    2b6a:	f8 1e       	adc	r15, r24
    2b6c:	49 1f       	adc	r20, r25
    2b6e:	51 1d       	adc	r21, r1
    2b70:	66 0f       	add	r22, r22
    2b72:	77 1f       	adc	r23, r23
    2b74:	88 1f       	adc	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	06 94       	lsr	r0
    2b7a:	a1 f7       	brne	.-24     	; 0x2b64 <__ftoa_engine+0x74>
    2b7c:	05 90       	lpm	r0, Z+
    2b7e:	07 94       	ror	r0
    2b80:	28 f4       	brcc	.+10     	; 0x2b8c <__ftoa_engine+0x9c>
    2b82:	e7 0e       	add	r14, r23
    2b84:	f8 1e       	adc	r15, r24
    2b86:	49 1f       	adc	r20, r25
    2b88:	56 1f       	adc	r21, r22
    2b8a:	c1 1d       	adc	r28, r1
    2b8c:	77 0f       	add	r23, r23
    2b8e:	88 1f       	adc	r24, r24
    2b90:	99 1f       	adc	r25, r25
    2b92:	66 1f       	adc	r22, r22
    2b94:	06 94       	lsr	r0
    2b96:	a1 f7       	brne	.-24     	; 0x2b80 <__ftoa_engine+0x90>
    2b98:	05 90       	lpm	r0, Z+
    2b9a:	07 94       	ror	r0
    2b9c:	28 f4       	brcc	.+10     	; 0x2ba8 <__ftoa_engine+0xb8>
    2b9e:	f8 0e       	add	r15, r24
    2ba0:	49 1f       	adc	r20, r25
    2ba2:	56 1f       	adc	r21, r22
    2ba4:	c7 1f       	adc	r28, r23
    2ba6:	d1 1d       	adc	r29, r1
    2ba8:	88 0f       	add	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	66 1f       	adc	r22, r22
    2bae:	77 1f       	adc	r23, r23
    2bb0:	06 94       	lsr	r0
    2bb2:	a1 f7       	brne	.-24     	; 0x2b9c <__ftoa_engine+0xac>
    2bb4:	05 90       	lpm	r0, Z+
    2bb6:	07 94       	ror	r0
    2bb8:	20 f4       	brcc	.+8      	; 0x2bc2 <__ftoa_engine+0xd2>
    2bba:	49 0f       	add	r20, r25
    2bbc:	56 1f       	adc	r21, r22
    2bbe:	c7 1f       	adc	r28, r23
    2bc0:	d8 1f       	adc	r29, r24
    2bc2:	99 0f       	add	r25, r25
    2bc4:	66 1f       	adc	r22, r22
    2bc6:	77 1f       	adc	r23, r23
    2bc8:	88 1f       	adc	r24, r24
    2bca:	06 94       	lsr	r0
    2bcc:	a9 f7       	brne	.-22     	; 0x2bb8 <__ftoa_engine+0xc8>
    2bce:	84 91       	lpm	r24, Z+
    2bd0:	10 95       	com	r17
    2bd2:	17 70       	andi	r17, 0x07	; 7
    2bd4:	41 f0       	breq	.+16     	; 0x2be6 <__ftoa_engine+0xf6>
    2bd6:	d6 95       	lsr	r29
    2bd8:	c7 95       	ror	r28
    2bda:	57 95       	ror	r21
    2bdc:	47 95       	ror	r20
    2bde:	f7 94       	ror	r15
    2be0:	e7 94       	ror	r14
    2be2:	1a 95       	dec	r17
    2be4:	c1 f7       	brne	.-16     	; 0x2bd6 <__ftoa_engine+0xe6>
    2be6:	ea ec       	ldi	r30, 0xCA	; 202
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	68 94       	set
    2bec:	15 90       	lpm	r1, Z+
    2bee:	15 91       	lpm	r17, Z+
    2bf0:	35 91       	lpm	r19, Z+
    2bf2:	65 91       	lpm	r22, Z+
    2bf4:	95 91       	lpm	r25, Z+
    2bf6:	05 90       	lpm	r0, Z+
    2bf8:	7f e2       	ldi	r23, 0x2F	; 47
    2bfa:	73 95       	inc	r23
    2bfc:	e1 18       	sub	r14, r1
    2bfe:	f1 0a       	sbc	r15, r17
    2c00:	43 0b       	sbc	r20, r19
    2c02:	56 0b       	sbc	r21, r22
    2c04:	c9 0b       	sbc	r28, r25
    2c06:	d0 09       	sbc	r29, r0
    2c08:	c0 f7       	brcc	.-16     	; 0x2bfa <__ftoa_engine+0x10a>
    2c0a:	e1 0c       	add	r14, r1
    2c0c:	f1 1e       	adc	r15, r17
    2c0e:	43 1f       	adc	r20, r19
    2c10:	56 1f       	adc	r21, r22
    2c12:	c9 1f       	adc	r28, r25
    2c14:	d0 1d       	adc	r29, r0
    2c16:	7e f4       	brtc	.+30     	; 0x2c36 <__ftoa_engine+0x146>
    2c18:	70 33       	cpi	r23, 0x30	; 48
    2c1a:	11 f4       	brne	.+4      	; 0x2c20 <__ftoa_engine+0x130>
    2c1c:	8a 95       	dec	r24
    2c1e:	e6 cf       	rjmp	.-52     	; 0x2bec <__ftoa_engine+0xfc>
    2c20:	e8 94       	clt
    2c22:	01 50       	subi	r16, 0x01	; 1
    2c24:	30 f0       	brcs	.+12     	; 0x2c32 <__ftoa_engine+0x142>
    2c26:	08 0f       	add	r16, r24
    2c28:	0a f4       	brpl	.+2      	; 0x2c2c <__ftoa_engine+0x13c>
    2c2a:	00 27       	eor	r16, r16
    2c2c:	02 17       	cp	r16, r18
    2c2e:	08 f4       	brcc	.+2      	; 0x2c32 <__ftoa_engine+0x142>
    2c30:	20 2f       	mov	r18, r16
    2c32:	23 95       	inc	r18
    2c34:	02 2f       	mov	r16, r18
    2c36:	7a 33       	cpi	r23, 0x3A	; 58
    2c38:	28 f0       	brcs	.+10     	; 0x2c44 <__ftoa_engine+0x154>
    2c3a:	79 e3       	ldi	r23, 0x39	; 57
    2c3c:	7d 93       	st	X+, r23
    2c3e:	2a 95       	dec	r18
    2c40:	e9 f7       	brne	.-6      	; 0x2c3c <__ftoa_engine+0x14c>
    2c42:	10 c0       	rjmp	.+32     	; 0x2c64 <__ftoa_engine+0x174>
    2c44:	7d 93       	st	X+, r23
    2c46:	2a 95       	dec	r18
    2c48:	89 f6       	brne	.-94     	; 0x2bec <__ftoa_engine+0xfc>
    2c4a:	06 94       	lsr	r0
    2c4c:	97 95       	ror	r25
    2c4e:	67 95       	ror	r22
    2c50:	37 95       	ror	r19
    2c52:	17 95       	ror	r17
    2c54:	17 94       	ror	r1
    2c56:	e1 18       	sub	r14, r1
    2c58:	f1 0a       	sbc	r15, r17
    2c5a:	43 0b       	sbc	r20, r19
    2c5c:	56 0b       	sbc	r21, r22
    2c5e:	c9 0b       	sbc	r28, r25
    2c60:	d0 09       	sbc	r29, r0
    2c62:	98 f0       	brcs	.+38     	; 0x2c8a <__ftoa_engine+0x19a>
    2c64:	23 95       	inc	r18
    2c66:	7e 91       	ld	r23, -X
    2c68:	73 95       	inc	r23
    2c6a:	7a 33       	cpi	r23, 0x3A	; 58
    2c6c:	08 f0       	brcs	.+2      	; 0x2c70 <__ftoa_engine+0x180>
    2c6e:	70 e3       	ldi	r23, 0x30	; 48
    2c70:	7c 93       	st	X, r23
    2c72:	20 13       	cpse	r18, r16
    2c74:	b8 f7       	brcc	.-18     	; 0x2c64 <__ftoa_engine+0x174>
    2c76:	7e 91       	ld	r23, -X
    2c78:	70 61       	ori	r23, 0x10	; 16
    2c7a:	7d 93       	st	X+, r23
    2c7c:	30 f0       	brcs	.+12     	; 0x2c8a <__ftoa_engine+0x19a>
    2c7e:	83 95       	inc	r24
    2c80:	71 e3       	ldi	r23, 0x31	; 49
    2c82:	7d 93       	st	X+, r23
    2c84:	70 e3       	ldi	r23, 0x30	; 48
    2c86:	2a 95       	dec	r18
    2c88:	e1 f7       	brne	.-8      	; 0x2c82 <__ftoa_engine+0x192>
    2c8a:	11 24       	eor	r1, r1
    2c8c:	ef 90       	pop	r14
    2c8e:	ff 90       	pop	r15
    2c90:	0f 91       	pop	r16
    2c92:	1f 91       	pop	r17
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	99 27       	eor	r25, r25
    2c9a:	87 fd       	sbrc	r24, 7
    2c9c:	90 95       	com	r25
    2c9e:	08 95       	ret

00002ca0 <__mulsi3>:
    2ca0:	62 9f       	mul	r22, r18
    2ca2:	d0 01       	movw	r26, r0
    2ca4:	73 9f       	mul	r23, r19
    2ca6:	f0 01       	movw	r30, r0
    2ca8:	82 9f       	mul	r24, r18
    2caa:	e0 0d       	add	r30, r0
    2cac:	f1 1d       	adc	r31, r1
    2cae:	64 9f       	mul	r22, r20
    2cb0:	e0 0d       	add	r30, r0
    2cb2:	f1 1d       	adc	r31, r1
    2cb4:	92 9f       	mul	r25, r18
    2cb6:	f0 0d       	add	r31, r0
    2cb8:	83 9f       	mul	r24, r19
    2cba:	f0 0d       	add	r31, r0
    2cbc:	74 9f       	mul	r23, r20
    2cbe:	f0 0d       	add	r31, r0
    2cc0:	65 9f       	mul	r22, r21
    2cc2:	f0 0d       	add	r31, r0
    2cc4:	99 27       	eor	r25, r25
    2cc6:	72 9f       	mul	r23, r18
    2cc8:	b0 0d       	add	r27, r0
    2cca:	e1 1d       	adc	r30, r1
    2ccc:	f9 1f       	adc	r31, r25
    2cce:	63 9f       	mul	r22, r19
    2cd0:	b0 0d       	add	r27, r0
    2cd2:	e1 1d       	adc	r30, r1
    2cd4:	f9 1f       	adc	r31, r25
    2cd6:	bd 01       	movw	r22, r26
    2cd8:	cf 01       	movw	r24, r30
    2cda:	11 24       	eor	r1, r1
    2cdc:	08 95       	ret

00002cde <__divmodsi4>:
    2cde:	97 fb       	bst	r25, 7
    2ce0:	09 2e       	mov	r0, r25
    2ce2:	05 26       	eor	r0, r21
    2ce4:	0e d0       	rcall	.+28     	; 0x2d02 <__divmodsi4_neg1>
    2ce6:	57 fd       	sbrc	r21, 7
    2ce8:	04 d0       	rcall	.+8      	; 0x2cf2 <__divmodsi4_neg2>
    2cea:	14 d0       	rcall	.+40     	; 0x2d14 <__udivmodsi4>
    2cec:	0a d0       	rcall	.+20     	; 0x2d02 <__divmodsi4_neg1>
    2cee:	00 1c       	adc	r0, r0
    2cf0:	38 f4       	brcc	.+14     	; 0x2d00 <__divmodsi4_exit>

00002cf2 <__divmodsi4_neg2>:
    2cf2:	50 95       	com	r21
    2cf4:	40 95       	com	r20
    2cf6:	30 95       	com	r19
    2cf8:	21 95       	neg	r18
    2cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfc:	4f 4f       	sbci	r20, 0xFF	; 255
    2cfe:	5f 4f       	sbci	r21, 0xFF	; 255

00002d00 <__divmodsi4_exit>:
    2d00:	08 95       	ret

00002d02 <__divmodsi4_neg1>:
    2d02:	f6 f7       	brtc	.-4      	; 0x2d00 <__divmodsi4_exit>
    2d04:	90 95       	com	r25
    2d06:	80 95       	com	r24
    2d08:	70 95       	com	r23
    2d0a:	61 95       	neg	r22
    2d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d10:	9f 4f       	sbci	r25, 0xFF	; 255
    2d12:	08 95       	ret

00002d14 <__udivmodsi4>:
    2d14:	a1 e2       	ldi	r26, 0x21	; 33
    2d16:	1a 2e       	mov	r1, r26
    2d18:	aa 1b       	sub	r26, r26
    2d1a:	bb 1b       	sub	r27, r27
    2d1c:	fd 01       	movw	r30, r26
    2d1e:	0d c0       	rjmp	.+26     	; 0x2d3a <__udivmodsi4_ep>

00002d20 <__udivmodsi4_loop>:
    2d20:	aa 1f       	adc	r26, r26
    2d22:	bb 1f       	adc	r27, r27
    2d24:	ee 1f       	adc	r30, r30
    2d26:	ff 1f       	adc	r31, r31
    2d28:	a2 17       	cp	r26, r18
    2d2a:	b3 07       	cpc	r27, r19
    2d2c:	e4 07       	cpc	r30, r20
    2d2e:	f5 07       	cpc	r31, r21
    2d30:	20 f0       	brcs	.+8      	; 0x2d3a <__udivmodsi4_ep>
    2d32:	a2 1b       	sub	r26, r18
    2d34:	b3 0b       	sbc	r27, r19
    2d36:	e4 0b       	sbc	r30, r20
    2d38:	f5 0b       	sbc	r31, r21

00002d3a <__udivmodsi4_ep>:
    2d3a:	66 1f       	adc	r22, r22
    2d3c:	77 1f       	adc	r23, r23
    2d3e:	88 1f       	adc	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	1a 94       	dec	r1
    2d44:	69 f7       	brne	.-38     	; 0x2d20 <__udivmodsi4_loop>
    2d46:	60 95       	com	r22
    2d48:	70 95       	com	r23
    2d4a:	80 95       	com	r24
    2d4c:	90 95       	com	r25
    2d4e:	9b 01       	movw	r18, r22
    2d50:	ac 01       	movw	r20, r24
    2d52:	bd 01       	movw	r22, r26
    2d54:	cf 01       	movw	r24, r30
    2d56:	08 95       	ret

00002d58 <__prologue_saves__>:
    2d58:	2f 92       	push	r2
    2d5a:	3f 92       	push	r3
    2d5c:	4f 92       	push	r4
    2d5e:	5f 92       	push	r5
    2d60:	6f 92       	push	r6
    2d62:	7f 92       	push	r7
    2d64:	8f 92       	push	r8
    2d66:	9f 92       	push	r9
    2d68:	af 92       	push	r10
    2d6a:	bf 92       	push	r11
    2d6c:	cf 92       	push	r12
    2d6e:	df 92       	push	r13
    2d70:	ef 92       	push	r14
    2d72:	ff 92       	push	r15
    2d74:	0f 93       	push	r16
    2d76:	1f 93       	push	r17
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	ca 1b       	sub	r28, r26
    2d82:	db 0b       	sbc	r29, r27
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61
    2d8e:	09 94       	ijmp

00002d90 <__epilogue_restores__>:
    2d90:	2a 88       	ldd	r2, Y+18	; 0x12
    2d92:	39 88       	ldd	r3, Y+17	; 0x11
    2d94:	48 88       	ldd	r4, Y+16	; 0x10
    2d96:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d98:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2da0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2da2:	b9 84       	ldd	r11, Y+9	; 0x09
    2da4:	c8 84       	ldd	r12, Y+8	; 0x08
    2da6:	df 80       	ldd	r13, Y+7	; 0x07
    2da8:	ee 80       	ldd	r14, Y+6	; 0x06
    2daa:	fd 80       	ldd	r15, Y+5	; 0x05
    2dac:	0c 81       	ldd	r16, Y+4	; 0x04
    2dae:	1b 81       	ldd	r17, Y+3	; 0x03
    2db0:	aa 81       	ldd	r26, Y+2	; 0x02
    2db2:	b9 81       	ldd	r27, Y+1	; 0x01
    2db4:	ce 0f       	add	r28, r30
    2db6:	d1 1d       	adc	r29, r1
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	ed 01       	movw	r28, r26
    2dc4:	08 95       	ret

00002dc6 <_exit>:
    2dc6:	f8 94       	cli

00002dc8 <__stop_program>:
    2dc8:	ff cf       	rjmp	.-2      	; 0x2dc8 <__stop_program>
