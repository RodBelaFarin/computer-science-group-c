
butterflyTest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00002d26  00002dba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800156  00800156  00002e10  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004a7  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000793  00000000  00000000  000032d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015e  00000000  00000000  00003a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000027dd  00000000  00000000  00003bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  000063a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000430  00000000  00000000  00006478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000044e  00000000  00000000  000068a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
       8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
       c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      14:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 3b 02 	jmp	0x476	; 0x476 <__vector_9>
      28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      2c:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__vector_11>
      30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e6 e2       	ldi	r30, 0x26	; 38
      70:	fd e2       	ldi	r31, 0x2D	; 45
      72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
      78:	a6 35       	cpi	r26, 0x56	; 86
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
      7e:	11 e0       	ldi	r17, 0x01	; 1
      80:	a6 e5       	ldi	r26, 0x56	; 86
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a7 38       	cpi	r26, 0x87	; 135
      8a:	b1 07       	cpc	r27, r17
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <main>
      92:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_Init>:

void LCD_Init()
{
/* Use 32 kHz crystal oscillator */
/* 1/3 Bias and 1/3 duty, SEG21:SEG24 is used as port pins */
LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
      9a:	87 eb       	ldi	r24, 0xB7	; 183
      9c:	80 93 e5 00 	sts	0x00E5, r24
/* Using 16 as prescaler selection and 7 as LCD Clock Divide */
/* gives a frame rate of 49 Hz */
LCDFRR = (1<<LCDCD2) | (1<<LCDCD1);
      a0:	86 e0       	ldi	r24, 0x06	; 6
      a2:	80 93 e6 00 	sts	0x00E6, r24
/* Set segment drive time to 125 ìs and output voltage to 3.3 V*/
LCDCCR = (1<<LCDDC1) | (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1);
      a6:	8e e4       	ldi	r24, 0x4E	; 78
      a8:	80 93 e7 00 	sts	0x00E7, r24
/* Enable LCD, default waveform and no interrupt enabled */
LCDCRA = (1<<LCDEN);
      ac:	80 e8       	ldi	r24, 0x80	; 128
      ae:	80 93 e4 00 	sts	0x00E4, r24
}
      b2:	08 95       	ret

000000b4 <LCD_disable>:


void LCD_disable()
{
/* Wait until a new frame is started. */
while ( !(LCDCRA & (1<<LCDIF)) );
      b4:	80 91 e4 00 	lds	r24, 0x00E4
      b8:	84 ff       	sbrs	r24, 4
      ba:	fc cf       	rjmp	.-8      	; 0xb4 <LCD_disable>
/* Set LCD Blanking and clear interrupt flag */
/* by writing a logical one to the flag. */
LCDCRA = (1<<LCDEN)|(1<<LCDIF)|(1<<LCDBL);
      bc:	81 e9       	ldi	r24, 0x91	; 145
      be:	80 93 e4 00 	sts	0x00E4, r24
/* Wait until LCD Blanking is effective. */
while ( !(LCDCRA & (1<<LCDIF)) );
      c2:	80 91 e4 00 	lds	r24, 0x00E4
      c6:	84 ff       	sbrs	r24, 4
      c8:	fc cf       	rjmp	.-8      	; 0xc2 <LCD_disable+0xe>
/* Disable LCD */
LCDCRA = (0<<LCDEN);
      ca:	10 92 e4 00 	sts	0x00E4, r1
}
      ce:	08 95       	ret

000000d0 <Clear_LCD>:


void Clear_LCD(void)
{
LCDDR0 = 0;
      d0:	10 92 ec 00 	sts	0x00EC, r1
LCDDR1 = 0;
      d4:	10 92 ed 00 	sts	0x00ED, r1
LCDDR2 = 0;
      d8:	10 92 ee 00 	sts	0x00EE, r1
LCDDR3 = 0;
      dc:	10 92 ef 00 	sts	0x00EF, r1

LCDDR5 = 0;
      e0:	10 92 f1 00 	sts	0x00F1, r1
LCDDR6 = 0;
      e4:	10 92 f2 00 	sts	0x00F2, r1
LCDDR7 = 0;
      e8:	10 92 f3 00 	sts	0x00F3, r1
LCDDR8 = 0;
      ec:	10 92 f4 00 	sts	0x00F4, r1

LCDDR10 = 0;
      f0:	10 92 f6 00 	sts	0x00F6, r1
LCDDR11 = 0;
      f4:	10 92 f7 00 	sts	0x00F7, r1
LCDDR12 = 0;
      f8:	10 92 f8 00 	sts	0x00F8, r1
LCDDR13 = 0;
      fc:	10 92 f9 00 	sts	0x00F9, r1

LCDDR15 = 0;
     100:	10 92 fb 00 	sts	0x00FB, r1
LCDDR16 = 0;
     104:	10 92 fc 00 	sts	0x00FC, r1
LCDDR17 = 0;
     108:	10 92 fd 00 	sts	0x00FD, r1
LCDDR18 = 0;
     10c:	10 92 fe 00 	sts	0x00FE, r1

}
     110:	08 95       	ret

00000112 <Send_Character>:


void Send_Character(unsigned char position, uint16_t character)
{
     112:	98 2f       	mov	r25, r24
     114:	fb 01       	movw	r30, r22

if(position ==0 || position >6) return;
     116:	81 50       	subi	r24, 0x01	; 1
     118:	86 30       	cpi	r24, 0x06	; 6
     11a:	08 f0       	brcs	.+2      	; 0x11e <Send_Character+0xc>
     11c:	f8 c0       	rjmp	.+496    	; 0x30e <Send_Character+0x1fc>


	switch(position)
     11e:	93 30       	cpi	r25, 0x03	; 3
     120:	09 f4       	brne	.+2      	; 0x124 <Send_Character+0x12>
     122:	5e c0       	rjmp	.+188    	; 0x1e0 <Send_Character+0xce>
     124:	94 30       	cpi	r25, 0x04	; 4
     126:	30 f4       	brcc	.+12     	; 0x134 <Send_Character+0x22>
     128:	91 30       	cpi	r25, 0x01	; 1
     12a:	71 f0       	breq	.+28     	; 0x148 <Send_Character+0x36>
     12c:	92 30       	cpi	r25, 0x02	; 2
     12e:	09 f0       	breq	.+2      	; 0x132 <Send_Character+0x20>
     130:	ee c0       	rjmp	.+476    	; 0x30e <Send_Character+0x1fc>
     132:	33 c0       	rjmp	.+102    	; 0x19a <Send_Character+0x88>
     134:	95 30       	cpi	r25, 0x05	; 5
     136:	09 f4       	brne	.+2      	; 0x13a <Send_Character+0x28>
     138:	9f c0       	rjmp	.+318    	; 0x278 <Send_Character+0x166>
     13a:	95 30       	cpi	r25, 0x05	; 5
     13c:	08 f4       	brcc	.+2      	; 0x140 <Send_Character+0x2e>
     13e:	79 c0       	rjmp	.+242    	; 0x232 <Send_Character+0x120>
     140:	96 30       	cpi	r25, 0x06	; 6
     142:	09 f0       	breq	.+2      	; 0x146 <Send_Character+0x34>
     144:	e4 c0       	rjmp	.+456    	; 0x30e <Send_Character+0x1fc>
     146:	c1 c0       	rjmp	.+386    	; 0x2ca <Send_Character+0x1b8>
	{

	case 1:	LCDDR0 |= nib[character] & 0x0F;	
     148:	90 91 ec 00 	lds	r25, 0x00EC
     14c:	ee 0f       	add	r30, r30
     14e:	ff 1f       	adc	r31, r31
     150:	e6 5f       	subi	r30, 0xF6	; 246
     152:	fe 4f       	sbci	r31, 0xFE	; 254
     154:	20 81       	ld	r18, Z
     156:	31 81       	ldd	r19, Z+1	; 0x01
     158:	82 2f       	mov	r24, r18
     15a:	8f 70       	andi	r24, 0x0F	; 15
     15c:	89 2b       	or	r24, r25
     15e:	80 93 ec 00 	sts	0x00EC, r24
			LCDDR5 |= nib[character]>>4 & 0x0F;
     162:	40 91 f1 00 	lds	r20, 0x00F1
     166:	c9 01       	movw	r24, r18
     168:	e4 e0       	ldi	r30, 0x04	; 4
     16a:	96 95       	lsr	r25
     16c:	87 95       	ror	r24
     16e:	ea 95       	dec	r30
     170:	e1 f7       	brne	.-8      	; 0x16a <Send_Character+0x58>
     172:	8f 70       	andi	r24, 0x0F	; 15
     174:	84 2b       	or	r24, r20
     176:	80 93 f1 00 	sts	0x00F1, r24
			LCDDR10 |= nib[character]>>8 & 0x0F;
     17a:	90 91 f6 00 	lds	r25, 0x00F6
     17e:	83 2f       	mov	r24, r19
     180:	8f 70       	andi	r24, 0x0F	; 15
     182:	89 2b       	or	r24, r25
     184:	80 93 f6 00 	sts	0x00F6, r24
			LCDDR15 |= nib[character]>>12 & 0x0F;
     188:	80 91 fb 00 	lds	r24, 0x00FB
     18c:	93 2f       	mov	r25, r19
     18e:	92 95       	swap	r25
     190:	9f 70       	andi	r25, 0x0F	; 15
     192:	89 2b       	or	r24, r25
     194:	80 93 fb 00 	sts	0x00FB, r24
     198:	08 95       	ret
	break;

	case 2:	LCDDR0 |= (nib[character] & 0x0F)<<4;	
     19a:	30 91 ec 00 	lds	r19, 0x00EC
     19e:	ee 0f       	add	r30, r30
     1a0:	ff 1f       	adc	r31, r31
     1a2:	e6 5f       	subi	r30, 0xF6	; 246
     1a4:	fe 4f       	sbci	r31, 0xFE	; 254
     1a6:	90 81       	ld	r25, Z
     1a8:	21 81       	ldd	r18, Z+1	; 0x01
     1aa:	89 2f       	mov	r24, r25
     1ac:	82 95       	swap	r24
     1ae:	80 7f       	andi	r24, 0xF0	; 240
     1b0:	83 2b       	or	r24, r19
     1b2:	80 93 ec 00 	sts	0x00EC, r24
			LCDDR5 |= (nib[character]>>4 & 0x0F)<<4;
     1b6:	80 91 f1 00 	lds	r24, 0x00F1
     1ba:	90 7f       	andi	r25, 0xF0	; 240
     1bc:	98 2b       	or	r25, r24
     1be:	90 93 f1 00 	sts	0x00F1, r25
			LCDDR10 |= (nib[character]>>8 & 0x0F)<<4;
     1c2:	90 91 f6 00 	lds	r25, 0x00F6
     1c6:	82 2f       	mov	r24, r18
     1c8:	82 95       	swap	r24
     1ca:	80 7f       	andi	r24, 0xF0	; 240
     1cc:	89 2b       	or	r24, r25
     1ce:	80 93 f6 00 	sts	0x00F6, r24
			LCDDR15 |= (nib[character]>>12 & 0x0F)<<4;
     1d2:	80 91 fb 00 	lds	r24, 0x00FB
     1d6:	20 7f       	andi	r18, 0xF0	; 240
     1d8:	28 2b       	or	r18, r24
     1da:	20 93 fb 00 	sts	0x00FB, r18
     1de:	08 95       	ret
	break;

	case 3:	LCDDR1 |= nib[character] & 0x0F;	
     1e0:	90 91 ed 00 	lds	r25, 0x00ED
     1e4:	ee 0f       	add	r30, r30
     1e6:	ff 1f       	adc	r31, r31
     1e8:	e6 5f       	subi	r30, 0xF6	; 246
     1ea:	fe 4f       	sbci	r31, 0xFE	; 254
     1ec:	20 81       	ld	r18, Z
     1ee:	31 81       	ldd	r19, Z+1	; 0x01
     1f0:	82 2f       	mov	r24, r18
     1f2:	8f 70       	andi	r24, 0x0F	; 15
     1f4:	89 2b       	or	r24, r25
     1f6:	80 93 ed 00 	sts	0x00ED, r24
			LCDDR6 |= nib[character]>>4 & 0x0F;
     1fa:	40 91 f2 00 	lds	r20, 0x00F2
     1fe:	c9 01       	movw	r24, r18
     200:	54 e0       	ldi	r21, 0x04	; 4
     202:	96 95       	lsr	r25
     204:	87 95       	ror	r24
     206:	5a 95       	dec	r21
     208:	e1 f7       	brne	.-8      	; 0x202 <Send_Character+0xf0>
     20a:	8f 70       	andi	r24, 0x0F	; 15
     20c:	84 2b       	or	r24, r20
     20e:	80 93 f2 00 	sts	0x00F2, r24
			LCDDR11 |= nib[character]>>8 & 0x0F;
     212:	90 91 f7 00 	lds	r25, 0x00F7
     216:	83 2f       	mov	r24, r19
     218:	8f 70       	andi	r24, 0x0F	; 15
     21a:	89 2b       	or	r24, r25
     21c:	80 93 f7 00 	sts	0x00F7, r24
			LCDDR16 |= nib[character]>>12 & 0x0F;
     220:	80 91 fc 00 	lds	r24, 0x00FC
     224:	93 2f       	mov	r25, r19
     226:	92 95       	swap	r25
     228:	9f 70       	andi	r25, 0x0F	; 15
     22a:	89 2b       	or	r24, r25
     22c:	80 93 fc 00 	sts	0x00FC, r24
     230:	08 95       	ret
	break;

	case 4:	LCDDR1 |= (nib[character] & 0x0F)<<4;	
     232:	30 91 ed 00 	lds	r19, 0x00ED
     236:	ee 0f       	add	r30, r30
     238:	ff 1f       	adc	r31, r31
     23a:	e6 5f       	subi	r30, 0xF6	; 246
     23c:	fe 4f       	sbci	r31, 0xFE	; 254
     23e:	90 81       	ld	r25, Z
     240:	21 81       	ldd	r18, Z+1	; 0x01
     242:	89 2f       	mov	r24, r25
     244:	82 95       	swap	r24
     246:	80 7f       	andi	r24, 0xF0	; 240
     248:	83 2b       	or	r24, r19
     24a:	80 93 ed 00 	sts	0x00ED, r24
			LCDDR6 |= (nib[character]>>4 & 0x0F)<<4;
     24e:	80 91 f2 00 	lds	r24, 0x00F2
     252:	90 7f       	andi	r25, 0xF0	; 240
     254:	98 2b       	or	r25, r24
     256:	90 93 f2 00 	sts	0x00F2, r25
			LCDDR11 |= (nib[character]>>8 & 0x0F)<<4;
     25a:	90 91 f7 00 	lds	r25, 0x00F7
     25e:	82 2f       	mov	r24, r18
     260:	82 95       	swap	r24
     262:	80 7f       	andi	r24, 0xF0	; 240
     264:	89 2b       	or	r24, r25
     266:	80 93 f7 00 	sts	0x00F7, r24
			LCDDR16 |= (nib[character]>>12 & 0x0F)<<4;
     26a:	80 91 fc 00 	lds	r24, 0x00FC
     26e:	20 7f       	andi	r18, 0xF0	; 240
     270:	28 2b       	or	r18, r24
     272:	20 93 fc 00 	sts	0x00FC, r18
     276:	08 95       	ret
	break;

	case 5:	LCDDR2 |= nib[character] & 0x0F;	
     278:	90 91 ee 00 	lds	r25, 0x00EE
     27c:	ee 0f       	add	r30, r30
     27e:	ff 1f       	adc	r31, r31
     280:	e6 5f       	subi	r30, 0xF6	; 246
     282:	fe 4f       	sbci	r31, 0xFE	; 254
     284:	20 81       	ld	r18, Z
     286:	31 81       	ldd	r19, Z+1	; 0x01
     288:	82 2f       	mov	r24, r18
     28a:	8f 70       	andi	r24, 0x0F	; 15
     28c:	89 2b       	or	r24, r25
     28e:	80 93 ee 00 	sts	0x00EE, r24
			LCDDR7 |= nib[character]>>4 & 0x0F;
     292:	40 91 f3 00 	lds	r20, 0x00F3
     296:	c9 01       	movw	r24, r18
     298:	24 e0       	ldi	r18, 0x04	; 4
     29a:	96 95       	lsr	r25
     29c:	87 95       	ror	r24
     29e:	2a 95       	dec	r18
     2a0:	e1 f7       	brne	.-8      	; 0x29a <Send_Character+0x188>
     2a2:	8f 70       	andi	r24, 0x0F	; 15
     2a4:	84 2b       	or	r24, r20
     2a6:	80 93 f3 00 	sts	0x00F3, r24
			LCDDR12 |= nib[character]>>8 & 0x0F;
     2aa:	90 91 f8 00 	lds	r25, 0x00F8
     2ae:	83 2f       	mov	r24, r19
     2b0:	8f 70       	andi	r24, 0x0F	; 15
     2b2:	89 2b       	or	r24, r25
     2b4:	80 93 f8 00 	sts	0x00F8, r24
			LCDDR17 |= nib[character]>>12 & 0x0F;
     2b8:	80 91 fd 00 	lds	r24, 0x00FD
     2bc:	93 2f       	mov	r25, r19
     2be:	92 95       	swap	r25
     2c0:	9f 70       	andi	r25, 0x0F	; 15
     2c2:	89 2b       	or	r24, r25
     2c4:	80 93 fd 00 	sts	0x00FD, r24
     2c8:	08 95       	ret
	break;

	case 6:	LCDDR2 |= (nib[character] & 0x0F)<<4;	
     2ca:	30 91 ee 00 	lds	r19, 0x00EE
     2ce:	ee 0f       	add	r30, r30
     2d0:	ff 1f       	adc	r31, r31
     2d2:	e6 5f       	subi	r30, 0xF6	; 246
     2d4:	fe 4f       	sbci	r31, 0xFE	; 254
     2d6:	90 81       	ld	r25, Z
     2d8:	21 81       	ldd	r18, Z+1	; 0x01
     2da:	89 2f       	mov	r24, r25
     2dc:	82 95       	swap	r24
     2de:	80 7f       	andi	r24, 0xF0	; 240
     2e0:	83 2b       	or	r24, r19
     2e2:	80 93 ee 00 	sts	0x00EE, r24
			LCDDR7 |= (nib[character]>>4 & 0x0F)<<4;
     2e6:	80 91 f3 00 	lds	r24, 0x00F3
     2ea:	90 7f       	andi	r25, 0xF0	; 240
     2ec:	98 2b       	or	r25, r24
     2ee:	90 93 f3 00 	sts	0x00F3, r25
			LCDDR12 |= (nib[character]>>8 & 0x0F)<<4;
     2f2:	90 91 f8 00 	lds	r25, 0x00F8
     2f6:	82 2f       	mov	r24, r18
     2f8:	82 95       	swap	r24
     2fa:	80 7f       	andi	r24, 0xF0	; 240
     2fc:	89 2b       	or	r24, r25
     2fe:	80 93 f8 00 	sts	0x00F8, r24
			LCDDR17 |= (nib[character]>>12 & 0x0F)<<4;
     302:	80 91 fd 00 	lds	r24, 0x00FD
     306:	20 7f       	andi	r18, 0xF0	; 240
     308:	28 2b       	or	r18, r24
     30a:	20 93 fd 00 	sts	0x00FD, r18
     30e:	08 95       	ret

00000310 <keypadInit>:

// -----------------------------------------------------------

void keypadInit(void)
{
DDRE &= ~( (1<<4) | (1<<5) | (1<<6)  );				// keypad column inputs
     310:	8d b1       	in	r24, 0x0d	; 13
     312:	8f 78       	andi	r24, 0x8F	; 143
     314:	8d b9       	out	0x0d, r24	; 13
DDRF &= ~( (1<<4) | (1<<5) | (1<<6) | (1<<7) );		// keypad row inputs
     316:	80 b3       	in	r24, 0x10	; 16
     318:	8f 70       	andi	r24, 0x0F	; 15
     31a:	80 bb       	out	0x10, r24	; 16
PORTF |= 0xF0;
     31c:	81 b3       	in	r24, 0x11	; 17
     31e:	80 6f       	ori	r24, 0xF0	; 240
     320:	81 bb       	out	0x11, r24	; 17
}
     322:	08 95       	ret

00000324 <keypad_Get_Pressed>:


void keypad_Get_Pressed(void)
{
     324:	30 91 54 01 	lds	r19, 0x0154
     328:	44 e0       	ldi	r20, 0x04	; 4
     32a:	50 e0       	ldi	r21, 0x00	; 0
	{


	DDRE &= ~( (1<<4) | (1<<5) | (1<<6)  );				// keypad column inputs

	DDRE |= (1<<cols);									//make a column as output
     32c:	61 e0       	ldi	r22, 0x01	; 1
     32e:	70 e0       	ldi	r23, 0x00	; 0

for(int cols = 4; cols<=6; cols++)
	{


	DDRE &= ~( (1<<4) | (1<<5) | (1<<6)  );				// keypad column inputs
     330:	8d b1       	in	r24, 0x0d	; 13
     332:	8f 78       	andi	r24, 0x8F	; 143
     334:	8d b9       	out	0x0d, r24	; 13

	DDRE |= (1<<cols);									//make a column as output
     336:	2d b1       	in	r18, 0x0d	; 13
     338:	cb 01       	movw	r24, r22
     33a:	04 2e       	mov	r0, r20
     33c:	02 c0       	rjmp	.+4      	; 0x342 <keypad_Get_Pressed+0x1e>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	0a 94       	dec	r0
     344:	e2 f7       	brpl	.-8      	; 0x33e <keypad_Get_Pressed+0x1a>
     346:	28 2b       	or	r18, r24
     348:	2d b9       	out	0x0d, r18	; 13
	PORTE &= ~(1<<cols); 								// make it low
     34a:	2e b1       	in	r18, 0x0e	; 14
     34c:	80 95       	com	r24
     34e:	82 23       	and	r24, r18
     350:	8e b9       	out	0x0e, r24	; 14
	
		if((bit_is_clear(PINF, 4)) && (cols == 4)) button_pressed = 1;
     352:	7c 99       	sbic	0x0f, 4	; 15
     354:	04 c0       	rjmp	.+8      	; 0x35e <keypad_Get_Pressed+0x3a>
     356:	44 30       	cpi	r20, 0x04	; 4
     358:	51 05       	cpc	r21, r1
     35a:	09 f4       	brne	.+2      	; 0x35e <keypad_Get_Pressed+0x3a>
     35c:	31 e0       	ldi	r19, 0x01	; 1
		if((bit_is_clear(PINF, 5)) && (cols == 4)) button_pressed = 4;
     35e:	7d 99       	sbic	0x0f, 5	; 15
     360:	04 c0       	rjmp	.+8      	; 0x36a <keypad_Get_Pressed+0x46>
     362:	44 30       	cpi	r20, 0x04	; 4
     364:	51 05       	cpc	r21, r1
     366:	09 f4       	brne	.+2      	; 0x36a <keypad_Get_Pressed+0x46>
     368:	34 e0       	ldi	r19, 0x04	; 4
		if((bit_is_clear(PINF, 6)) && (cols == 4)) button_pressed = 7;
     36a:	7e 99       	sbic	0x0f, 6	; 15
     36c:	04 c0       	rjmp	.+8      	; 0x376 <keypad_Get_Pressed+0x52>
     36e:	44 30       	cpi	r20, 0x04	; 4
     370:	51 05       	cpc	r21, r1
     372:	09 f4       	brne	.+2      	; 0x376 <keypad_Get_Pressed+0x52>
     374:	37 e0       	ldi	r19, 0x07	; 7
		if((bit_is_clear(PINF, 7)) && (cols == 4)) button_pressed = 10;		// star  *
     376:	7f 99       	sbic	0x0f, 7	; 15
     378:	04 c0       	rjmp	.+8      	; 0x382 <keypad_Get_Pressed+0x5e>
     37a:	44 30       	cpi	r20, 0x04	; 4
     37c:	51 05       	cpc	r21, r1
     37e:	09 f4       	brne	.+2      	; 0x382 <keypad_Get_Pressed+0x5e>
     380:	3a e0       	ldi	r19, 0x0A	; 10

		if((bit_is_clear(PINF, 4)) && (cols == 5)) button_pressed = 2;
     382:	7c 99       	sbic	0x0f, 4	; 15
     384:	04 c0       	rjmp	.+8      	; 0x38e <keypad_Get_Pressed+0x6a>
     386:	45 30       	cpi	r20, 0x05	; 5
     388:	51 05       	cpc	r21, r1
     38a:	09 f4       	brne	.+2      	; 0x38e <keypad_Get_Pressed+0x6a>
     38c:	32 e0       	ldi	r19, 0x02	; 2
		if((bit_is_clear(PINF, 5)) && (cols == 5)) button_pressed = 5;
     38e:	7d 99       	sbic	0x0f, 5	; 15
     390:	04 c0       	rjmp	.+8      	; 0x39a <keypad_Get_Pressed+0x76>
     392:	45 30       	cpi	r20, 0x05	; 5
     394:	51 05       	cpc	r21, r1
     396:	09 f4       	brne	.+2      	; 0x39a <keypad_Get_Pressed+0x76>
     398:	35 e0       	ldi	r19, 0x05	; 5
		if((bit_is_clear(PINF, 6)) && (cols == 5)) button_pressed = 8;
     39a:	7e 99       	sbic	0x0f, 6	; 15
     39c:	04 c0       	rjmp	.+8      	; 0x3a6 <keypad_Get_Pressed+0x82>
     39e:	45 30       	cpi	r20, 0x05	; 5
     3a0:	51 05       	cpc	r21, r1
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <keypad_Get_Pressed+0x82>
     3a4:	38 e0       	ldi	r19, 0x08	; 8
		if((bit_is_clear(PINF, 7)) && (cols == 5)) button_pressed = 0;
     3a6:	7f 99       	sbic	0x0f, 7	; 15
     3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <keypad_Get_Pressed+0x8e>
     3aa:	45 30       	cpi	r20, 0x05	; 5
     3ac:	51 05       	cpc	r21, r1
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <keypad_Get_Pressed+0x8e>
     3b0:	30 e0       	ldi	r19, 0x00	; 0


		if((bit_is_clear(PINF, 4)) && (cols == 6)) button_pressed = 3;
     3b2:	7c 99       	sbic	0x0f, 4	; 15
     3b4:	04 c0       	rjmp	.+8      	; 0x3be <keypad_Get_Pressed+0x9a>
     3b6:	46 30       	cpi	r20, 0x06	; 6
     3b8:	51 05       	cpc	r21, r1
     3ba:	09 f4       	brne	.+2      	; 0x3be <keypad_Get_Pressed+0x9a>
     3bc:	33 e0       	ldi	r19, 0x03	; 3
		if((bit_is_clear(PINF, 5)) && (cols == 6)) button_pressed = 6;
     3be:	7d 99       	sbic	0x0f, 5	; 15
     3c0:	04 c0       	rjmp	.+8      	; 0x3ca <keypad_Get_Pressed+0xa6>
     3c2:	46 30       	cpi	r20, 0x06	; 6
     3c4:	51 05       	cpc	r21, r1
     3c6:	09 f4       	brne	.+2      	; 0x3ca <keypad_Get_Pressed+0xa6>
     3c8:	36 e0       	ldi	r19, 0x06	; 6
		if((bit_is_clear(PINF, 6)) && (cols == 6)) button_pressed = 9;
     3ca:	7e 99       	sbic	0x0f, 6	; 15
     3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <keypad_Get_Pressed+0xb2>
     3ce:	46 30       	cpi	r20, 0x06	; 6
     3d0:	51 05       	cpc	r21, r1
     3d2:	09 f4       	brne	.+2      	; 0x3d6 <keypad_Get_Pressed+0xb2>
     3d4:	39 e0       	ldi	r19, 0x09	; 9
		if((bit_is_clear(PINF, 7)) && (cols == 6)) button_pressed = 11;		// hash #
     3d6:	7f 99       	sbic	0x0f, 7	; 15
     3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <keypad_Get_Pressed+0xbe>
     3da:	46 30       	cpi	r20, 0x06	; 6
     3dc:	51 05       	cpc	r21, r1
     3de:	09 f4       	brne	.+2      	; 0x3e2 <keypad_Get_Pressed+0xbe>
     3e0:	3b e0       	ldi	r19, 0x0B	; 11

void keypad_Get_Pressed(void)
{


for(int cols = 4; cols<=6; cols++)
     3e2:	4f 5f       	subi	r20, 0xFF	; 255
     3e4:	5f 4f       	sbci	r21, 0xFF	; 255
     3e6:	47 30       	cpi	r20, 0x07	; 7
     3e8:	51 05       	cpc	r21, r1
     3ea:	09 f0       	breq	.+2      	; 0x3ee <keypad_Get_Pressed+0xca>
     3ec:	a1 cf       	rjmp	.-190    	; 0x330 <keypad_Get_Pressed+0xc>
     3ee:	30 93 54 01 	sts	0x0154, r19
		if((bit_is_clear(PINF, 7)) && (cols == 6)) button_pressed = 11;		// hash #
		
	}


}
     3f2:	08 95       	ret

000003f4 <main>:


int main(void)
{

DDRB &= ~(1<<4) & (1<<6) & (1<<7);
     3f4:	84 b1       	in	r24, 0x04	; 4
     3f6:	14 b8       	out	0x04, r1	; 4
PORTB |= (1<<4) | (1<<6) | (1<<7);
     3f8:	85 b1       	in	r24, 0x05	; 5
     3fa:	80 6d       	ori	r24, 0xD0	; 208
     3fc:	85 b9       	out	0x05, r24	; 5
DDRE &= ~(1<<2) & (1<<3);
     3fe:	8d b1       	in	r24, 0x0d	; 13
     400:	88 70       	andi	r24, 0x08	; 8
     402:	8d b9       	out	0x0d, r24	; 13
PORTE |= (1<<2) | (1<<3);			// joystick as input with pullup.
     404:	8e b1       	in	r24, 0x0e	; 14
     406:	8c 60       	ori	r24, 0x0C	; 12
     408:	8e b9       	out	0x0e, r24	; 14


DDRB |= (1<<0) | (1<<1);	// relays set as output
     40a:	84 b1       	in	r24, 0x04	; 4
     40c:	83 60       	ori	r24, 0x03	; 3
     40e:	84 b9       	out	0x04, r24	; 4
RELAY_1_0FF;
     410:	28 9a       	sbi	0x05, 0	; 5
RELAY_2_0FF;
     412:	29 9a       	sbi	0x05, 1	; 5


// --------------------- INITIALIZE  TIMERS ----------------------

TCCR0A |= (1<<CS01);				// timer prescaller
     414:	84 b5       	in	r24, 0x24	; 36
     416:	82 60       	ori	r24, 0x02	; 2
     418:	84 bd       	out	0x24, r24	; 36
TIMSK0 |= (1<<TOIE0);				// enable timer 0
     41a:	80 91 6e 00 	lds	r24, 0x006E
     41e:	81 60       	ori	r24, 0x01	; 1
     420:	80 93 6e 00 	sts	0x006E, r24

TCCR1B |= (1<<CS11) | (1<<CS10);	// timer prescaller
     424:	80 91 81 00 	lds	r24, 0x0081
     428:	83 60       	ori	r24, 0x03	; 3
     42a:	80 93 81 00 	sts	0x0081, r24
TIMSK1 |= (1<<TOIE1);				// enable timer 1
     42e:	80 91 6f 00 	lds	r24, 0x006F
     432:	81 60       	ori	r24, 0x01	; 1
     434:	80 93 6f 00 	sts	0x006F, r24

ASSR |= (1<<AS2);					// allows timer 2 to use external crystal 32.768 kHz
     438:	80 91 b6 00 	lds	r24, 0x00B6
     43c:	88 60       	ori	r24, 0x08	; 8
     43e:	80 93 b6 00 	sts	0x00B6, r24
TCCR2A |=(1<<CS22) | (1<<CS20);		// 128 prescaller
     442:	80 91 b0 00 	lds	r24, 0x00B0
     446:	85 60       	ori	r24, 0x05	; 5
     448:	80 93 b0 00 	sts	0x00B0, r24
TIMSK2 |= (1<<TOIE2);				// enable timer 2
     44c:	80 91 70 00 	lds	r24, 0x0070
     450:	81 60       	ori	r24, 0x01	; 1
     452:	80 93 70 00 	sts	0x0070, r24

sei();
     456:	78 94       	sei

void LCD_Init()
{
/* Use 32 kHz crystal oscillator */
/* 1/3 Bias and 1/3 duty, SEG21:SEG24 is used as port pins */
LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0)| (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
     458:	87 eb       	ldi	r24, 0xB7	; 183
     45a:	80 93 e5 00 	sts	0x00E5, r24
/* Using 16 as prescaler selection and 7 as LCD Clock Divide */
/* gives a frame rate of 49 Hz */
LCDFRR = (1<<LCDCD2) | (1<<LCDCD1);
     45e:	86 e0       	ldi	r24, 0x06	; 6
     460:	80 93 e6 00 	sts	0x00E6, r24
/* Set segment drive time to 125 ìs and output voltage to 3.3 V*/
LCDCCR = (1<<LCDDC1) | (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1);
     464:	8e e4       	ldi	r24, 0x4E	; 78
     466:	80 93 e7 00 	sts	0x00E7, r24
/* Enable LCD, default waveform and no interrupt enabled */
LCDCRA = (1<<LCDEN);
     46a:	80 e8       	ldi	r24, 0x80	; 128
     46c:	80 93 e4 00 	sts	0x00E4, r24

// ---------------------------------------------------------------


LCD_Init();
keypadInit();
     470:	0e 94 88 01 	call	0x310	; 0x310 <keypadInit>
     474:	ff cf       	rjmp	.-2      	; 0x474 <main+0x80>

00000476 <__vector_9>:




ISR(TIMER1_OVF_vect)
{
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
     480:	2f 93       	push	r18
     482:	3f 93       	push	r19
     484:	4f 93       	push	r20
     486:	5f 93       	push	r21
     488:	6f 93       	push	r22
     48a:	7f 93       	push	r23
     48c:	8f 93       	push	r24
     48e:	9f 93       	push	r25
     490:	af 93       	push	r26
     492:	bf 93       	push	r27
     494:	ef 93       	push	r30
     496:	ff 93       	push	r31


if(relay_1_state == 1) RELAY_1_0FF;
     498:	80 91 80 01 	lds	r24, 0x0180
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	11 f4       	brne	.+4      	; 0x4a4 <__vector_9+0x2e>
     4a0:	28 9a       	sbi	0x05, 0	; 5
     4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <__vector_9+0x3e>
if(relay_1_state == 2)
     4a4:	82 30       	cpi	r24, 0x02	; 2
     4a6:	31 f4       	brne	.+12     	; 0x4b4 <__vector_9+0x3e>
	{
	RELAY_1_0N; 
     4a8:	28 98       	cbi	0x05, 0	; 5
	LCDDR0 |= (1<<1); // arrow 1
     4aa:	80 91 ec 00 	lds	r24, 0x00EC
     4ae:	82 60       	ori	r24, 0x02	; 2
     4b0:	80 93 ec 00 	sts	0x00EC, r24
//////////////////////////////////////////////////////////////////
////////////////////////  HOME  SCREEN ///////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

if(screenDispNum == 0)	// home screen
     4b4:	80 91 7c 01 	lds	r24, 0x017C
     4b8:	88 23       	and	r24, r24
     4ba:	09 f0       	breq	.+2      	; 0x4be <__vector_9+0x48>
     4bc:	69 c0       	rjmp	.+210    	; 0x590 <__stack+0x91>
{
	Clear_LCD();
     4be:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,hr_tens);
     4c2:	60 91 5b 01 	lds	r22, 0x015B
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,hr_unit);
     4ce:	60 91 5a 01 	lds	r22, 0x015A
     4d2:	82 e0       	ldi	r24, 0x02	; 2
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,min_tens);
     4da:	60 91 59 01 	lds	r22, 0x0159
     4de:	83 e0       	ldi	r24, 0x03	; 3
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,min_unit);
     4e6:	60 91 58 01 	lds	r22, 0x0158
     4ea:	84 e0       	ldi	r24, 0x04	; 4
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,sec_tens);
     4f2:	60 91 57 01 	lds	r22, 0x0157
     4f6:	85 e0       	ldi	r24, 0x05	; 5
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,sec_unit);
     4fe:	60 91 56 01 	lds	r22, 0x0156
     502:	86 e0       	ldi	r24, 0x06	; 6
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	LCDDR8 = (1<<0);		// colons
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	80 93 f4 00 	sts	0x00F4, r24
	LCDDR0 |= (1<<2); 		// small digit 1 symbol
     510:	80 91 ec 00 	lds	r24, 0x00EC
     514:	84 60       	ori	r24, 0x04	; 4
     516:	80 93 ec 00 	sts	0x00EC, r24
	LCDDR0 |= (1<<6); 		// small digit 2 symbol
     51a:	80 91 ec 00 	lds	r24, 0x00EC
     51e:	80 64       	ori	r24, 0x40	; 64
     520:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
     524:	1c 99       	sbic	0x03, 4	; 3
     526:	05 c0       	rjmp	.+10     	; 0x532 <__stack+0x33>
     528:	80 91 7d 01 	lds	r24, 0x017D
     52c:	8f 5f       	subi	r24, 0xFF	; 255
     52e:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
     532:	63 99       	sbic	0x0c, 3	; 12
     534:	05 c0       	rjmp	.+10     	; 0x540 <__stack+0x41>
     536:	80 91 7d 01 	lds	r24, 0x017D
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
     540:	62 99       	sbic	0x0c, 2	; 12
     542:	05 c0       	rjmp	.+10     	; 0x54e <__stack+0x4f>
     544:	80 91 7d 01 	lds	r24, 0x017D
     548:	8f 5f       	subi	r24, 0xFF	; 255
     54a:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
     54e:	1c 99       	sbic	0x03, 4	; 3
     550:	09 c0       	rjmp	.+18     	; 0x564 <__stack+0x65>
     552:	80 91 7d 01 	lds	r24, 0x017D
     556:	85 30       	cpi	r24, 0x05	; 5
     558:	29 f4       	brne	.+10     	; 0x564 <__stack+0x65>
	{
	screenDispNum = 1;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     560:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
     564:	63 99       	sbic	0x0c, 3	; 12
     566:	09 c0       	rjmp	.+18     	; 0x57a <__stack+0x7b>
     568:	80 91 7d 01 	lds	r24, 0x017D
     56c:	83 30       	cpi	r24, 0x03	; 3
     56e:	29 f4       	brne	.+10     	; 0x57a <__stack+0x7b>
	{
	screenDispNum = 18;
     570:	82 e1       	ldi	r24, 0x12	; 18
     572:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     576:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
     57a:	62 99       	sbic	0x0c, 2	; 12
     57c:	09 c0       	rjmp	.+18     	; 0x590 <__stack+0x91>
     57e:	80 91 7d 01 	lds	r24, 0x017D
     582:	83 30       	cpi	r24, 0x03	; 3
     584:	29 f4       	brne	.+10     	; 0x590 <__stack+0x91>
	{
	screenDispNum = 20;
     586:	84 e1       	ldi	r24, 0x14	; 20
     588:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     58c:	10 92 7d 01 	sts	0x017D, r1
	}

}


if(screenDispNum == 18)	// count down for dev 1
     590:	80 91 7c 01 	lds	r24, 0x017C
     594:	82 31       	cpi	r24, 0x12	; 18
     596:	09 f0       	breq	.+2      	; 0x59a <__stack+0x9b>
     598:	66 c0       	rjmp	.+204    	; 0x666 <__stack+0x167>
{
	Clear_LCD();
     59a:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,div1_Cdown_hr_tens);
     59e:	60 91 69 01 	lds	r22, 0x0169
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,div1_Cdown_hr_unit);
     5aa:	60 91 68 01 	lds	r22, 0x0168
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,div1_Cdown_min_tens);
     5b6:	60 91 67 01 	lds	r22, 0x0167
     5ba:	83 e0       	ldi	r24, 0x03	; 3
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,div1_Cdown_min_unit);
     5c2:	60 91 66 01 	lds	r22, 0x0166
     5c6:	84 e0       	ldi	r24, 0x04	; 4
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,div1_Cdown_sec_tens);
     5ce:	60 91 65 01 	lds	r22, 0x0165
     5d2:	85 e0       	ldi	r24, 0x05	; 5
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,div1_Cdown_sec_unit);
     5da:	60 91 64 01 	lds	r22, 0x0164
     5de:	86 e0       	ldi	r24, 0x06	; 6
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR8 = (1<<0);		// colons
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 f4 00 	sts	0x00F4, r24
	LCDDR0 |= (1<<2); 		// small digit 1 symbol
     5ec:	80 91 ec 00 	lds	r24, 0x00EC
     5f0:	84 60       	ori	r24, 0x04	; 4
     5f2:	80 93 ec 00 	sts	0x00EC, r24
	

	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
     5f6:	63 99       	sbic	0x0c, 3	; 12
     5f8:	05 c0       	rjmp	.+10     	; 0x604 <__stack+0x105>
     5fa:	80 91 7d 01 	lds	r24, 0x017D
     5fe:	8f 5f       	subi	r24, 0xFF	; 255
     600:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
     604:	62 99       	sbic	0x0c, 2	; 12
     606:	05 c0       	rjmp	.+10     	; 0x612 <__stack+0x113>
     608:	80 91 7d 01 	lds	r24, 0x017D
     60c:	8f 5f       	subi	r24, 0xFF	; 255
     60e:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
     612:	1f 99       	sbic	0x03, 7	; 3
     614:	05 c0       	rjmp	.+10     	; 0x620 <__stack+0x121>
     616:	80 91 7d 01 	lds	r24, 0x017D
     61a:	8f 5f       	subi	r24, 0xFF	; 255
     61c:	80 93 7d 01 	sts	0x017D, r24

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
     620:	63 99       	sbic	0x0c, 3	; 12
     622:	09 c0       	rjmp	.+18     	; 0x636 <__stack+0x137>
     624:	80 91 7d 01 	lds	r24, 0x017D
     628:	83 30       	cpi	r24, 0x03	; 3
     62a:	29 f4       	brne	.+10     	; 0x636 <__stack+0x137>
	{
	screenDispNum = 20;
     62c:	84 e1       	ldi	r24, 0x14	; 20
     62e:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     632:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
     636:	62 99       	sbic	0x0c, 2	; 12
     638:	08 c0       	rjmp	.+16     	; 0x64a <__stack+0x14b>
     63a:	80 91 7d 01 	lds	r24, 0x017D
     63e:	83 30       	cpi	r24, 0x03	; 3
     640:	21 f4       	brne	.+8      	; 0x64a <__stack+0x14b>
	{
	screenDispNum = 0;
     642:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
     646:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
     64a:	1f 99       	sbic	0x03, 7	; 3
     64c:	0c c0       	rjmp	.+24     	; 0x666 <__stack+0x167>
     64e:	80 91 7d 01 	lds	r24, 0x017D
     652:	83 30       	cpi	r24, 0x03	; 3
     654:	41 f4       	brne	.+16     	; 0x666 <__stack+0x167>
	{
	screenDispNum = 19;
     656:	83 e1       	ldi	r24, 0x13	; 19
     658:	80 93 7c 01 	sts	0x017C, r24
	clear_sub_disp = 1;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	80 93 86 01 	sts	0x0186, r24
	button_wait_time = 0;
     662:	10 92 7d 01 	sts	0x017D, r1
	}

}


if(screenDispNum == 20)	// count down for dev 2
     666:	80 91 7c 01 	lds	r24, 0x017C
     66a:	84 31       	cpi	r24, 0x14	; 20
     66c:	09 f0       	breq	.+2      	; 0x670 <__stack+0x171>
     66e:	69 c0       	rjmp	.+210    	; 0x742 <__stack+0x243>
{
	Clear_LCD();
     670:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,div2_Cdown_hr_tens);
     674:	60 91 77 01 	lds	r22, 0x0177
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,div2_Cdown_hr_unit);
     680:	60 91 76 01 	lds	r22, 0x0176
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,div2_Cdown_min_tens);
     68c:	60 91 75 01 	lds	r22, 0x0175
     690:	83 e0       	ldi	r24, 0x03	; 3
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,div2_Cdown_min_unit);
     698:	60 91 74 01 	lds	r22, 0x0174
     69c:	84 e0       	ldi	r24, 0x04	; 4
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,div2_Cdown_sec_tens);
     6a4:	60 91 73 01 	lds	r22, 0x0173
     6a8:	85 e0       	ldi	r24, 0x05	; 5
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,div2_Cdown_sec_unit);
     6b0:	60 91 72 01 	lds	r22, 0x0172
     6b4:	86 e0       	ldi	r24, 0x06	; 6
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR8 = (1<<0);		// colons
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	80 93 f4 00 	sts	0x00F4, r24
	LCDDR0 |= (1<<6); 		// small digit 2 symbol	
     6c2:	80 91 ec 00 	lds	r24, 0x00EC
     6c6:	80 64       	ori	r24, 0x40	; 64
     6c8:	80 93 ec 00 	sts	0x00EC, r24


	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
     6cc:	63 99       	sbic	0x0c, 3	; 12
     6ce:	05 c0       	rjmp	.+10     	; 0x6da <__stack+0x1db>
     6d0:	80 91 7d 01 	lds	r24, 0x017D
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
     6d6:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
     6da:	62 99       	sbic	0x0c, 2	; 12
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <__stack+0x1e9>
     6de:	80 91 7d 01 	lds	r24, 0x017D
     6e2:	8f 5f       	subi	r24, 0xFF	; 255
     6e4:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
     6e8:	1f 99       	sbic	0x03, 7	; 3
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <__stack+0x1f7>
     6ec:	80 91 7d 01 	lds	r24, 0x017D
     6f0:	8f 5f       	subi	r24, 0xFF	; 255
     6f2:	80 93 7d 01 	sts	0x017D, r24

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
     6f6:	63 99       	sbic	0x0c, 3	; 12
     6f8:	0b c0       	rjmp	.+22     	; 0x710 <__stack+0x211>
     6fa:	80 91 7d 01 	lds	r24, 0x017D
     6fe:	83 30       	cpi	r24, 0x03	; 3
     700:	39 f4       	brne	.+14     	; 0x710 <__stack+0x211>
	{
	screenDispNum = 0;
     702:	10 92 7c 01 	sts	0x017C, r1
	clear_sub_disp = 2;
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	80 93 86 01 	sts	0x0186, r24
	button_wait_time = 0;
     70c:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
     710:	62 99       	sbic	0x0c, 2	; 12
     712:	09 c0       	rjmp	.+18     	; 0x726 <__stack+0x227>
     714:	80 91 7d 01 	lds	r24, 0x017D
     718:	83 30       	cpi	r24, 0x03	; 3
     71a:	29 f4       	brne	.+10     	; 0x726 <__stack+0x227>
	{
	screenDispNum = 18;
     71c:	82 e1       	ldi	r24, 0x12	; 18
     71e:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     722:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
     726:	1f 99       	sbic	0x03, 7	; 3
     728:	0c c0       	rjmp	.+24     	; 0x742 <__stack+0x243>
     72a:	80 91 7d 01 	lds	r24, 0x017D
     72e:	83 30       	cpi	r24, 0x03	; 3
     730:	41 f4       	brne	.+16     	; 0x742 <__stack+0x243>
	{
	screenDispNum = 19;
     732:	83 e1       	ldi	r24, 0x13	; 19
     734:	80 93 7c 01 	sts	0x017C, r24
	clear_sub_disp = 2;
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	80 93 86 01 	sts	0x0186, r24
	button_wait_time = 0;
     73e:	10 92 7d 01 	sts	0x017D, r1
////////////////////////  MAIN MENU //////////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////


if(screenDispNum == 1)	// main menu SET T
     742:	80 91 7c 01 	lds	r24, 0x017C
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	09 f0       	breq	.+2      	; 0x74c <__stack+0x24d>
     74a:	5f c0       	rjmp	.+190    	; 0x80a <__stack+0x30b>
{
	Clear_LCD();
     74c:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,S);
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	6c e1       	ldi	r22, 0x1C	; 28
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,E);
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	6e e0       	ldi	r22, 0x0E	; 14
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,T);
     764:	83 e0       	ldi	r24, 0x03	; 3
     766:	6d e1       	ldi	r22, 0x1D	; 29
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,T);
     76e:	85 e0       	ldi	r24, 0x05	; 5
     770:	6d e1       	ldi	r22, 0x1D	; 29
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
     778:	1c 99       	sbic	0x03, 4	; 3
     77a:	05 c0       	rjmp	.+10     	; 0x786 <__stack+0x287>
     77c:	80 91 7d 01 	lds	r24, 0x017D
     780:	8f 5f       	subi	r24, 0xFF	; 255
     782:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
     786:	63 99       	sbic	0x0c, 3	; 12
     788:	05 c0       	rjmp	.+10     	; 0x794 <__stack+0x295>
     78a:	80 91 7d 01 	lds	r24, 0x017D
     78e:	8f 5f       	subi	r24, 0xFF	; 255
     790:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
     794:	62 99       	sbic	0x0c, 2	; 12
     796:	05 c0       	rjmp	.+10     	; 0x7a2 <__stack+0x2a3>
     798:	80 91 7d 01 	lds	r24, 0x017D
     79c:	8f 5f       	subi	r24, 0xFF	; 255
     79e:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
     7a2:	1f 99       	sbic	0x03, 7	; 3
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <__stack+0x2b1>
     7a6:	80 91 7d 01 	lds	r24, 0x017D
     7aa:	8f 5f       	subi	r24, 0xFF	; 255
     7ac:	80 93 7d 01 	sts	0x017D, r24


	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
     7b0:	1c 99       	sbic	0x03, 4	; 3
     7b2:	08 c0       	rjmp	.+16     	; 0x7c4 <__stack+0x2c5>
     7b4:	80 91 7d 01 	lds	r24, 0x017D
     7b8:	85 30       	cpi	r24, 0x05	; 5
     7ba:	21 f4       	brne	.+8      	; 0x7c4 <__stack+0x2c5>
	{
	screenDispNum = 0;
     7bc:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
     7c0:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
     7c4:	63 99       	sbic	0x0c, 3	; 12
     7c6:	09 c0       	rjmp	.+18     	; 0x7da <__stack+0x2db>
     7c8:	80 91 7d 01 	lds	r24, 0x017D
     7cc:	83 30       	cpi	r24, 0x03	; 3
     7ce:	29 f4       	brne	.+10     	; 0x7da <__stack+0x2db>
	{
	screenDispNum = 2;
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     7d6:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
     7da:	62 99       	sbic	0x0c, 2	; 12
     7dc:	08 c0       	rjmp	.+16     	; 0x7ee <__stack+0x2ef>
     7de:	80 91 7d 01 	lds	r24, 0x017D
     7e2:	83 30       	cpi	r24, 0x03	; 3
     7e4:	21 f4       	brne	.+8      	; 0x7ee <__stack+0x2ef>
	{
	screenDispNum = 3;
     7e6:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     7ea:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
     7ee:	1f 99       	sbic	0x03, 7	; 3
     7f0:	0c c0       	rjmp	.+24     	; 0x80a <__stack+0x30b>
     7f2:	80 91 7d 01 	lds	r24, 0x017D
     7f6:	83 30       	cpi	r24, 0x03	; 3
     7f8:	41 f4       	brne	.+16     	; 0x80a <__stack+0x30b>
	{
	screenDispNum = 4;
     7fa:	84 e0       	ldi	r24, 0x04	; 4
     7fc:	80 93 7c 01 	sts	0x017C, r24
	sub_display = 1;
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	80 93 7e 01 	sts	0x017E, r24
	button_wait_time = 0;
     806:	10 92 7d 01 	sts	0x017D, r1
	}

}


if(screenDispNum == 2)	// main menu DEV 1
     80a:	80 91 7c 01 	lds	r24, 0x017C
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	09 f0       	breq	.+2      	; 0x814 <__stack+0x315>
     812:	5c c0       	rjmp	.+184    	; 0x8cc <__stack+0x3cd>
{
	Clear_LCD();
     814:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,D);
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	6d e0       	ldi	r22, 0x0D	; 13
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,E);
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	6e e0       	ldi	r22, 0x0E	; 14
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,V);
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	6f e1       	ldi	r22, 0x1F	; 31
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,1);
     836:	85 e0       	ldi	r24, 0x05	; 5
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
     840:	1c 99       	sbic	0x03, 4	; 3
     842:	05 c0       	rjmp	.+10     	; 0x84e <__stack+0x34f>
     844:	80 91 7d 01 	lds	r24, 0x017D
     848:	8f 5f       	subi	r24, 0xFF	; 255
     84a:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
     84e:	63 99       	sbic	0x0c, 3	; 12
     850:	05 c0       	rjmp	.+10     	; 0x85c <__stack+0x35d>
     852:	80 91 7d 01 	lds	r24, 0x017D
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
     85c:	62 99       	sbic	0x0c, 2	; 12
     85e:	05 c0       	rjmp	.+10     	; 0x86a <__stack+0x36b>
     860:	80 91 7d 01 	lds	r24, 0x017D
     864:	8f 5f       	subi	r24, 0xFF	; 255
     866:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
     86a:	1f 99       	sbic	0x03, 7	; 3
     86c:	05 c0       	rjmp	.+10     	; 0x878 <__stack+0x379>
     86e:	80 91 7d 01 	lds	r24, 0x017D
     872:	8f 5f       	subi	r24, 0xFF	; 255
     874:	80 93 7d 01 	sts	0x017D, r24


	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
     878:	1c 99       	sbic	0x03, 4	; 3
     87a:	08 c0       	rjmp	.+16     	; 0x88c <__stack+0x38d>
     87c:	80 91 7d 01 	lds	r24, 0x017D
     880:	85 30       	cpi	r24, 0x05	; 5
     882:	21 f4       	brne	.+8      	; 0x88c <__stack+0x38d>
	{
	screenDispNum = 0;
     884:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
     888:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
     88c:	63 99       	sbic	0x0c, 3	; 12
     88e:	08 c0       	rjmp	.+16     	; 0x8a0 <__stack+0x3a1>
     890:	80 91 7d 01 	lds	r24, 0x017D
     894:	83 30       	cpi	r24, 0x03	; 3
     896:	21 f4       	brne	.+8      	; 0x8a0 <__stack+0x3a1>
	{
	screenDispNum = 3;
     898:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     89c:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
     8a0:	62 99       	sbic	0x0c, 2	; 12
     8a2:	09 c0       	rjmp	.+18     	; 0x8b6 <__stack+0x3b7>
     8a4:	80 91 7d 01 	lds	r24, 0x017D
     8a8:	83 30       	cpi	r24, 0x03	; 3
     8aa:	29 f4       	brne	.+10     	; 0x8b6 <__stack+0x3b7>
	{
	screenDispNum = 1;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     8b2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
     8b6:	1f 99       	sbic	0x03, 7	; 3
     8b8:	09 c0       	rjmp	.+18     	; 0x8cc <__stack+0x3cd>
     8ba:	80 91 7d 01 	lds	r24, 0x017D
     8be:	83 30       	cpi	r24, 0x03	; 3
     8c0:	29 f4       	brne	.+10     	; 0x8cc <__stack+0x3cd>
	{
	screenDispNum = 10;
     8c2:	8a e0       	ldi	r24, 0x0A	; 10
     8c4:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     8c8:	10 92 7d 01 	sts	0x017D, r1
	}

}

if(screenDispNum == 3)	// main menu DEV 2
     8cc:	80 91 7c 01 	lds	r24, 0x017C
     8d0:	83 30       	cpi	r24, 0x03	; 3
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <__stack+0x3d7>
     8d4:	5d c0       	rjmp	.+186    	; 0x990 <__stack+0x491>
{
	Clear_LCD();
     8d6:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,D);
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	6d e0       	ldi	r22, 0x0D	; 13
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,E);
     8e4:	82 e0       	ldi	r24, 0x02	; 2
     8e6:	6e e0       	ldi	r22, 0x0E	; 14
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,V);
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	6f e1       	ldi	r22, 0x1F	; 31
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,2);
     8f8:	85 e0       	ldi	r24, 0x05	; 5
     8fa:	62 e0       	ldi	r22, 0x02	; 2
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
     902:	1c 99       	sbic	0x03, 4	; 3
     904:	05 c0       	rjmp	.+10     	; 0x910 <__stack+0x411>
     906:	80 91 7d 01 	lds	r24, 0x017D
     90a:	8f 5f       	subi	r24, 0xFF	; 255
     90c:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
     910:	63 99       	sbic	0x0c, 3	; 12
     912:	05 c0       	rjmp	.+10     	; 0x91e <__stack+0x41f>
     914:	80 91 7d 01 	lds	r24, 0x017D
     918:	8f 5f       	subi	r24, 0xFF	; 255
     91a:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
     91e:	62 99       	sbic	0x0c, 2	; 12
     920:	05 c0       	rjmp	.+10     	; 0x92c <__stack+0x42d>
     922:	80 91 7d 01 	lds	r24, 0x017D
     926:	8f 5f       	subi	r24, 0xFF	; 255
     928:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
     92c:	1f 99       	sbic	0x03, 7	; 3
     92e:	05 c0       	rjmp	.+10     	; 0x93a <__stack+0x43b>
     930:	80 91 7d 01 	lds	r24, 0x017D
     934:	8f 5f       	subi	r24, 0xFF	; 255
     936:	80 93 7d 01 	sts	0x017D, r24


	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
     93a:	1c 99       	sbic	0x03, 4	; 3
     93c:	08 c0       	rjmp	.+16     	; 0x94e <__stack+0x44f>
     93e:	80 91 7d 01 	lds	r24, 0x017D
     942:	85 30       	cpi	r24, 0x05	; 5
     944:	21 f4       	brne	.+8      	; 0x94e <__stack+0x44f>
	{
	screenDispNum = 0;
     946:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
     94a:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
     94e:	63 99       	sbic	0x0c, 3	; 12
     950:	09 c0       	rjmp	.+18     	; 0x964 <__stack+0x465>
     952:	80 91 7d 01 	lds	r24, 0x017D
     956:	83 30       	cpi	r24, 0x03	; 3
     958:	29 f4       	brne	.+10     	; 0x964 <__stack+0x465>
	{
	screenDispNum = 1;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     960:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
     964:	62 99       	sbic	0x0c, 2	; 12
     966:	09 c0       	rjmp	.+18     	; 0x97a <__stack+0x47b>
     968:	80 91 7d 01 	lds	r24, 0x017D
     96c:	83 30       	cpi	r24, 0x03	; 3
     96e:	29 f4       	brne	.+10     	; 0x97a <__stack+0x47b>
	{
	screenDispNum = 2;
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     976:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
     97a:	1f 99       	sbic	0x03, 7	; 3
     97c:	09 c0       	rjmp	.+18     	; 0x990 <__stack+0x491>
     97e:	80 91 7d 01 	lds	r24, 0x017D
     982:	83 30       	cpi	r24, 0x03	; 3
     984:	29 f4       	brne	.+10     	; 0x990 <__stack+0x491>
	{
	screenDispNum = 21;
     986:	85 e1       	ldi	r24, 0x15	; 21
     988:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     98c:	10 92 7d 01 	sts	0x017D, r1
//////////////////////////////////////////////////////////////////
//////////////////  KEYPAD  INPUT  SCREEN ////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

if(screenDispNum == 4)	//  _ _ : _ _ : _ _
     990:	80 91 7c 01 	lds	r24, 0x017C
     994:	84 30       	cpi	r24, 0x04	; 4
     996:	09 f0       	breq	.+2      	; 0x99a <__stack+0x49b>
     998:	e0 c0       	rjmp	.+448    	; 0xb5a <__stack+0x65b>
{
	Clear_LCD();
     99a:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,UNDERSCORE);
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	64 e2       	ldi	r22, 0x24	; 36
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,UNDERSCORE);
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	64 e2       	ldi	r22, 0x24	; 36
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,UNDERSCORE);
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	64 e2       	ldi	r22, 0x24	; 36
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,UNDERSCORE);
     9bc:	84 e0       	ldi	r24, 0x04	; 4
     9be:	64 e2       	ldi	r22, 0x24	; 36
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,UNDERSCORE);
     9c6:	85 e0       	ldi	r24, 0x05	; 5
     9c8:	64 e2       	ldi	r22, 0x24	; 36
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,UNDERSCORE);
     9d0:	86 e0       	ldi	r24, 0x06	; 6
     9d2:	64 e2       	ldi	r22, 0x24	; 36
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR8 = (1<<0);			// colons
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	80 93 f4 00 	sts	0x00F4, r24

	if(sub_display == 2) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     9e0:	90 91 7e 01 	lds	r25, 0x017E
     9e4:	92 30       	cpi	r25, 0x02	; 2
     9e6:	31 f0       	breq	.+12     	; 0x9f4 <__stack+0x4f5>
	if(sub_display == 3) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     9e8:	93 30       	cpi	r25, 0x03	; 3
     9ea:	21 f0       	breq	.+8      	; 0x9f4 <__stack+0x4f5>
	if(sub_display == 4) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     9ec:	94 30       	cpi	r25, 0x04	; 4
     9ee:	11 f0       	breq	.+4      	; 0x9f4 <__stack+0x4f5>
	if(sub_display == 5) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     9f0:	95 30       	cpi	r25, 0x05	; 5
     9f2:	21 f4       	brne	.+8      	; 0x9fc <__stack+0x4fd>
     9f4:	80 91 ec 00 	lds	r24, 0x00EC
     9f8:	84 60       	ori	r24, 0x04	; 4
     9fa:	0b c0       	rjmp	.+22     	; 0xa12 <__stack+0x513>
	if(sub_display == 6) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     9fc:	96 30       	cpi	r25, 0x06	; 6
     9fe:	31 f0       	breq	.+12     	; 0xa0c <__stack+0x50d>
	if(sub_display == 7) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     a00:	97 30       	cpi	r25, 0x07	; 7
     a02:	21 f0       	breq	.+8      	; 0xa0c <__stack+0x50d>
	if(sub_display == 8) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     a04:	98 30       	cpi	r25, 0x08	; 8
     a06:	11 f0       	breq	.+4      	; 0xa0c <__stack+0x50d>
	if(sub_display == 9) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     a08:	99 30       	cpi	r25, 0x09	; 9
     a0a:	29 f4       	brne	.+10     	; 0xa16 <__stack+0x517>
     a0c:	80 91 ec 00 	lds	r24, 0x00EC
     a10:	80 64       	ori	r24, 0x40	; 64
     a12:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
     a16:	1c 99       	sbic	0x03, 4	; 3
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <__stack+0x525>
     a1a:	80 91 7d 01 	lds	r24, 0x017D
     a1e:	8f 5f       	subi	r24, 0xFF	; 255
     a20:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
     a24:	1e 99       	sbic	0x03, 6	; 3
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <__stack+0x533>
     a28:	80 91 7d 01 	lds	r24, 0x017D
     a2c:	8f 5f       	subi	r24, 0xFF	; 255
     a2e:	80 93 7d 01 	sts	0x017D, r24



	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
     a32:	1c 99       	sbic	0x03, 4	; 3
     a34:	08 c0       	rjmp	.+16     	; 0xa46 <__stack+0x547>
     a36:	80 91 7d 01 	lds	r24, 0x017D
     a3a:	85 30       	cpi	r24, 0x05	; 5
     a3c:	21 f4       	brne	.+8      	; 0xa46 <__stack+0x547>
	{
	screenDispNum = 0;
     a3e:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
     a42:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==1))
     a46:	1e 99       	sbic	0x03, 6	; 3
     a48:	0a c0       	rjmp	.+20     	; 0xa5e <__stack+0x55f>
     a4a:	80 91 7d 01 	lds	r24, 0x017D
     a4e:	85 30       	cpi	r24, 0x05	; 5
     a50:	31 f4       	brne	.+12     	; 0xa5e <__stack+0x55f>
     a52:	91 30       	cpi	r25, 0x01	; 1
     a54:	21 f4       	brne	.+8      	; 0xa5e <__stack+0x55f>
	{
	screenDispNum = 1;
     a56:	90 93 7c 01 	sts	0x017C, r25
	button_wait_time = 0;
     a5a:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==2))
     a5e:	1e 99       	sbic	0x03, 6	; 3
     a60:	0b c0       	rjmp	.+22     	; 0xa78 <__stack+0x579>
     a62:	80 91 7d 01 	lds	r24, 0x017D
     a66:	85 30       	cpi	r24, 0x05	; 5
     a68:	39 f4       	brne	.+14     	; 0xa78 <__stack+0x579>
     a6a:	92 30       	cpi	r25, 0x02	; 2
     a6c:	29 f4       	brne	.+10     	; 0xa78 <__stack+0x579>
	{
	screenDispNum = 12;
     a6e:	8c e0       	ldi	r24, 0x0C	; 12
     a70:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     a74:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==3))
     a78:	1e 99       	sbic	0x03, 6	; 3
     a7a:	0b c0       	rjmp	.+22     	; 0xa92 <__stack+0x593>
     a7c:	80 91 7d 01 	lds	r24, 0x017D
     a80:	85 30       	cpi	r24, 0x05	; 5
     a82:	39 f4       	brne	.+14     	; 0xa92 <__stack+0x593>
     a84:	93 30       	cpi	r25, 0x03	; 3
     a86:	29 f4       	brne	.+10     	; 0xa92 <__stack+0x593>
	{
	screenDispNum = 13;
     a88:	8d e0       	ldi	r24, 0x0D	; 13
     a8a:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     a8e:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==4))
     a92:	1e 99       	sbic	0x03, 6	; 3
     a94:	0b c0       	rjmp	.+22     	; 0xaac <__stack+0x5ad>
     a96:	80 91 7d 01 	lds	r24, 0x017D
     a9a:	85 30       	cpi	r24, 0x05	; 5
     a9c:	39 f4       	brne	.+14     	; 0xaac <__stack+0x5ad>
     a9e:	94 30       	cpi	r25, 0x04	; 4
     aa0:	29 f4       	brne	.+10     	; 0xaac <__stack+0x5ad>
	{
	screenDispNum = 16;
     aa2:	80 e1       	ldi	r24, 0x10	; 16
     aa4:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     aa8:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==5))
     aac:	1e 99       	sbic	0x03, 6	; 3
     aae:	0b c0       	rjmp	.+22     	; 0xac6 <__stack+0x5c7>
     ab0:	80 91 7d 01 	lds	r24, 0x017D
     ab4:	85 30       	cpi	r24, 0x05	; 5
     ab6:	39 f4       	brne	.+14     	; 0xac6 <__stack+0x5c7>
     ab8:	95 30       	cpi	r25, 0x05	; 5
     aba:	29 f4       	brne	.+10     	; 0xac6 <__stack+0x5c7>
	{
	screenDispNum = 17;
     abc:	81 e1       	ldi	r24, 0x11	; 17
     abe:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     ac2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==6))
     ac6:	1e 99       	sbic	0x03, 6	; 3
     ac8:	0b c0       	rjmp	.+22     	; 0xae0 <__stack+0x5e1>
     aca:	80 91 7d 01 	lds	r24, 0x017D
     ace:	85 30       	cpi	r24, 0x05	; 5
     ad0:	39 f4       	brne	.+14     	; 0xae0 <__stack+0x5e1>
     ad2:	96 30       	cpi	r25, 0x06	; 6
     ad4:	29 f4       	brne	.+10     	; 0xae0 <__stack+0x5e1>
	{
	screenDispNum = 23;
     ad6:	87 e1       	ldi	r24, 0x17	; 23
     ad8:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     adc:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==7))
     ae0:	1e 99       	sbic	0x03, 6	; 3
     ae2:	0b c0       	rjmp	.+22     	; 0xafa <__stack+0x5fb>
     ae4:	80 91 7d 01 	lds	r24, 0x017D
     ae8:	85 30       	cpi	r24, 0x05	; 5
     aea:	39 f4       	brne	.+14     	; 0xafa <__stack+0x5fb>
     aec:	97 30       	cpi	r25, 0x07	; 7
     aee:	29 f4       	brne	.+10     	; 0xafa <__stack+0x5fb>
	{
	screenDispNum = 24;
     af0:	88 e1       	ldi	r24, 0x18	; 24
     af2:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     af6:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==8))
     afa:	1e 99       	sbic	0x03, 6	; 3
     afc:	0b c0       	rjmp	.+22     	; 0xb14 <__stack+0x615>
     afe:	80 91 7d 01 	lds	r24, 0x017D
     b02:	85 30       	cpi	r24, 0x05	; 5
     b04:	39 f4       	brne	.+14     	; 0xb14 <__stack+0x615>
     b06:	98 30       	cpi	r25, 0x08	; 8
     b08:	29 f4       	brne	.+10     	; 0xb14 <__stack+0x615>
	{
	screenDispNum = 27;
     b0a:	8b e1       	ldi	r24, 0x1B	; 27
     b0c:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     b10:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==9))
     b14:	1e 99       	sbic	0x03, 6	; 3
     b16:	0b c0       	rjmp	.+22     	; 0xb2e <__stack+0x62f>
     b18:	80 91 7d 01 	lds	r24, 0x017D
     b1c:	85 30       	cpi	r24, 0x05	; 5
     b1e:	39 f4       	brne	.+14     	; 0xb2e <__stack+0x62f>
     b20:	99 30       	cpi	r25, 0x09	; 9
     b22:	29 f4       	brne	.+10     	; 0xb2e <__stack+0x62f>
	{
	screenDispNum = 28;
     b24:	8c e1       	ldi	r24, 0x1C	; 28
     b26:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     b2a:	10 92 7d 01 	sts	0x017D, r1
	}

	
	if(button_pressed <3)
     b2e:	80 91 54 01 	lds	r24, 0x0154
     b32:	83 30       	cpi	r24, 0x03	; 3
     b34:	40 f4       	brcc	.+16     	; 0xb46 <__stack+0x647>
	{
	hr_tens_temp = button_pressed;
     b36:	80 93 7b 01 	sts	0x017B, r24
	button_pressed = 12;		// 12 is nothing ie no button pressed
     b3a:	8c e0       	ldi	r24, 0x0C	; 12
     b3c:	80 93 54 01 	sts	0x0154, r24
	screenDispNum = 5;
     b40:	85 e0       	ldi	r24, 0x05	; 5
     b42:	80 93 7c 01 	sts	0x017C, r24
	}

	if(button_pressed == 10)
     b46:	80 91 54 01 	lds	r24, 0x0154
     b4a:	8a 30       	cpi	r24, 0x0A	; 10
     b4c:	31 f4       	brne	.+12     	; 0xb5a <__stack+0x65b>
	{
	button_pressed = 12;		// 12 is nothing ie no button pressed
     b4e:	8c e0       	ldi	r24, 0x0C	; 12
     b50:	80 93 54 01 	sts	0x0154, r24
	screenDispNum = 4;
     b54:	84 e0       	ldi	r24, 0x04	; 4
     b56:	80 93 7c 01 	sts	0x017C, r24
	}

}

if(screenDispNum == 5)	//  H _ : _ _ : _ _
     b5a:	80 91 7c 01 	lds	r24, 0x017C
     b5e:	85 30       	cpi	r24, 0x05	; 5
     b60:	09 f0       	breq	.+2      	; 0xb64 <__stack+0x665>
     b62:	f5 c0       	rjmp	.+490    	; 0xd4e <__stack+0x84f>
{

	Clear_LCD();
     b64:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,hr_tens_temp);
     b68:	60 91 7b 01 	lds	r22, 0x017B
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,UNDERSCORE);
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	64 e2       	ldi	r22, 0x24	; 36
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,UNDERSCORE);
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	64 e2       	ldi	r22, 0x24	; 36
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,UNDERSCORE);
     b88:	84 e0       	ldi	r24, 0x04	; 4
     b8a:	64 e2       	ldi	r22, 0x24	; 36
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,0);
     b92:	85 e0       	ldi	r24, 0x05	; 5
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,0);
     b9c:	86 e0       	ldi	r24, 0x06	; 6
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR8 = (1<<0);							// colons
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	80 93 f4 00 	sts	0x00F4, r24
	if(sub_display == 2) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     bac:	90 91 7e 01 	lds	r25, 0x017E
     bb0:	92 30       	cpi	r25, 0x02	; 2
     bb2:	31 f0       	breq	.+12     	; 0xbc0 <__stack+0x6c1>
	if(sub_display == 3) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     bb4:	93 30       	cpi	r25, 0x03	; 3
     bb6:	21 f0       	breq	.+8      	; 0xbc0 <__stack+0x6c1>
	if(sub_display == 4) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     bb8:	94 30       	cpi	r25, 0x04	; 4
     bba:	11 f0       	breq	.+4      	; 0xbc0 <__stack+0x6c1>
	if(sub_display == 5) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     bbc:	95 30       	cpi	r25, 0x05	; 5
     bbe:	21 f4       	brne	.+8      	; 0xbc8 <__stack+0x6c9>
     bc0:	80 91 ec 00 	lds	r24, 0x00EC
     bc4:	84 60       	ori	r24, 0x04	; 4
     bc6:	0b c0       	rjmp	.+22     	; 0xbde <__stack+0x6df>
	if(sub_display == 6) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     bc8:	96 30       	cpi	r25, 0x06	; 6
     bca:	31 f0       	breq	.+12     	; 0xbd8 <__stack+0x6d9>
	if(sub_display == 7) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     bcc:	97 30       	cpi	r25, 0x07	; 7
     bce:	21 f0       	breq	.+8      	; 0xbd8 <__stack+0x6d9>
	if(sub_display == 8) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     bd0:	98 30       	cpi	r25, 0x08	; 8
     bd2:	11 f0       	breq	.+4      	; 0xbd8 <__stack+0x6d9>
	if(sub_display == 9) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     bd4:	99 30       	cpi	r25, 0x09	; 9
     bd6:	29 f4       	brne	.+10     	; 0xbe2 <__stack+0x6e3>
     bd8:	80 91 ec 00 	lds	r24, 0x00EC
     bdc:	80 64       	ori	r24, 0x40	; 64
     bde:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
     be2:	1c 99       	sbic	0x03, 4	; 3
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <__stack+0x6f1>
     be6:	80 91 7d 01 	lds	r24, 0x017D
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
     bf0:	1e 99       	sbic	0x03, 6	; 3
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__stack+0x6ff>
     bf4:	80 91 7d 01 	lds	r24, 0x017D
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	80 93 7d 01 	sts	0x017D, r24



	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
     bfe:	1c 99       	sbic	0x03, 4	; 3
     c00:	08 c0       	rjmp	.+16     	; 0xc12 <__stack+0x713>
     c02:	80 91 7d 01 	lds	r24, 0x017D
     c06:	85 30       	cpi	r24, 0x05	; 5
     c08:	21 f4       	brne	.+8      	; 0xc12 <__stack+0x713>
	{
	screenDispNum = 0;
     c0a:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
     c0e:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==1))
     c12:	1e 99       	sbic	0x03, 6	; 3
     c14:	0a c0       	rjmp	.+20     	; 0xc2a <__stack+0x72b>
     c16:	80 91 7d 01 	lds	r24, 0x017D
     c1a:	85 30       	cpi	r24, 0x05	; 5
     c1c:	31 f4       	brne	.+12     	; 0xc2a <__stack+0x72b>
     c1e:	91 30       	cpi	r25, 0x01	; 1
     c20:	21 f4       	brne	.+8      	; 0xc2a <__stack+0x72b>
	{
	screenDispNum = 1;
     c22:	90 93 7c 01 	sts	0x017C, r25
	button_wait_time = 0;
     c26:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==2))
     c2a:	1e 99       	sbic	0x03, 6	; 3
     c2c:	0b c0       	rjmp	.+22     	; 0xc44 <__stack+0x745>
     c2e:	80 91 7d 01 	lds	r24, 0x017D
     c32:	85 30       	cpi	r24, 0x05	; 5
     c34:	39 f4       	brne	.+14     	; 0xc44 <__stack+0x745>
     c36:	92 30       	cpi	r25, 0x02	; 2
     c38:	29 f4       	brne	.+10     	; 0xc44 <__stack+0x745>
	{
	screenDispNum = 12;
     c3a:	8c e0       	ldi	r24, 0x0C	; 12
     c3c:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     c40:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==3))
     c44:	1e 99       	sbic	0x03, 6	; 3
     c46:	0b c0       	rjmp	.+22     	; 0xc5e <__stack+0x75f>
     c48:	80 91 7d 01 	lds	r24, 0x017D
     c4c:	85 30       	cpi	r24, 0x05	; 5
     c4e:	39 f4       	brne	.+14     	; 0xc5e <__stack+0x75f>
     c50:	93 30       	cpi	r25, 0x03	; 3
     c52:	29 f4       	brne	.+10     	; 0xc5e <__stack+0x75f>
	{
	screenDispNum = 13;
     c54:	8d e0       	ldi	r24, 0x0D	; 13
     c56:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     c5a:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==4))
     c5e:	1e 99       	sbic	0x03, 6	; 3
     c60:	0b c0       	rjmp	.+22     	; 0xc78 <__stack+0x779>
     c62:	80 91 7d 01 	lds	r24, 0x017D
     c66:	85 30       	cpi	r24, 0x05	; 5
     c68:	39 f4       	brne	.+14     	; 0xc78 <__stack+0x779>
     c6a:	94 30       	cpi	r25, 0x04	; 4
     c6c:	29 f4       	brne	.+10     	; 0xc78 <__stack+0x779>
	{
	screenDispNum = 16;
     c6e:	80 e1       	ldi	r24, 0x10	; 16
     c70:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     c74:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==5))
     c78:	1e 99       	sbic	0x03, 6	; 3
     c7a:	0b c0       	rjmp	.+22     	; 0xc92 <__stack+0x793>
     c7c:	80 91 7d 01 	lds	r24, 0x017D
     c80:	85 30       	cpi	r24, 0x05	; 5
     c82:	39 f4       	brne	.+14     	; 0xc92 <__stack+0x793>
     c84:	95 30       	cpi	r25, 0x05	; 5
     c86:	29 f4       	brne	.+10     	; 0xc92 <__stack+0x793>
	{
	screenDispNum = 17;
     c88:	81 e1       	ldi	r24, 0x11	; 17
     c8a:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     c8e:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==6))
     c92:	1e 99       	sbic	0x03, 6	; 3
     c94:	0b c0       	rjmp	.+22     	; 0xcac <__stack+0x7ad>
     c96:	80 91 7d 01 	lds	r24, 0x017D
     c9a:	85 30       	cpi	r24, 0x05	; 5
     c9c:	39 f4       	brne	.+14     	; 0xcac <__stack+0x7ad>
     c9e:	96 30       	cpi	r25, 0x06	; 6
     ca0:	29 f4       	brne	.+10     	; 0xcac <__stack+0x7ad>
	{
	screenDispNum = 23;
     ca2:	87 e1       	ldi	r24, 0x17	; 23
     ca4:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     ca8:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==7))
     cac:	1e 99       	sbic	0x03, 6	; 3
     cae:	0b c0       	rjmp	.+22     	; 0xcc6 <__stack+0x7c7>
     cb0:	80 91 7d 01 	lds	r24, 0x017D
     cb4:	85 30       	cpi	r24, 0x05	; 5
     cb6:	39 f4       	brne	.+14     	; 0xcc6 <__stack+0x7c7>
     cb8:	97 30       	cpi	r25, 0x07	; 7
     cba:	29 f4       	brne	.+10     	; 0xcc6 <__stack+0x7c7>
	{
	screenDispNum = 24;
     cbc:	88 e1       	ldi	r24, 0x18	; 24
     cbe:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     cc2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==8))
     cc6:	1e 99       	sbic	0x03, 6	; 3
     cc8:	0b c0       	rjmp	.+22     	; 0xce0 <__stack+0x7e1>
     cca:	80 91 7d 01 	lds	r24, 0x017D
     cce:	85 30       	cpi	r24, 0x05	; 5
     cd0:	39 f4       	brne	.+14     	; 0xce0 <__stack+0x7e1>
     cd2:	98 30       	cpi	r25, 0x08	; 8
     cd4:	29 f4       	brne	.+10     	; 0xce0 <__stack+0x7e1>
	{
	screenDispNum = 27;
     cd6:	8b e1       	ldi	r24, 0x1B	; 27
     cd8:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     cdc:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==9))
     ce0:	1e 99       	sbic	0x03, 6	; 3
     ce2:	0b c0       	rjmp	.+22     	; 0xcfa <__stack+0x7fb>
     ce4:	80 91 7d 01 	lds	r24, 0x017D
     ce8:	85 30       	cpi	r24, 0x05	; 5
     cea:	39 f4       	brne	.+14     	; 0xcfa <__stack+0x7fb>
     cec:	99 30       	cpi	r25, 0x09	; 9
     cee:	29 f4       	brne	.+10     	; 0xcfa <__stack+0x7fb>
	{
	screenDispNum = 28;
     cf0:	8c e1       	ldi	r24, 0x1C	; 28
     cf2:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     cf6:	10 92 7d 01 	sts	0x017D, r1
	}

	
	if(hr_tens_temp <2)
     cfa:	80 91 7b 01 	lds	r24, 0x017B
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	60 f4       	brcc	.+24     	; 0xd1a <__stack+0x81b>
	{
		if(button_pressed <10)
     d02:	80 91 54 01 	lds	r24, 0x0154
     d06:	8a 30       	cpi	r24, 0x0A	; 10
     d08:	40 f4       	brcc	.+16     	; 0xd1a <__stack+0x81b>
		{
		hr_unit_temp = button_pressed;
     d0a:	80 93 7a 01 	sts	0x017A, r24
		button_pressed = 12;		// 12 is nothing ie no button pressed
     d0e:	8c e0       	ldi	r24, 0x0C	; 12
     d10:	80 93 54 01 	sts	0x0154, r24
		screenDispNum = 6;
     d14:	86 e0       	ldi	r24, 0x06	; 6
     d16:	80 93 7c 01 	sts	0x017C, r24
		}
	}

	if(hr_tens_temp == 2)
     d1a:	80 91 7b 01 	lds	r24, 0x017B
     d1e:	82 30       	cpi	r24, 0x02	; 2
     d20:	61 f4       	brne	.+24     	; 0xd3a <__stack+0x83b>
	{
		if(button_pressed <4)
     d22:	80 91 54 01 	lds	r24, 0x0154
     d26:	84 30       	cpi	r24, 0x04	; 4
     d28:	40 f4       	brcc	.+16     	; 0xd3a <__stack+0x83b>
		{
		hr_unit_temp = button_pressed;
     d2a:	80 93 7a 01 	sts	0x017A, r24
		button_pressed = 12;		// 12 is nothing ie no button pressed
     d2e:	8c e0       	ldi	r24, 0x0C	; 12
     d30:	80 93 54 01 	sts	0x0154, r24
		screenDispNum = 6;
     d34:	86 e0       	ldi	r24, 0x06	; 6
     d36:	80 93 7c 01 	sts	0x017C, r24
		}
	}



	if(button_pressed == 10)
     d3a:	80 91 54 01 	lds	r24, 0x0154
     d3e:	8a 30       	cpi	r24, 0x0A	; 10
     d40:	31 f4       	brne	.+12     	; 0xd4e <__stack+0x84f>
	{
	button_pressed = 12;		// 12 is nothing ie no button pressed
     d42:	8c e0       	ldi	r24, 0x0C	; 12
     d44:	80 93 54 01 	sts	0x0154, r24
	screenDispNum = 4;
     d48:	84 e0       	ldi	r24, 0x04	; 4
     d4a:	80 93 7c 01 	sts	0x017C, r24
	}

}

if(screenDispNum == 6)	//  H H : _ _ : _ _
     d4e:	80 91 7c 01 	lds	r24, 0x017C
     d52:	86 30       	cpi	r24, 0x06	; 6
     d54:	09 f0       	breq	.+2      	; 0xd58 <__stack+0x859>
     d56:	e2 c0       	rjmp	.+452    	; 0xf1c <__stack+0xa1d>
{
	Clear_LCD();
     d58:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,hr_tens_temp);
     d5c:	60 91 7b 01 	lds	r22, 0x017B
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,hr_unit_temp);
     d68:	60 91 7a 01 	lds	r22, 0x017A
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,UNDERSCORE);
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	64 e2       	ldi	r22, 0x24	; 36
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,UNDERSCORE);
     d7e:	84 e0       	ldi	r24, 0x04	; 4
     d80:	64 e2       	ldi	r22, 0x24	; 36
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,0);
     d88:	85 e0       	ldi	r24, 0x05	; 5
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,0);
     d92:	86 e0       	ldi	r24, 0x06	; 6
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR8 = (1<<0);							// colons
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 f4 00 	sts	0x00F4, r24
	if(sub_display == 2) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     da2:	90 91 7e 01 	lds	r25, 0x017E
     da6:	92 30       	cpi	r25, 0x02	; 2
     da8:	31 f0       	breq	.+12     	; 0xdb6 <__stack+0x8b7>
	if(sub_display == 3) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     daa:	93 30       	cpi	r25, 0x03	; 3
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__stack+0x8b7>
	if(sub_display == 4) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     dae:	94 30       	cpi	r25, 0x04	; 4
     db0:	11 f0       	breq	.+4      	; 0xdb6 <__stack+0x8b7>
	if(sub_display == 5) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     db2:	95 30       	cpi	r25, 0x05	; 5
     db4:	21 f4       	brne	.+8      	; 0xdbe <__stack+0x8bf>
     db6:	80 91 ec 00 	lds	r24, 0x00EC
     dba:	84 60       	ori	r24, 0x04	; 4
     dbc:	0b c0       	rjmp	.+22     	; 0xdd4 <__stack+0x8d5>
	if(sub_display == 6) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     dbe:	96 30       	cpi	r25, 0x06	; 6
     dc0:	31 f0       	breq	.+12     	; 0xdce <__stack+0x8cf>
	if(sub_display == 7) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     dc2:	97 30       	cpi	r25, 0x07	; 7
     dc4:	21 f0       	breq	.+8      	; 0xdce <__stack+0x8cf>
	if(sub_display == 8) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     dc6:	98 30       	cpi	r25, 0x08	; 8
     dc8:	11 f0       	breq	.+4      	; 0xdce <__stack+0x8cf>
	if(sub_display == 9) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     dca:	99 30       	cpi	r25, 0x09	; 9
     dcc:	29 f4       	brne	.+10     	; 0xdd8 <__stack+0x8d9>
     dce:	80 91 ec 00 	lds	r24, 0x00EC
     dd2:	80 64       	ori	r24, 0x40	; 64
     dd4:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
     dd8:	1c 99       	sbic	0x03, 4	; 3
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <__stack+0x8e7>
     ddc:	80 91 7d 01 	lds	r24, 0x017D
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
     de6:	1e 99       	sbic	0x03, 6	; 3
     de8:	05 c0       	rjmp	.+10     	; 0xdf4 <__stack+0x8f5>
     dea:	80 91 7d 01 	lds	r24, 0x017D
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	80 93 7d 01 	sts	0x017D, r24



	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
     df4:	1c 99       	sbic	0x03, 4	; 3
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <__stack+0x909>
     df8:	80 91 7d 01 	lds	r24, 0x017D
     dfc:	85 30       	cpi	r24, 0x05	; 5
     dfe:	21 f4       	brne	.+8      	; 0xe08 <__stack+0x909>
	{
	screenDispNum = 0;
     e00:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
     e04:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==1))
     e08:	1e 99       	sbic	0x03, 6	; 3
     e0a:	0a c0       	rjmp	.+20     	; 0xe20 <__stack+0x921>
     e0c:	80 91 7d 01 	lds	r24, 0x017D
     e10:	85 30       	cpi	r24, 0x05	; 5
     e12:	31 f4       	brne	.+12     	; 0xe20 <__stack+0x921>
     e14:	91 30       	cpi	r25, 0x01	; 1
     e16:	21 f4       	brne	.+8      	; 0xe20 <__stack+0x921>
	{
	screenDispNum = 1;
     e18:	90 93 7c 01 	sts	0x017C, r25
	button_wait_time = 0;
     e1c:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==2))
     e20:	1e 99       	sbic	0x03, 6	; 3
     e22:	0b c0       	rjmp	.+22     	; 0xe3a <__stack+0x93b>
     e24:	80 91 7d 01 	lds	r24, 0x017D
     e28:	85 30       	cpi	r24, 0x05	; 5
     e2a:	39 f4       	brne	.+14     	; 0xe3a <__stack+0x93b>
     e2c:	92 30       	cpi	r25, 0x02	; 2
     e2e:	29 f4       	brne	.+10     	; 0xe3a <__stack+0x93b>
	{
	screenDispNum = 12;
     e30:	8c e0       	ldi	r24, 0x0C	; 12
     e32:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     e36:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==3))
     e3a:	1e 99       	sbic	0x03, 6	; 3
     e3c:	0b c0       	rjmp	.+22     	; 0xe54 <__stack+0x955>
     e3e:	80 91 7d 01 	lds	r24, 0x017D
     e42:	85 30       	cpi	r24, 0x05	; 5
     e44:	39 f4       	brne	.+14     	; 0xe54 <__stack+0x955>
     e46:	93 30       	cpi	r25, 0x03	; 3
     e48:	29 f4       	brne	.+10     	; 0xe54 <__stack+0x955>
	{
	screenDispNum = 13;
     e4a:	8d e0       	ldi	r24, 0x0D	; 13
     e4c:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     e50:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==4))
     e54:	1e 99       	sbic	0x03, 6	; 3
     e56:	0b c0       	rjmp	.+22     	; 0xe6e <__stack+0x96f>
     e58:	80 91 7d 01 	lds	r24, 0x017D
     e5c:	85 30       	cpi	r24, 0x05	; 5
     e5e:	39 f4       	brne	.+14     	; 0xe6e <__stack+0x96f>
     e60:	94 30       	cpi	r25, 0x04	; 4
     e62:	29 f4       	brne	.+10     	; 0xe6e <__stack+0x96f>
	{
	screenDispNum = 16;
     e64:	80 e1       	ldi	r24, 0x10	; 16
     e66:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     e6a:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==5))
     e6e:	1e 99       	sbic	0x03, 6	; 3
     e70:	0b c0       	rjmp	.+22     	; 0xe88 <__stack+0x989>
     e72:	80 91 7d 01 	lds	r24, 0x017D
     e76:	85 30       	cpi	r24, 0x05	; 5
     e78:	39 f4       	brne	.+14     	; 0xe88 <__stack+0x989>
     e7a:	95 30       	cpi	r25, 0x05	; 5
     e7c:	29 f4       	brne	.+10     	; 0xe88 <__stack+0x989>
	{
	screenDispNum = 17;
     e7e:	81 e1       	ldi	r24, 0x11	; 17
     e80:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     e84:	10 92 7d 01 	sts	0x017D, r1
	}
	
	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==6))
     e88:	1e 99       	sbic	0x03, 6	; 3
     e8a:	0b c0       	rjmp	.+22     	; 0xea2 <__stack+0x9a3>
     e8c:	80 91 7d 01 	lds	r24, 0x017D
     e90:	85 30       	cpi	r24, 0x05	; 5
     e92:	39 f4       	brne	.+14     	; 0xea2 <__stack+0x9a3>
     e94:	96 30       	cpi	r25, 0x06	; 6
     e96:	29 f4       	brne	.+10     	; 0xea2 <__stack+0x9a3>
	{
	screenDispNum = 23;
     e98:	87 e1       	ldi	r24, 0x17	; 23
     e9a:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     e9e:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==7))
     ea2:	1e 99       	sbic	0x03, 6	; 3
     ea4:	0b c0       	rjmp	.+22     	; 0xebc <__stack+0x9bd>
     ea6:	80 91 7d 01 	lds	r24, 0x017D
     eaa:	85 30       	cpi	r24, 0x05	; 5
     eac:	39 f4       	brne	.+14     	; 0xebc <__stack+0x9bd>
     eae:	97 30       	cpi	r25, 0x07	; 7
     eb0:	29 f4       	brne	.+10     	; 0xebc <__stack+0x9bd>
	{
	screenDispNum = 24;
     eb2:	88 e1       	ldi	r24, 0x18	; 24
     eb4:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     eb8:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==8))
     ebc:	1e 99       	sbic	0x03, 6	; 3
     ebe:	0b c0       	rjmp	.+22     	; 0xed6 <__stack+0x9d7>
     ec0:	80 91 7d 01 	lds	r24, 0x017D
     ec4:	85 30       	cpi	r24, 0x05	; 5
     ec6:	39 f4       	brne	.+14     	; 0xed6 <__stack+0x9d7>
     ec8:	98 30       	cpi	r25, 0x08	; 8
     eca:	29 f4       	brne	.+10     	; 0xed6 <__stack+0x9d7>
	{
	screenDispNum = 27;
     ecc:	8b e1       	ldi	r24, 0x1B	; 27
     ece:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     ed2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==9))
     ed6:	1e 99       	sbic	0x03, 6	; 3
     ed8:	0b c0       	rjmp	.+22     	; 0xef0 <__stack+0x9f1>
     eda:	80 91 7d 01 	lds	r24, 0x017D
     ede:	85 30       	cpi	r24, 0x05	; 5
     ee0:	39 f4       	brne	.+14     	; 0xef0 <__stack+0x9f1>
     ee2:	99 30       	cpi	r25, 0x09	; 9
     ee4:	29 f4       	brne	.+10     	; 0xef0 <__stack+0x9f1>
	{
	screenDispNum = 28;
     ee6:	8c e1       	ldi	r24, 0x1C	; 28
     ee8:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
     eec:	10 92 7d 01 	sts	0x017D, r1
	}


	if(button_pressed <6)
     ef0:	80 91 54 01 	lds	r24, 0x0154
     ef4:	86 30       	cpi	r24, 0x06	; 6
     ef6:	40 f4       	brcc	.+16     	; 0xf08 <__stack+0xa09>
	{
	min_tens_temp = button_pressed;
     ef8:	80 93 79 01 	sts	0x0179, r24
	button_pressed = 12;		// 12 is nothing ie no button pressed
     efc:	8c e0       	ldi	r24, 0x0C	; 12
     efe:	80 93 54 01 	sts	0x0154, r24
	screenDispNum = 7;
     f02:	87 e0       	ldi	r24, 0x07	; 7
     f04:	80 93 7c 01 	sts	0x017C, r24
	}

	if(button_pressed == 10)
     f08:	80 91 54 01 	lds	r24, 0x0154
     f0c:	8a 30       	cpi	r24, 0x0A	; 10
     f0e:	31 f4       	brne	.+12     	; 0xf1c <__stack+0xa1d>
	{
	button_pressed = 12;		// 12 is nothing ie no button pressed
     f10:	8c e0       	ldi	r24, 0x0C	; 12
     f12:	80 93 54 01 	sts	0x0154, r24
	screenDispNum = 4;
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	80 93 7c 01 	sts	0x017C, r24
	}


}

if(screenDispNum == 7)	//  H H : M _ : _ _
     f1c:	80 91 7c 01 	lds	r24, 0x017C
     f20:	87 30       	cpi	r24, 0x07	; 7
     f22:	09 f0       	breq	.+2      	; 0xf26 <__stack+0xa27>
     f24:	e3 c0       	rjmp	.+454    	; 0x10ec <__stack+0xbed>
{
	Clear_LCD();
     f26:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,hr_tens_temp);
     f2a:	60 91 7b 01 	lds	r22, 0x017B
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,hr_unit_temp);
     f36:	60 91 7a 01 	lds	r22, 0x017A
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,min_tens_temp);
     f42:	60 91 79 01 	lds	r22, 0x0179
     f46:	83 e0       	ldi	r24, 0x03	; 3
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,UNDERSCORE);
     f4e:	84 e0       	ldi	r24, 0x04	; 4
     f50:	64 e2       	ldi	r22, 0x24	; 36
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,0);
     f58:	85 e0       	ldi	r24, 0x05	; 5
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,0);
     f62:	86 e0       	ldi	r24, 0x06	; 6
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR8 = (1<<0);							// colons
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	80 93 f4 00 	sts	0x00F4, r24
	if(sub_display == 2) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     f72:	90 91 7e 01 	lds	r25, 0x017E
     f76:	92 30       	cpi	r25, 0x02	; 2
     f78:	31 f0       	breq	.+12     	; 0xf86 <__stack+0xa87>
	if(sub_display == 3) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     f7a:	93 30       	cpi	r25, 0x03	; 3
     f7c:	21 f0       	breq	.+8      	; 0xf86 <__stack+0xa87>
	if(sub_display == 4) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     f7e:	94 30       	cpi	r25, 0x04	; 4
     f80:	11 f0       	breq	.+4      	; 0xf86 <__stack+0xa87>
	if(sub_display == 5) LCDDR0 |= (1<<2); 		// small digit 1 symbol
     f82:	95 30       	cpi	r25, 0x05	; 5
     f84:	21 f4       	brne	.+8      	; 0xf8e <__stack+0xa8f>
     f86:	80 91 ec 00 	lds	r24, 0x00EC
     f8a:	84 60       	ori	r24, 0x04	; 4
     f8c:	0b c0       	rjmp	.+22     	; 0xfa4 <__stack+0xaa5>
	if(sub_display == 6) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     f8e:	96 30       	cpi	r25, 0x06	; 6
     f90:	31 f0       	breq	.+12     	; 0xf9e <__stack+0xa9f>
	if(sub_display == 7) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     f92:	97 30       	cpi	r25, 0x07	; 7
     f94:	21 f0       	breq	.+8      	; 0xf9e <__stack+0xa9f>
	if(sub_display == 8) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     f96:	98 30       	cpi	r25, 0x08	; 8
     f98:	11 f0       	breq	.+4      	; 0xf9e <__stack+0xa9f>
	if(sub_display == 9) LCDDR0 |= (1<<6); 		// small digit 2 symbol
     f9a:	99 30       	cpi	r25, 0x09	; 9
     f9c:	29 f4       	brne	.+10     	; 0xfa8 <__stack+0xaa9>
     f9e:	80 91 ec 00 	lds	r24, 0x00EC
     fa2:	80 64       	ori	r24, 0x40	; 64
     fa4:	80 93 ec 00 	sts	0x00EC, r24


	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
     fa8:	1c 99       	sbic	0x03, 4	; 3
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <__stack+0xab7>
     fac:	80 91 7d 01 	lds	r24, 0x017D
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
     fb6:	1e 99       	sbic	0x03, 6	; 3
     fb8:	05 c0       	rjmp	.+10     	; 0xfc4 <__stack+0xac5>
     fba:	80 91 7d 01 	lds	r24, 0x017D
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	80 93 7d 01 	sts	0x017D, r24



	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
     fc4:	1c 99       	sbic	0x03, 4	; 3
     fc6:	08 c0       	rjmp	.+16     	; 0xfd8 <__stack+0xad9>
     fc8:	80 91 7d 01 	lds	r24, 0x017D
     fcc:	85 30       	cpi	r24, 0x05	; 5
     fce:	21 f4       	brne	.+8      	; 0xfd8 <__stack+0xad9>
	{
	screenDispNum = 0;
     fd0:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
     fd4:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==1))
     fd8:	1e 99       	sbic	0x03, 6	; 3
     fda:	0a c0       	rjmp	.+20     	; 0xff0 <__stack+0xaf1>
     fdc:	80 91 7d 01 	lds	r24, 0x017D
     fe0:	85 30       	cpi	r24, 0x05	; 5
     fe2:	31 f4       	brne	.+12     	; 0xff0 <__stack+0xaf1>
     fe4:	91 30       	cpi	r25, 0x01	; 1
     fe6:	21 f4       	brne	.+8      	; 0xff0 <__stack+0xaf1>
	{
	screenDispNum = 1;
     fe8:	90 93 7c 01 	sts	0x017C, r25
	button_wait_time = 0;
     fec:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==2))
     ff0:	1e 99       	sbic	0x03, 6	; 3
     ff2:	0b c0       	rjmp	.+22     	; 0x100a <__stack+0xb0b>
     ff4:	80 91 7d 01 	lds	r24, 0x017D
     ff8:	85 30       	cpi	r24, 0x05	; 5
     ffa:	39 f4       	brne	.+14     	; 0x100a <__stack+0xb0b>
     ffc:	92 30       	cpi	r25, 0x02	; 2
     ffe:	29 f4       	brne	.+10     	; 0x100a <__stack+0xb0b>
	{
	screenDispNum = 12;
    1000:	8c e0       	ldi	r24, 0x0C	; 12
    1002:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1006:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==3))
    100a:	1e 99       	sbic	0x03, 6	; 3
    100c:	0b c0       	rjmp	.+22     	; 0x1024 <__stack+0xb25>
    100e:	80 91 7d 01 	lds	r24, 0x017D
    1012:	85 30       	cpi	r24, 0x05	; 5
    1014:	39 f4       	brne	.+14     	; 0x1024 <__stack+0xb25>
    1016:	93 30       	cpi	r25, 0x03	; 3
    1018:	29 f4       	brne	.+10     	; 0x1024 <__stack+0xb25>
	{
	screenDispNum = 13;
    101a:	8d e0       	ldi	r24, 0x0D	; 13
    101c:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1020:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==4))
    1024:	1e 99       	sbic	0x03, 6	; 3
    1026:	0b c0       	rjmp	.+22     	; 0x103e <__stack+0xb3f>
    1028:	80 91 7d 01 	lds	r24, 0x017D
    102c:	85 30       	cpi	r24, 0x05	; 5
    102e:	39 f4       	brne	.+14     	; 0x103e <__stack+0xb3f>
    1030:	94 30       	cpi	r25, 0x04	; 4
    1032:	29 f4       	brne	.+10     	; 0x103e <__stack+0xb3f>
	{
	screenDispNum = 16;
    1034:	80 e1       	ldi	r24, 0x10	; 16
    1036:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    103a:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==5))
    103e:	1e 99       	sbic	0x03, 6	; 3
    1040:	0b c0       	rjmp	.+22     	; 0x1058 <__stack+0xb59>
    1042:	80 91 7d 01 	lds	r24, 0x017D
    1046:	85 30       	cpi	r24, 0x05	; 5
    1048:	39 f4       	brne	.+14     	; 0x1058 <__stack+0xb59>
    104a:	95 30       	cpi	r25, 0x05	; 5
    104c:	29 f4       	brne	.+10     	; 0x1058 <__stack+0xb59>
	{
	screenDispNum = 17;
    104e:	81 e1       	ldi	r24, 0x11	; 17
    1050:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1054:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==6))
    1058:	1e 99       	sbic	0x03, 6	; 3
    105a:	0b c0       	rjmp	.+22     	; 0x1072 <__stack+0xb73>
    105c:	80 91 7d 01 	lds	r24, 0x017D
    1060:	85 30       	cpi	r24, 0x05	; 5
    1062:	39 f4       	brne	.+14     	; 0x1072 <__stack+0xb73>
    1064:	96 30       	cpi	r25, 0x06	; 6
    1066:	29 f4       	brne	.+10     	; 0x1072 <__stack+0xb73>
	{
	screenDispNum = 23;
    1068:	87 e1       	ldi	r24, 0x17	; 23
    106a:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    106e:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==7))
    1072:	1e 99       	sbic	0x03, 6	; 3
    1074:	0b c0       	rjmp	.+22     	; 0x108c <__stack+0xb8d>
    1076:	80 91 7d 01 	lds	r24, 0x017D
    107a:	85 30       	cpi	r24, 0x05	; 5
    107c:	39 f4       	brne	.+14     	; 0x108c <__stack+0xb8d>
    107e:	97 30       	cpi	r25, 0x07	; 7
    1080:	29 f4       	brne	.+10     	; 0x108c <__stack+0xb8d>
	{
	screenDispNum = 24;
    1082:	88 e1       	ldi	r24, 0x18	; 24
    1084:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1088:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==8))
    108c:	1e 99       	sbic	0x03, 6	; 3
    108e:	0b c0       	rjmp	.+22     	; 0x10a6 <__stack+0xba7>
    1090:	80 91 7d 01 	lds	r24, 0x017D
    1094:	85 30       	cpi	r24, 0x05	; 5
    1096:	39 f4       	brne	.+14     	; 0x10a6 <__stack+0xba7>
    1098:	98 30       	cpi	r25, 0x08	; 8
    109a:	29 f4       	brne	.+10     	; 0x10a6 <__stack+0xba7>
	{
	screenDispNum = 27;
    109c:	8b e1       	ldi	r24, 0x1B	; 27
    109e:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    10a2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==9))
    10a6:	1e 99       	sbic	0x03, 6	; 3
    10a8:	0b c0       	rjmp	.+22     	; 0x10c0 <__stack+0xbc1>
    10aa:	80 91 7d 01 	lds	r24, 0x017D
    10ae:	85 30       	cpi	r24, 0x05	; 5
    10b0:	39 f4       	brne	.+14     	; 0x10c0 <__stack+0xbc1>
    10b2:	99 30       	cpi	r25, 0x09	; 9
    10b4:	29 f4       	brne	.+10     	; 0x10c0 <__stack+0xbc1>
	{
	screenDispNum = 28;
    10b6:	8c e1       	ldi	r24, 0x1C	; 28
    10b8:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    10bc:	10 92 7d 01 	sts	0x017D, r1
	}

	

	if(button_pressed <10)
    10c0:	80 91 54 01 	lds	r24, 0x0154
    10c4:	8a 30       	cpi	r24, 0x0A	; 10
    10c6:	40 f4       	brcc	.+16     	; 0x10d8 <__stack+0xbd9>
	{
	min_unit_temp = button_pressed;
    10c8:	80 93 78 01 	sts	0x0178, r24
	button_pressed = 12;		// 12 is nothing ie no button pressed
    10cc:	8c e0       	ldi	r24, 0x0C	; 12
    10ce:	80 93 54 01 	sts	0x0154, r24
	screenDispNum = 8;
    10d2:	88 e0       	ldi	r24, 0x08	; 8
    10d4:	80 93 7c 01 	sts	0x017C, r24
	}

	if(button_pressed == 10)
    10d8:	80 91 54 01 	lds	r24, 0x0154
    10dc:	8a 30       	cpi	r24, 0x0A	; 10
    10de:	31 f4       	brne	.+12     	; 0x10ec <__stack+0xbed>
	{
	button_pressed = 12;		// 12 is nothing ie no button pressed
    10e0:	8c e0       	ldi	r24, 0x0C	; 12
    10e2:	80 93 54 01 	sts	0x0154, r24
	screenDispNum = 4;
    10e6:	84 e0       	ldi	r24, 0x04	; 4
    10e8:	80 93 7c 01 	sts	0x017C, r24
	}

}

if(screenDispNum == 8)	//  H H : M M : _ _
    10ec:	80 91 7c 01 	lds	r24, 0x017C
    10f0:	88 30       	cpi	r24, 0x08	; 8
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <__stack+0xbf7>
    10f4:	e2 c0       	rjmp	.+452    	; 0x12ba <__stack+0xdbb>
{
	Clear_LCD();
    10f6:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,hr_tens_temp);
    10fa:	60 91 7b 01 	lds	r22, 0x017B
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,hr_unit_temp);
    1106:	60 91 7a 01 	lds	r22, 0x017A
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,min_tens_temp);
    1112:	60 91 79 01 	lds	r22, 0x0179
    1116:	83 e0       	ldi	r24, 0x03	; 3
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,min_unit_temp);
    111e:	60 91 78 01 	lds	r22, 0x0178
    1122:	84 e0       	ldi	r24, 0x04	; 4
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,0);
    112a:	85 e0       	ldi	r24, 0x05	; 5
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,0);
    1134:	86 e0       	ldi	r24, 0x06	; 6
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR8 = (1<<0);							// colons
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	80 93 f4 00 	sts	0x00F4, r24
	if(sub_display == 2) LCDDR0 |= (1<<2); 		// small digit 1 symbol
    1144:	90 91 7e 01 	lds	r25, 0x017E
    1148:	92 30       	cpi	r25, 0x02	; 2
    114a:	31 f0       	breq	.+12     	; 0x1158 <__stack+0xc59>
	if(sub_display == 3) LCDDR0 |= (1<<2); 		// small digit 1 symbol
    114c:	93 30       	cpi	r25, 0x03	; 3
    114e:	21 f0       	breq	.+8      	; 0x1158 <__stack+0xc59>
	if(sub_display == 4) LCDDR0 |= (1<<2); 		// small digit 1 symbol
    1150:	94 30       	cpi	r25, 0x04	; 4
    1152:	11 f0       	breq	.+4      	; 0x1158 <__stack+0xc59>
	if(sub_display == 5) LCDDR0 |= (1<<2); 		// small digit 1 symbol
    1154:	95 30       	cpi	r25, 0x05	; 5
    1156:	21 f4       	brne	.+8      	; 0x1160 <__stack+0xc61>
    1158:	80 91 ec 00 	lds	r24, 0x00EC
    115c:	84 60       	ori	r24, 0x04	; 4
    115e:	0b c0       	rjmp	.+22     	; 0x1176 <__stack+0xc77>
	if(sub_display == 6) LCDDR0 |= (1<<6); 		// small digit 2 symbol
    1160:	96 30       	cpi	r25, 0x06	; 6
    1162:	31 f0       	breq	.+12     	; 0x1170 <__stack+0xc71>
	if(sub_display == 7) LCDDR0 |= (1<<6); 		// small digit 2 symbol
    1164:	97 30       	cpi	r25, 0x07	; 7
    1166:	21 f0       	breq	.+8      	; 0x1170 <__stack+0xc71>
	if(sub_display == 8) LCDDR0 |= (1<<6); 		// small digit 2 symbol
    1168:	98 30       	cpi	r25, 0x08	; 8
    116a:	11 f0       	breq	.+4      	; 0x1170 <__stack+0xc71>
	if(sub_display == 9) LCDDR0 |= (1<<6); 		// small digit 2 symbol
    116c:	99 30       	cpi	r25, 0x09	; 9
    116e:	29 f4       	brne	.+10     	; 0x117a <__stack+0xc7b>
    1170:	80 91 ec 00 	lds	r24, 0x00EC
    1174:	80 64       	ori	r24, 0x40	; 64
    1176:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    117a:	1c 99       	sbic	0x03, 4	; 3
    117c:	05 c0       	rjmp	.+10     	; 0x1188 <__stack+0xc89>
    117e:	80 91 7d 01 	lds	r24, 0x017D
    1182:	8f 5f       	subi	r24, 0xFF	; 255
    1184:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    1188:	1e 99       	sbic	0x03, 6	; 3
    118a:	05 c0       	rjmp	.+10     	; 0x1196 <__stack+0xc97>
    118c:	80 91 7d 01 	lds	r24, 0x017D
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	80 93 7d 01 	sts	0x017D, r24



	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    1196:	1c 99       	sbic	0x03, 4	; 3
    1198:	08 c0       	rjmp	.+16     	; 0x11aa <__stack+0xcab>
    119a:	80 91 7d 01 	lds	r24, 0x017D
    119e:	85 30       	cpi	r24, 0x05	; 5
    11a0:	21 f4       	brne	.+8      	; 0x11aa <__stack+0xcab>
	{
	screenDispNum = 0;
    11a2:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    11a6:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==1))
    11aa:	1e 99       	sbic	0x03, 6	; 3
    11ac:	0a c0       	rjmp	.+20     	; 0x11c2 <__stack+0xcc3>
    11ae:	80 91 7d 01 	lds	r24, 0x017D
    11b2:	85 30       	cpi	r24, 0x05	; 5
    11b4:	31 f4       	brne	.+12     	; 0x11c2 <__stack+0xcc3>
    11b6:	91 30       	cpi	r25, 0x01	; 1
    11b8:	21 f4       	brne	.+8      	; 0x11c2 <__stack+0xcc3>
	{
	screenDispNum = 1;
    11ba:	90 93 7c 01 	sts	0x017C, r25
	button_wait_time = 0;
    11be:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==2))
    11c2:	1e 99       	sbic	0x03, 6	; 3
    11c4:	0b c0       	rjmp	.+22     	; 0x11dc <__stack+0xcdd>
    11c6:	80 91 7d 01 	lds	r24, 0x017D
    11ca:	85 30       	cpi	r24, 0x05	; 5
    11cc:	39 f4       	brne	.+14     	; 0x11dc <__stack+0xcdd>
    11ce:	92 30       	cpi	r25, 0x02	; 2
    11d0:	29 f4       	brne	.+10     	; 0x11dc <__stack+0xcdd>
	{
	screenDispNum = 12;
    11d2:	8c e0       	ldi	r24, 0x0C	; 12
    11d4:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    11d8:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==3))
    11dc:	1e 99       	sbic	0x03, 6	; 3
    11de:	0b c0       	rjmp	.+22     	; 0x11f6 <__stack+0xcf7>
    11e0:	80 91 7d 01 	lds	r24, 0x017D
    11e4:	85 30       	cpi	r24, 0x05	; 5
    11e6:	39 f4       	brne	.+14     	; 0x11f6 <__stack+0xcf7>
    11e8:	93 30       	cpi	r25, 0x03	; 3
    11ea:	29 f4       	brne	.+10     	; 0x11f6 <__stack+0xcf7>
	{
	screenDispNum = 13;
    11ec:	8d e0       	ldi	r24, 0x0D	; 13
    11ee:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    11f2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==4))
    11f6:	1e 99       	sbic	0x03, 6	; 3
    11f8:	0b c0       	rjmp	.+22     	; 0x1210 <__stack+0xd11>
    11fa:	80 91 7d 01 	lds	r24, 0x017D
    11fe:	85 30       	cpi	r24, 0x05	; 5
    1200:	39 f4       	brne	.+14     	; 0x1210 <__stack+0xd11>
    1202:	94 30       	cpi	r25, 0x04	; 4
    1204:	29 f4       	brne	.+10     	; 0x1210 <__stack+0xd11>
	{
	screenDispNum = 16;
    1206:	80 e1       	ldi	r24, 0x10	; 16
    1208:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    120c:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==5))
    1210:	1e 99       	sbic	0x03, 6	; 3
    1212:	0b c0       	rjmp	.+22     	; 0x122a <__stack+0xd2b>
    1214:	80 91 7d 01 	lds	r24, 0x017D
    1218:	85 30       	cpi	r24, 0x05	; 5
    121a:	39 f4       	brne	.+14     	; 0x122a <__stack+0xd2b>
    121c:	95 30       	cpi	r25, 0x05	; 5
    121e:	29 f4       	brne	.+10     	; 0x122a <__stack+0xd2b>
	{
	screenDispNum = 17;
    1220:	81 e1       	ldi	r24, 0x11	; 17
    1222:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1226:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==6))
    122a:	1e 99       	sbic	0x03, 6	; 3
    122c:	0b c0       	rjmp	.+22     	; 0x1244 <__stack+0xd45>
    122e:	80 91 7d 01 	lds	r24, 0x017D
    1232:	85 30       	cpi	r24, 0x05	; 5
    1234:	39 f4       	brne	.+14     	; 0x1244 <__stack+0xd45>
    1236:	96 30       	cpi	r25, 0x06	; 6
    1238:	29 f4       	brne	.+10     	; 0x1244 <__stack+0xd45>
	{
	screenDispNum = 23;
    123a:	87 e1       	ldi	r24, 0x17	; 23
    123c:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1240:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==7))
    1244:	1e 99       	sbic	0x03, 6	; 3
    1246:	0b c0       	rjmp	.+22     	; 0x125e <__stack+0xd5f>
    1248:	80 91 7d 01 	lds	r24, 0x017D
    124c:	85 30       	cpi	r24, 0x05	; 5
    124e:	39 f4       	brne	.+14     	; 0x125e <__stack+0xd5f>
    1250:	97 30       	cpi	r25, 0x07	; 7
    1252:	29 f4       	brne	.+10     	; 0x125e <__stack+0xd5f>
	{
	screenDispNum = 24;
    1254:	88 e1       	ldi	r24, 0x18	; 24
    1256:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    125a:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==8))
    125e:	1e 99       	sbic	0x03, 6	; 3
    1260:	0b c0       	rjmp	.+22     	; 0x1278 <__stack+0xd79>
    1262:	80 91 7d 01 	lds	r24, 0x017D
    1266:	85 30       	cpi	r24, 0x05	; 5
    1268:	39 f4       	brne	.+14     	; 0x1278 <__stack+0xd79>
    126a:	98 30       	cpi	r25, 0x08	; 8
    126c:	29 f4       	brne	.+10     	; 0x1278 <__stack+0xd79>
	{
	screenDispNum = 27;
    126e:	8b e1       	ldi	r24, 0x1B	; 27
    1270:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1274:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 5) && (sub_display ==9))
    1278:	1e 99       	sbic	0x03, 6	; 3
    127a:	0b c0       	rjmp	.+22     	; 0x1292 <__stack+0xd93>
    127c:	80 91 7d 01 	lds	r24, 0x017D
    1280:	85 30       	cpi	r24, 0x05	; 5
    1282:	39 f4       	brne	.+14     	; 0x1292 <__stack+0xd93>
    1284:	99 30       	cpi	r25, 0x09	; 9
    1286:	29 f4       	brne	.+10     	; 0x1292 <__stack+0xd93>
	{
	screenDispNum = 28;
    1288:	8c e1       	ldi	r24, 0x1C	; 28
    128a:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    128e:	10 92 7d 01 	sts	0x017D, r1
	}


	if(button_pressed == 10)
    1292:	80 91 54 01 	lds	r24, 0x0154
    1296:	8a 30       	cpi	r24, 0x0A	; 10
    1298:	31 f4       	brne	.+12     	; 0x12a6 <__stack+0xda7>
	{
	button_pressed = 12;		// 12 is nothing ie no button pressed
    129a:	8c e0       	ldi	r24, 0x0C	; 12
    129c:	80 93 54 01 	sts	0x0154, r24
	screenDispNum = 4;
    12a0:	84 e0       	ldi	r24, 0x04	; 4
    12a2:	80 93 7c 01 	sts	0x017C, r24
	}


	if(button_pressed == 11)	// key # confirms and goes to home screen
    12a6:	80 91 54 01 	lds	r24, 0x0154
    12aa:	8b 30       	cpi	r24, 0x0B	; 11
    12ac:	31 f4       	brne	.+12     	; 0x12ba <__stack+0xdbb>
	{
	button_pressed = 12;		// 12 is nothing ie no button pressed
    12ae:	8c e0       	ldi	r24, 0x0C	; 12
    12b0:	80 93 54 01 	sts	0x0154, r24
	screenDispNum = 9;
    12b4:	89 e0       	ldi	r24, 0x09	; 9
    12b6:	80 93 7c 01 	sts	0x017C, r24
	}

}


if(screenDispNum == 9)	// T SET
    12ba:	80 91 7c 01 	lds	r24, 0x017C
    12be:	89 30       	cpi	r24, 0x09	; 9
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <__stack+0xdc5>
    12c2:	1c c1       	rjmp	.+568    	; 0x14fc <__stack+0xffd>
{

	Clear_LCD();
    12c4:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,T);
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	6d e1       	ldi	r22, 0x1D	; 29
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,S);
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	6c e1       	ldi	r22, 0x1C	; 28
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,E);
    12dc:	84 e0       	ldi	r24, 0x04	; 4
    12de:	6e e0       	ldi	r22, 0x0E	; 14
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,T);
    12e6:	85 e0       	ldi	r24, 0x05	; 5
    12e8:	6d e1       	ldi	r22, 0x1D	; 29
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	if(sub_display == 2) LCDDR0 |= (1<<2); 		// small digit 1 symbol
    12f0:	80 91 7e 01 	lds	r24, 0x017E
    12f4:	82 30       	cpi	r24, 0x02	; 2
    12f6:	49 f0       	breq	.+18     	; 0x130a <__stack+0xe0b>
	if(sub_display == 3) LCDDR0 |= (1<<2); 		// small digit 1 symbol
    12f8:	83 30       	cpi	r24, 0x03	; 3
    12fa:	39 f0       	breq	.+14     	; 0x130a <__stack+0xe0b>
	if(sub_display == 4) LCDDR0 |= (1<<2); 		// small digit 1 symbol
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	49 f4       	brne	.+18     	; 0x1312 <__stack+0xe13>
    1300:	80 91 ec 00 	lds	r24, 0x00EC
    1304:	84 60       	ori	r24, 0x04	; 4
    1306:	80 93 ec 00 	sts	0x00EC, r24
	if(sub_display == 4) LCDDR0 |= (1<<2); 		// small digit 1 symbol
    130a:	80 91 ec 00 	lds	r24, 0x00EC
    130e:	84 60       	ori	r24, 0x04	; 4
    1310:	0d c0       	rjmp	.+26     	; 0x132c <__stack+0xe2d>
	if(sub_display == 5) LCDDR0 |= (1<<2); 		// small digit 1 symbol
    1312:	85 30       	cpi	r24, 0x05	; 5
    1314:	d1 f3       	breq	.-12     	; 0x130a <__stack+0xe0b>
	if(sub_display == 6) LCDDR0 |= (1<<6); 		// small digit 2 symbol
    1316:	86 30       	cpi	r24, 0x06	; 6
    1318:	31 f0       	breq	.+12     	; 0x1326 <__stack+0xe27>
	if(sub_display == 7) LCDDR0 |= (1<<6); 		// small digit 2 symbol
    131a:	87 30       	cpi	r24, 0x07	; 7
    131c:	21 f0       	breq	.+8      	; 0x1326 <__stack+0xe27>
	if(sub_display == 8) LCDDR0 |= (1<<6); 		// small digit 2 symbol
    131e:	88 30       	cpi	r24, 0x08	; 8
    1320:	11 f0       	breq	.+4      	; 0x1326 <__stack+0xe27>
	if(sub_display == 9) LCDDR0 |= (1<<6); 		// small digit 2 symbol
    1322:	89 30       	cpi	r24, 0x09	; 9
    1324:	29 f4       	brne	.+10     	; 0x1330 <__stack+0xe31>
    1326:	80 91 ec 00 	lds	r24, 0x00EC
    132a:	80 64       	ori	r24, 0x40	; 64
    132c:	80 93 ec 00 	sts	0x00EC, r24

	i++;
    1330:	80 91 7f 01 	lds	r24, 0x017F
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	80 93 7f 01 	sts	0x017F, r24

	if(i>3)
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	08 f4       	brcc	.+2      	; 0x1340 <__stack+0xe41>
    133e:	de c0       	rjmp	.+444    	; 0x14fc <__stack+0xffd>
	{
		if(sub_display == 1)
    1340:	80 91 7e 01 	lds	r24, 0x017E
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	b1 f4       	brne	.+44     	; 0x1374 <__stack+0xe75>
		{
		sec_unit = 0;
    1348:	10 92 56 01 	sts	0x0156, r1
		sec_tens = 0;
    134c:	10 92 57 01 	sts	0x0157, r1
		min_unit = min_unit_temp;
    1350:	80 91 78 01 	lds	r24, 0x0178
    1354:	80 93 58 01 	sts	0x0158, r24
		min_tens = min_tens_temp;
    1358:	80 91 79 01 	lds	r24, 0x0179
    135c:	80 93 59 01 	sts	0x0159, r24
		hr_unit = hr_unit_temp;
    1360:	80 91 7a 01 	lds	r24, 0x017A
    1364:	80 93 5a 01 	sts	0x015A, r24
		hr_tens = hr_tens_temp;
    1368:	80 91 7b 01 	lds	r24, 0x017B
    136c:	80 93 5b 01 	sts	0x015B, r24
		screenDispNum = 0;		// home screen
    1370:	10 92 7c 01 	sts	0x017C, r1
		}
	
		if(sub_display == 2)
    1374:	80 91 7e 01 	lds	r24, 0x017E
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	99 f4       	brne	.+38     	; 0x13a2 <__stack+0xea3>
		{
		div1_on_min_unit = min_unit_temp;
    137c:	80 91 78 01 	lds	r24, 0x0178
    1380:	80 93 5c 01 	sts	0x015C, r24
		div1_on_min_tens = min_tens_temp;
    1384:	80 91 79 01 	lds	r24, 0x0179
    1388:	80 93 5d 01 	sts	0x015D, r24
		div1_on_hr_unit = hr_unit_temp;
    138c:	80 91 7a 01 	lds	r24, 0x017A
    1390:	80 93 5e 01 	sts	0x015E, r24
		div1_on_hr_tens = hr_tens_temp;
    1394:	80 91 7b 01 	lds	r24, 0x017B
    1398:	80 93 5f 01 	sts	0x015F, r24
		screenDispNum = 13;	// DIV 1 ON AT
    139c:	8d e0       	ldi	r24, 0x0D	; 13
    139e:	80 93 7c 01 	sts	0x017C, r24
		}
	
		if(sub_display == 3)
    13a2:	80 91 7e 01 	lds	r24, 0x017E
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	99 f4       	brne	.+38     	; 0x13d0 <__stack+0xed1>
		{
		div1_off_min_unit = min_unit_temp;
    13aa:	80 91 78 01 	lds	r24, 0x0178
    13ae:	80 93 60 01 	sts	0x0160, r24
		div1_off_min_tens = min_tens_temp;
    13b2:	80 91 79 01 	lds	r24, 0x0179
    13b6:	80 93 61 01 	sts	0x0161, r24
		div1_off_hr_unit = hr_unit_temp;
    13ba:	80 91 7a 01 	lds	r24, 0x017A
    13be:	80 93 62 01 	sts	0x0162, r24
		div1_off_hr_tens = hr_tens_temp;
    13c2:	80 91 7b 01 	lds	r24, 0x017B
    13c6:	80 93 63 01 	sts	0x0163, r24
		screenDispNum = 14;	// DIV 1 OFF AT
    13ca:	8e e0       	ldi	r24, 0x0E	; 14
    13cc:	80 93 7c 01 	sts	0x017C, r24
		}

		if(sub_display == 4)
    13d0:	80 91 7e 01 	lds	r24, 0x017E
    13d4:	84 30       	cpi	r24, 0x04	; 4
    13d6:	b1 f4       	brne	.+44     	; 0x1404 <__stack+0xf05>
		{
		div1_Cdown_min_unit = min_unit_temp;
    13d8:	80 91 78 01 	lds	r24, 0x0178
    13dc:	80 93 66 01 	sts	0x0166, r24
		div1_Cdown_min_tens = min_tens_temp;
    13e0:	80 91 79 01 	lds	r24, 0x0179
    13e4:	80 93 67 01 	sts	0x0167, r24
		div1_Cdown_hr_unit = hr_unit_temp;
    13e8:	80 91 7a 01 	lds	r24, 0x017A
    13ec:	80 93 68 01 	sts	0x0168, r24
		div1_Cdown_hr_tens = hr_tens_temp;
    13f0:	80 91 7b 01 	lds	r24, 0x017B
    13f4:	80 93 69 01 	sts	0x0169, r24
		relay_1_state = 1;	// permanently OFF !!
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	80 93 80 01 	sts	0x0180, r24
		screenDispNum = 18;	// DEV 1 count down display
    13fe:	82 e1       	ldi	r24, 0x12	; 18
    1400:	80 93 7c 01 	sts	0x017C, r24
		}

		if(sub_display == 5)
    1404:	80 91 7e 01 	lds	r24, 0x017E
    1408:	85 30       	cpi	r24, 0x05	; 5
    140a:	b1 f4       	brne	.+44     	; 0x1438 <__stack+0xf39>
		{
		div1_Cdown_min_unit = min_unit_temp;
    140c:	80 91 78 01 	lds	r24, 0x0178
    1410:	80 93 66 01 	sts	0x0166, r24
		div1_Cdown_min_tens = min_tens_temp;
    1414:	80 91 79 01 	lds	r24, 0x0179
    1418:	80 93 67 01 	sts	0x0167, r24
		div1_Cdown_hr_unit = hr_unit_temp;
    141c:	80 91 7a 01 	lds	r24, 0x017A
    1420:	80 93 68 01 	sts	0x0168, r24
		div1_Cdown_hr_tens = hr_tens_temp;
    1424:	80 91 7b 01 	lds	r24, 0x017B
    1428:	80 93 69 01 	sts	0x0169, r24
		relay_1_state = 2;	// permanently ON !!
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	80 93 80 01 	sts	0x0180, r24
		screenDispNum = 18;	// DEV 1 count down display
    1432:	82 e1       	ldi	r24, 0x12	; 18
    1434:	80 93 7c 01 	sts	0x017C, r24
		}



		if(sub_display == 6)
    1438:	80 91 7e 01 	lds	r24, 0x017E
    143c:	86 30       	cpi	r24, 0x06	; 6
    143e:	99 f4       	brne	.+38     	; 0x1466 <__stack+0xf67>
		{
		div2_on_min_unit = min_unit_temp;
    1440:	80 91 78 01 	lds	r24, 0x0178
    1444:	80 93 6a 01 	sts	0x016A, r24
		div2_on_min_tens = min_tens_temp;
    1448:	80 91 79 01 	lds	r24, 0x0179
    144c:	80 93 6b 01 	sts	0x016B, r24
		div2_on_hr_unit = hr_unit_temp;
    1450:	80 91 7a 01 	lds	r24, 0x017A
    1454:	80 93 6c 01 	sts	0x016C, r24
		div2_on_hr_tens = hr_tens_temp;
    1458:	80 91 7b 01 	lds	r24, 0x017B
    145c:	80 93 6d 01 	sts	0x016D, r24
		screenDispNum = 24;	// DIV 2 ON AT
    1460:	88 e1       	ldi	r24, 0x18	; 24
    1462:	80 93 7c 01 	sts	0x017C, r24
		}
	
		if(sub_display == 7)
    1466:	80 91 7e 01 	lds	r24, 0x017E
    146a:	87 30       	cpi	r24, 0x07	; 7
    146c:	99 f4       	brne	.+38     	; 0x1494 <__stack+0xf95>
		{
		div2_off_min_unit = min_unit_temp;
    146e:	80 91 78 01 	lds	r24, 0x0178
    1472:	80 93 6e 01 	sts	0x016E, r24
		div2_off_min_tens = min_tens_temp;
    1476:	80 91 79 01 	lds	r24, 0x0179
    147a:	80 93 6f 01 	sts	0x016F, r24
		div2_off_hr_unit = hr_unit_temp;
    147e:	80 91 7a 01 	lds	r24, 0x017A
    1482:	80 93 70 01 	sts	0x0170, r24
		div2_off_hr_tens = hr_tens_temp;
    1486:	80 91 7b 01 	lds	r24, 0x017B
    148a:	80 93 71 01 	sts	0x0171, r24
		screenDispNum = 25;	// DIV 2 OFF AT
    148e:	89 e1       	ldi	r24, 0x19	; 25
    1490:	80 93 7c 01 	sts	0x017C, r24
		}

		if(sub_display == 8)
    1494:	80 91 7e 01 	lds	r24, 0x017E
    1498:	88 30       	cpi	r24, 0x08	; 8
    149a:	b1 f4       	brne	.+44     	; 0x14c8 <__stack+0xfc9>
		{
		div2_Cdown_min_unit = min_unit_temp;
    149c:	80 91 78 01 	lds	r24, 0x0178
    14a0:	80 93 74 01 	sts	0x0174, r24
		div2_Cdown_min_tens = min_tens_temp;
    14a4:	80 91 79 01 	lds	r24, 0x0179
    14a8:	80 93 75 01 	sts	0x0175, r24
		div2_Cdown_hr_unit = hr_unit_temp;
    14ac:	80 91 7a 01 	lds	r24, 0x017A
    14b0:	80 93 76 01 	sts	0x0176, r24
		div2_Cdown_hr_tens = hr_tens_temp;
    14b4:	80 91 7b 01 	lds	r24, 0x017B
    14b8:	80 93 77 01 	sts	0x0177, r24
		relay_2_state = 1;	// permanently OFF !!
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	80 93 81 01 	sts	0x0181, r24
		screenDispNum = 20;	// DEV 2 count down display
    14c2:	84 e1       	ldi	r24, 0x14	; 20
    14c4:	80 93 7c 01 	sts	0x017C, r24
		}

		if(sub_display == 9)
    14c8:	80 91 7e 01 	lds	r24, 0x017E
    14cc:	89 30       	cpi	r24, 0x09	; 9
    14ce:	b1 f4       	brne	.+44     	; 0x14fc <__stack+0xffd>
		{
		div2_Cdown_min_unit = min_unit_temp;
    14d0:	80 91 78 01 	lds	r24, 0x0178
    14d4:	80 93 74 01 	sts	0x0174, r24
		div2_Cdown_min_tens = min_tens_temp;
    14d8:	80 91 79 01 	lds	r24, 0x0179
    14dc:	80 93 75 01 	sts	0x0175, r24
		div2_Cdown_hr_unit = hr_unit_temp;
    14e0:	80 91 7a 01 	lds	r24, 0x017A
    14e4:	80 93 76 01 	sts	0x0176, r24
		div2_Cdown_hr_tens = hr_tens_temp;
    14e8:	80 91 7b 01 	lds	r24, 0x017B
    14ec:	80 93 77 01 	sts	0x0177, r24
		relay_2_state = 2;	// permanently ON !!
    14f0:	82 e0       	ldi	r24, 0x02	; 2
    14f2:	80 93 81 01 	sts	0x0181, r24
		screenDispNum = 20;	// DEV 2 count down display
    14f6:	84 e1       	ldi	r24, 0x14	; 20
    14f8:	80 93 7c 01 	sts	0x017C, r24

//------------------------------------------------------------
//------------------------ DEV 1 -----------------------------
//------------------------------------------------------------

if(screenDispNum == 10)	// submenu DEV 1  TIMED ON/OFF
    14fc:	80 91 7c 01 	lds	r24, 0x017C
    1500:	8a 30       	cpi	r24, 0x0A	; 10
    1502:	09 f0       	breq	.+2      	; 0x1506 <__stack+0x1007>
    1504:	79 c0       	rjmp	.+242    	; 0x15f8 <__stack+0x10f9>
{
	Clear_LCD();
    1506:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,T);
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	6d e1       	ldi	r22, 0x1D	; 29
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,I);
    1514:	82 e0       	ldi	r24, 0x02	; 2
    1516:	62 e1       	ldi	r22, 0x12	; 18
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,M);
    151e:	83 e0       	ldi	r24, 0x03	; 3
    1520:	66 e1       	ldi	r22, 0x16	; 22
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,E);
    1528:	84 e0       	ldi	r24, 0x04	; 4
    152a:	6e e0       	ldi	r22, 0x0E	; 14
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,D);
    1532:	85 e0       	ldi	r24, 0x05	; 5
    1534:	6d e0       	ldi	r22, 0x0D	; 13
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR0 |= (1<<2); 		// small digit 1 symbol
    153c:	80 91 ec 00 	lds	r24, 0x00EC
    1540:	84 60       	ori	r24, 0x04	; 4
    1542:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    1546:	1c 99       	sbic	0x03, 4	; 3
    1548:	05 c0       	rjmp	.+10     	; 0x1554 <__stack+0x1055>
    154a:	80 91 7d 01 	lds	r24, 0x017D
    154e:	8f 5f       	subi	r24, 0xFF	; 255
    1550:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    1554:	63 99       	sbic	0x0c, 3	; 12
    1556:	05 c0       	rjmp	.+10     	; 0x1562 <__stack+0x1063>
    1558:	80 91 7d 01 	lds	r24, 0x017D
    155c:	8f 5f       	subi	r24, 0xFF	; 255
    155e:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    1562:	62 99       	sbic	0x0c, 2	; 12
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <__stack+0x1071>
    1566:	80 91 7d 01 	lds	r24, 0x017D
    156a:	8f 5f       	subi	r24, 0xFF	; 255
    156c:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    1570:	1f 99       	sbic	0x03, 7	; 3
    1572:	05 c0       	rjmp	.+10     	; 0x157e <__stack+0x107f>
    1574:	80 91 7d 01 	lds	r24, 0x017D
    1578:	8f 5f       	subi	r24, 0xFF	; 255
    157a:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    157e:	1e 99       	sbic	0x03, 6	; 3
    1580:	05 c0       	rjmp	.+10     	; 0x158c <__stack+0x108d>
    1582:	80 91 7d 01 	lds	r24, 0x017D
    1586:	8f 5f       	subi	r24, 0xFF	; 255
    1588:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    158c:	1c 99       	sbic	0x03, 4	; 3
    158e:	08 c0       	rjmp	.+16     	; 0x15a0 <__stack+0x10a1>
    1590:	80 91 7d 01 	lds	r24, 0x017D
    1594:	85 30       	cpi	r24, 0x05	; 5
    1596:	21 f4       	brne	.+8      	; 0x15a0 <__stack+0x10a1>
	{
	screenDispNum = 0;
    1598:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    159c:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    15a0:	63 99       	sbic	0x0c, 3	; 12
    15a2:	09 c0       	rjmp	.+18     	; 0x15b6 <__stack+0x10b7>
    15a4:	80 91 7d 01 	lds	r24, 0x017D
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	29 f4       	brne	.+10     	; 0x15b6 <__stack+0x10b7>
	{
	screenDispNum = 11;
    15ac:	8b e0       	ldi	r24, 0x0B	; 11
    15ae:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    15b2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    15b6:	62 99       	sbic	0x0c, 2	; 12
    15b8:	09 c0       	rjmp	.+18     	; 0x15cc <__stack+0x10cd>
    15ba:	80 91 7d 01 	lds	r24, 0x017D
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	29 f4       	brne	.+10     	; 0x15cc <__stack+0x10cd>
	{
	screenDispNum = 11;
    15c2:	8b e0       	ldi	r24, 0x0B	; 11
    15c4:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    15c8:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    15cc:	1f 99       	sbic	0x03, 7	; 3
    15ce:	09 c0       	rjmp	.+18     	; 0x15e2 <__stack+0x10e3>
    15d0:	80 91 7d 01 	lds	r24, 0x017D
    15d4:	83 30       	cpi	r24, 0x03	; 3
    15d6:	29 f4       	brne	.+10     	; 0x15e2 <__stack+0x10e3>
	{
	screenDispNum = 12;
    15d8:	8c e0       	ldi	r24, 0x0C	; 12
    15da:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    15de:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    15e2:	1e 99       	sbic	0x03, 6	; 3
    15e4:	09 c0       	rjmp	.+18     	; 0x15f8 <__stack+0x10f9>
    15e6:	80 91 7d 01 	lds	r24, 0x017D
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	29 f4       	brne	.+10     	; 0x15f8 <__stack+0x10f9>
	{
	screenDispNum = 2;
    15ee:	82 e0       	ldi	r24, 0x02	; 2
    15f0:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    15f4:	10 92 7d 01 	sts	0x017D, r1
	}

}

if(screenDispNum == 11)	// submenu DEV 1  COUNTDOWNTIMER
    15f8:	80 91 7c 01 	lds	r24, 0x017C
    15fc:	8b 30       	cpi	r24, 0x0B	; 11
    15fe:	09 f0       	breq	.+2      	; 0x1602 <__stack+0x1103>
    1600:	79 c0       	rjmp	.+242    	; 0x16f4 <__stack+0x11f5>
{
	Clear_LCD();
    1602:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,C);
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	6c e0       	ldi	r22, 0x0C	; 12
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,D);
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	6d e0       	ldi	r22, 0x0D	; 13
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,O);
    161a:	84 e0       	ldi	r24, 0x04	; 4
    161c:	68 e1       	ldi	r22, 0x18	; 24
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,W);
    1624:	85 e0       	ldi	r24, 0x05	; 5
    1626:	60 e2       	ldi	r22, 0x20	; 32
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,N);
    162e:	86 e0       	ldi	r24, 0x06	; 6
    1630:	67 e1       	ldi	r22, 0x17	; 23
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR0 |= (1<<2); 		// small digit 1 symbol 
    1638:	80 91 ec 00 	lds	r24, 0x00EC
    163c:	84 60       	ori	r24, 0x04	; 4
    163e:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    1642:	1c 99       	sbic	0x03, 4	; 3
    1644:	05 c0       	rjmp	.+10     	; 0x1650 <__stack+0x1151>
    1646:	80 91 7d 01 	lds	r24, 0x017D
    164a:	8f 5f       	subi	r24, 0xFF	; 255
    164c:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    1650:	63 99       	sbic	0x0c, 3	; 12
    1652:	05 c0       	rjmp	.+10     	; 0x165e <__stack+0x115f>
    1654:	80 91 7d 01 	lds	r24, 0x017D
    1658:	8f 5f       	subi	r24, 0xFF	; 255
    165a:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    165e:	62 99       	sbic	0x0c, 2	; 12
    1660:	05 c0       	rjmp	.+10     	; 0x166c <__stack+0x116d>
    1662:	80 91 7d 01 	lds	r24, 0x017D
    1666:	8f 5f       	subi	r24, 0xFF	; 255
    1668:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    166c:	1f 99       	sbic	0x03, 7	; 3
    166e:	05 c0       	rjmp	.+10     	; 0x167a <__stack+0x117b>
    1670:	80 91 7d 01 	lds	r24, 0x017D
    1674:	8f 5f       	subi	r24, 0xFF	; 255
    1676:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    167a:	1e 99       	sbic	0x03, 6	; 3
    167c:	05 c0       	rjmp	.+10     	; 0x1688 <__stack+0x1189>
    167e:	80 91 7d 01 	lds	r24, 0x017D
    1682:	8f 5f       	subi	r24, 0xFF	; 255
    1684:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    1688:	1c 99       	sbic	0x03, 4	; 3
    168a:	08 c0       	rjmp	.+16     	; 0x169c <__stack+0x119d>
    168c:	80 91 7d 01 	lds	r24, 0x017D
    1690:	85 30       	cpi	r24, 0x05	; 5
    1692:	21 f4       	brne	.+8      	; 0x169c <__stack+0x119d>
	{
	screenDispNum = 0;
    1694:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    1698:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    169c:	63 99       	sbic	0x0c, 3	; 12
    169e:	09 c0       	rjmp	.+18     	; 0x16b2 <__stack+0x11b3>
    16a0:	80 91 7d 01 	lds	r24, 0x017D
    16a4:	83 30       	cpi	r24, 0x03	; 3
    16a6:	29 f4       	brne	.+10     	; 0x16b2 <__stack+0x11b3>
	{
	screenDispNum = 10;
    16a8:	8a e0       	ldi	r24, 0x0A	; 10
    16aa:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    16ae:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    16b2:	62 99       	sbic	0x0c, 2	; 12
    16b4:	09 c0       	rjmp	.+18     	; 0x16c8 <__stack+0x11c9>
    16b6:	80 91 7d 01 	lds	r24, 0x017D
    16ba:	83 30       	cpi	r24, 0x03	; 3
    16bc:	29 f4       	brne	.+10     	; 0x16c8 <__stack+0x11c9>
	{
	screenDispNum = 10;
    16be:	8a e0       	ldi	r24, 0x0A	; 10
    16c0:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    16c4:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    16c8:	1f 99       	sbic	0x03, 7	; 3
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <__stack+0x11df>
    16cc:	80 91 7d 01 	lds	r24, 0x017D
    16d0:	83 30       	cpi	r24, 0x03	; 3
    16d2:	29 f4       	brne	.+10     	; 0x16de <__stack+0x11df>
	{
	screenDispNum = 16;
    16d4:	80 e1       	ldi	r24, 0x10	; 16
    16d6:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    16da:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    16de:	1e 99       	sbic	0x03, 6	; 3
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <__stack+0x11f5>
    16e2:	80 91 7d 01 	lds	r24, 0x017D
    16e6:	83 30       	cpi	r24, 0x03	; 3
    16e8:	29 f4       	brne	.+10     	; 0x16f4 <__stack+0x11f5>
	{
	screenDispNum = 2;
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    16f0:	10 92 7d 01 	sts	0x017D, r1

}



if(screenDispNum == 12)	// submenu DEV 1 TIMED ON AT:
    16f4:	80 91 7c 01 	lds	r24, 0x017C
    16f8:	8c 30       	cpi	r24, 0x0C	; 12
    16fa:	09 f0       	breq	.+2      	; 0x16fe <__stack+0x11ff>
    16fc:	77 c0       	rjmp	.+238    	; 0x17ec <__stack+0x12ed>
{
	Clear_LCD();
    16fe:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,O);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	68 e1       	ldi	r22, 0x18	; 24
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,N);
    170c:	82 e0       	ldi	r24, 0x02	; 2
    170e:	67 e1       	ldi	r22, 0x17	; 23
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,A);
    1716:	84 e0       	ldi	r24, 0x04	; 4
    1718:	6a e0       	ldi	r22, 0x0A	; 10
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,T);
    1720:	85 e0       	ldi	r24, 0x05	; 5
    1722:	6d e1       	ldi	r22, 0x1D	; 29
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	LCDDR0 |= (1<<2); 		// small digit 1 symbol
    172a:	80 91 ec 00 	lds	r24, 0x00EC
    172e:	84 60       	ori	r24, 0x04	; 4
    1730:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    1734:	1c 99       	sbic	0x03, 4	; 3
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <__stack+0x1243>
    1738:	80 91 7d 01 	lds	r24, 0x017D
    173c:	8f 5f       	subi	r24, 0xFF	; 255
    173e:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    1742:	63 99       	sbic	0x0c, 3	; 12
    1744:	05 c0       	rjmp	.+10     	; 0x1750 <__stack+0x1251>
    1746:	80 91 7d 01 	lds	r24, 0x017D
    174a:	8f 5f       	subi	r24, 0xFF	; 255
    174c:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    1750:	62 99       	sbic	0x0c, 2	; 12
    1752:	05 c0       	rjmp	.+10     	; 0x175e <__stack+0x125f>
    1754:	80 91 7d 01 	lds	r24, 0x017D
    1758:	8f 5f       	subi	r24, 0xFF	; 255
    175a:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    175e:	1f 99       	sbic	0x03, 7	; 3
    1760:	05 c0       	rjmp	.+10     	; 0x176c <__stack+0x126d>
    1762:	80 91 7d 01 	lds	r24, 0x017D
    1766:	8f 5f       	subi	r24, 0xFF	; 255
    1768:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    176c:	1e 99       	sbic	0x03, 6	; 3
    176e:	05 c0       	rjmp	.+10     	; 0x177a <__stack+0x127b>
    1770:	80 91 7d 01 	lds	r24, 0x017D
    1774:	8f 5f       	subi	r24, 0xFF	; 255
    1776:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    177a:	1c 99       	sbic	0x03, 4	; 3
    177c:	08 c0       	rjmp	.+16     	; 0x178e <__stack+0x128f>
    177e:	80 91 7d 01 	lds	r24, 0x017D
    1782:	85 30       	cpi	r24, 0x05	; 5
    1784:	21 f4       	brne	.+8      	; 0x178e <__stack+0x128f>
	{
	screenDispNum = 0;
    1786:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    178a:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    178e:	63 99       	sbic	0x0c, 3	; 12
    1790:	09 c0       	rjmp	.+18     	; 0x17a4 <__stack+0x12a5>
    1792:	80 91 7d 01 	lds	r24, 0x017D
    1796:	83 30       	cpi	r24, 0x03	; 3
    1798:	29 f4       	brne	.+10     	; 0x17a4 <__stack+0x12a5>
	{
	screenDispNum = 13;
    179a:	8d e0       	ldi	r24, 0x0D	; 13
    179c:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    17a0:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    17a4:	62 99       	sbic	0x0c, 2	; 12
    17a6:	09 c0       	rjmp	.+18     	; 0x17ba <__stack+0x12bb>
    17a8:	80 91 7d 01 	lds	r24, 0x017D
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	29 f4       	brne	.+10     	; 0x17ba <__stack+0x12bb>
	{
	screenDispNum = 14;
    17b0:	8e e0       	ldi	r24, 0x0E	; 14
    17b2:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    17b6:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    17ba:	1f 99       	sbic	0x03, 7	; 3
    17bc:	0c c0       	rjmp	.+24     	; 0x17d6 <__stack+0x12d7>
    17be:	80 91 7d 01 	lds	r24, 0x017D
    17c2:	83 30       	cpi	r24, 0x03	; 3
    17c4:	41 f4       	brne	.+16     	; 0x17d6 <__stack+0x12d7>
	{
	screenDispNum = 4;
    17c6:	84 e0       	ldi	r24, 0x04	; 4
    17c8:	80 93 7c 01 	sts	0x017C, r24
	sub_display = 2;
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	80 93 7e 01 	sts	0x017E, r24
	button_wait_time = 0;
    17d2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    17d6:	1e 99       	sbic	0x03, 6	; 3
    17d8:	09 c0       	rjmp	.+18     	; 0x17ec <__stack+0x12ed>
    17da:	80 91 7d 01 	lds	r24, 0x017D
    17de:	83 30       	cpi	r24, 0x03	; 3
    17e0:	29 f4       	brne	.+10     	; 0x17ec <__stack+0x12ed>
	{
	screenDispNum = 10;
    17e2:	8a e0       	ldi	r24, 0x0A	; 10
    17e4:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    17e8:	10 92 7d 01 	sts	0x017D, r1
	}

}

if(screenDispNum == 13)	// submenu DEV 1 TIMED OFF AT:
    17ec:	80 91 7c 01 	lds	r24, 0x017C
    17f0:	8d 30       	cpi	r24, 0x0D	; 13
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <__stack+0x12f7>
    17f4:	7b c0       	rjmp	.+246    	; 0x18ec <__stack+0x13ed>
{
	Clear_LCD();
    17f6:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,O);
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	68 e1       	ldi	r22, 0x18	; 24
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,F);
    1804:	82 e0       	ldi	r24, 0x02	; 2
    1806:	6f e0       	ldi	r22, 0x0F	; 15
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,F);
    180e:	83 e0       	ldi	r24, 0x03	; 3
    1810:	6f e0       	ldi	r22, 0x0F	; 15
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,A);
    1818:	85 e0       	ldi	r24, 0x05	; 5
    181a:	6a e0       	ldi	r22, 0x0A	; 10
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,T);
    1822:	86 e0       	ldi	r24, 0x06	; 6
    1824:	6d e1       	ldi	r22, 0x1D	; 29
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	LCDDR0 |= (1<<2); 		// small digit 1 symbol
    182c:	80 91 ec 00 	lds	r24, 0x00EC
    1830:	84 60       	ori	r24, 0x04	; 4
    1832:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    1836:	1c 99       	sbic	0x03, 4	; 3
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <__stack+0x1345>
    183a:	80 91 7d 01 	lds	r24, 0x017D
    183e:	8f 5f       	subi	r24, 0xFF	; 255
    1840:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    1844:	63 99       	sbic	0x0c, 3	; 12
    1846:	05 c0       	rjmp	.+10     	; 0x1852 <__stack+0x1353>
    1848:	80 91 7d 01 	lds	r24, 0x017D
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    1852:	62 99       	sbic	0x0c, 2	; 12
    1854:	05 c0       	rjmp	.+10     	; 0x1860 <__stack+0x1361>
    1856:	80 91 7d 01 	lds	r24, 0x017D
    185a:	8f 5f       	subi	r24, 0xFF	; 255
    185c:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    1860:	1f 99       	sbic	0x03, 7	; 3
    1862:	05 c0       	rjmp	.+10     	; 0x186e <__stack+0x136f>
    1864:	80 91 7d 01 	lds	r24, 0x017D
    1868:	8f 5f       	subi	r24, 0xFF	; 255
    186a:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    186e:	1e 99       	sbic	0x03, 6	; 3
    1870:	05 c0       	rjmp	.+10     	; 0x187c <__stack+0x137d>
    1872:	80 91 7d 01 	lds	r24, 0x017D
    1876:	8f 5f       	subi	r24, 0xFF	; 255
    1878:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    187c:	1c 99       	sbic	0x03, 4	; 3
    187e:	08 c0       	rjmp	.+16     	; 0x1890 <__stack+0x1391>
    1880:	80 91 7d 01 	lds	r24, 0x017D
    1884:	85 30       	cpi	r24, 0x05	; 5
    1886:	21 f4       	brne	.+8      	; 0x1890 <__stack+0x1391>
	{
	screenDispNum = 0;
    1888:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    188c:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    1890:	63 99       	sbic	0x0c, 3	; 12
    1892:	09 c0       	rjmp	.+18     	; 0x18a6 <__stack+0x13a7>
    1894:	80 91 7d 01 	lds	r24, 0x017D
    1898:	83 30       	cpi	r24, 0x03	; 3
    189a:	29 f4       	brne	.+10     	; 0x18a6 <__stack+0x13a7>
	{
	screenDispNum = 14;
    189c:	8e e0       	ldi	r24, 0x0E	; 14
    189e:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    18a2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    18a6:	62 99       	sbic	0x0c, 2	; 12
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <__stack+0x13bd>
    18aa:	80 91 7d 01 	lds	r24, 0x017D
    18ae:	83 30       	cpi	r24, 0x03	; 3
    18b0:	29 f4       	brne	.+10     	; 0x18bc <__stack+0x13bd>
	{
	screenDispNum = 12;
    18b2:	8c e0       	ldi	r24, 0x0C	; 12
    18b4:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    18b8:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    18bc:	1f 99       	sbic	0x03, 7	; 3
    18be:	0b c0       	rjmp	.+22     	; 0x18d6 <__stack+0x13d7>
    18c0:	90 91 7d 01 	lds	r25, 0x017D
    18c4:	93 30       	cpi	r25, 0x03	; 3
    18c6:	39 f4       	brne	.+14     	; 0x18d6 <__stack+0x13d7>
	{
	screenDispNum = 4;
    18c8:	84 e0       	ldi	r24, 0x04	; 4
    18ca:	80 93 7c 01 	sts	0x017C, r24
	sub_display = 3;
    18ce:	90 93 7e 01 	sts	0x017E, r25
	button_wait_time = 0;
    18d2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    18d6:	1e 99       	sbic	0x03, 6	; 3
    18d8:	09 c0       	rjmp	.+18     	; 0x18ec <__stack+0x13ed>
    18da:	80 91 7d 01 	lds	r24, 0x017D
    18de:	83 30       	cpi	r24, 0x03	; 3
    18e0:	29 f4       	brne	.+10     	; 0x18ec <__stack+0x13ed>
	{
	screenDispNum = 10;
    18e2:	8a e0       	ldi	r24, 0x0A	; 10
    18e4:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    18e8:	10 92 7d 01 	sts	0x017D, r1
	}

}

if(screenDispNum == 14)	// submenu DEV 1 CHECK ON/OFF TIME
    18ec:	80 91 7c 01 	lds	r24, 0x017C
    18f0:	8e 30       	cpi	r24, 0x0E	; 14
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <__stack+0x13f7>
    18f4:	7b c0       	rjmp	.+246    	; 0x19ec <__stack+0x14ed>
{
	Clear_LCD();
    18f6:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,C);
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	6c e0       	ldi	r22, 0x0C	; 12
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,H);
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	61 e1       	ldi	r22, 0x11	; 17
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,E);
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	6e e0       	ldi	r22, 0x0E	; 14
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,C);
    1918:	84 e0       	ldi	r24, 0x04	; 4
    191a:	6c e0       	ldi	r22, 0x0C	; 12
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,K);
    1922:	85 e0       	ldi	r24, 0x05	; 5
    1924:	64 e1       	ldi	r22, 0x14	; 20
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	LCDDR0 |= (1<<2); 		// small digit 1 symbol
    192c:	80 91 ec 00 	lds	r24, 0x00EC
    1930:	84 60       	ori	r24, 0x04	; 4
    1932:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    1936:	1c 99       	sbic	0x03, 4	; 3
    1938:	05 c0       	rjmp	.+10     	; 0x1944 <__stack+0x1445>
    193a:	80 91 7d 01 	lds	r24, 0x017D
    193e:	8f 5f       	subi	r24, 0xFF	; 255
    1940:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    1944:	63 99       	sbic	0x0c, 3	; 12
    1946:	05 c0       	rjmp	.+10     	; 0x1952 <__stack+0x1453>
    1948:	80 91 7d 01 	lds	r24, 0x017D
    194c:	8f 5f       	subi	r24, 0xFF	; 255
    194e:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    1952:	62 99       	sbic	0x0c, 2	; 12
    1954:	05 c0       	rjmp	.+10     	; 0x1960 <__stack+0x1461>
    1956:	80 91 7d 01 	lds	r24, 0x017D
    195a:	8f 5f       	subi	r24, 0xFF	; 255
    195c:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    1960:	1f 99       	sbic	0x03, 7	; 3
    1962:	05 c0       	rjmp	.+10     	; 0x196e <__stack+0x146f>
    1964:	80 91 7d 01 	lds	r24, 0x017D
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    196e:	1e 99       	sbic	0x03, 6	; 3
    1970:	05 c0       	rjmp	.+10     	; 0x197c <__stack+0x147d>
    1972:	80 91 7d 01 	lds	r24, 0x017D
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    197c:	1c 99       	sbic	0x03, 4	; 3
    197e:	08 c0       	rjmp	.+16     	; 0x1990 <__stack+0x1491>
    1980:	80 91 7d 01 	lds	r24, 0x017D
    1984:	85 30       	cpi	r24, 0x05	; 5
    1986:	21 f4       	brne	.+8      	; 0x1990 <__stack+0x1491>
	{
	screenDispNum = 0;
    1988:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    198c:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    1990:	63 99       	sbic	0x0c, 3	; 12
    1992:	09 c0       	rjmp	.+18     	; 0x19a6 <__stack+0x14a7>
    1994:	80 91 7d 01 	lds	r24, 0x017D
    1998:	83 30       	cpi	r24, 0x03	; 3
    199a:	29 f4       	brne	.+10     	; 0x19a6 <__stack+0x14a7>
	{
	screenDispNum = 12;
    199c:	8c e0       	ldi	r24, 0x0C	; 12
    199e:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    19a2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    19a6:	62 99       	sbic	0x0c, 2	; 12
    19a8:	09 c0       	rjmp	.+18     	; 0x19bc <__stack+0x14bd>
    19aa:	80 91 7d 01 	lds	r24, 0x017D
    19ae:	83 30       	cpi	r24, 0x03	; 3
    19b0:	29 f4       	brne	.+10     	; 0x19bc <__stack+0x14bd>
	{
	screenDispNum = 13;
    19b2:	8d e0       	ldi	r24, 0x0D	; 13
    19b4:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    19b8:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    19bc:	1f 99       	sbic	0x03, 7	; 3
    19be:	0b c0       	rjmp	.+22     	; 0x19d6 <__stack+0x14d7>
    19c0:	80 91 7d 01 	lds	r24, 0x017D
    19c4:	83 30       	cpi	r24, 0x03	; 3
    19c6:	39 f4       	brne	.+14     	; 0x19d6 <__stack+0x14d7>
	{
	screenDispNum = 15;
    19c8:	8f e0       	ldi	r24, 0x0F	; 15
    19ca:	80 93 7c 01 	sts	0x017C, r24
	i = 0;
    19ce:	10 92 7f 01 	sts	0x017F, r1
	button_wait_time = 0;
    19d2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    19d6:	1e 99       	sbic	0x03, 6	; 3
    19d8:	09 c0       	rjmp	.+18     	; 0x19ec <__stack+0x14ed>
    19da:	80 91 7d 01 	lds	r24, 0x017D
    19de:	83 30       	cpi	r24, 0x03	; 3
    19e0:	29 f4       	brne	.+10     	; 0x19ec <__stack+0x14ed>
	{
	screenDispNum = 10;
    19e2:	8a e0       	ldi	r24, 0x0A	; 10
    19e4:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    19e8:	10 92 7d 01 	sts	0x017D, r1
	}

}


if(screenDispNum == 15)	// submenu DEV 1 CHECK - CYCLES THROUGH
    19ec:	80 91 7c 01 	lds	r24, 0x017C
    19f0:	8f 30       	cpi	r24, 0x0F	; 15
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <__stack+0x14f7>
    19f4:	d2 c0       	rjmp	.+420    	; 0x1b9a <__stack+0x169b>
{



if(i<5)	
    19f6:	80 91 7f 01 	lds	r24, 0x017F
    19fa:	85 30       	cpi	r24, 0x05	; 5
    19fc:	00 f5       	brcc	.+64     	; 0x1a3e <__stack+0x153f>
{	
	Clear_LCD();
    19fe:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,O);
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	68 e1       	ldi	r22, 0x18	; 24
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,N);
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	67 e1       	ldi	r22, 0x17	; 23
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,A);
    1a16:	84 e0       	ldi	r24, 0x04	; 4
    1a18:	6a e0       	ldi	r22, 0x0A	; 10
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,T);
    1a20:	85 e0       	ldi	r24, 0x05	; 5
    1a22:	6d e1       	ldi	r22, 0x1D	; 29
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR0 |= (1<<2); 		// small digit 1 symbol
    1a2a:	80 91 ec 00 	lds	r24, 0x00EC
    1a2e:	84 60       	ori	r24, 0x04	; 4
    1a30:	80 93 ec 00 	sts	0x00EC, r24
	i++;
    1a34:	80 91 7f 01 	lds	r24, 0x017F
    1a38:	8f 5f       	subi	r24, 0xFF	; 255
    1a3a:	80 93 7f 01 	sts	0x017F, r24
}

if(i>=5 && i<10)	
    1a3e:	80 91 7f 01 	lds	r24, 0x017F
    1a42:	85 50       	subi	r24, 0x05	; 5
    1a44:	85 30       	cpi	r24, 0x05	; 5
    1a46:	88 f5       	brcc	.+98     	; 0x1aaa <__stack+0x15ab>
{
	Clear_LCD();
    1a48:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,div1_on_hr_tens);
    1a4c:	60 91 5f 01 	lds	r22, 0x015F
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,div1_on_hr_unit);
    1a58:	60 91 5e 01 	lds	r22, 0x015E
    1a5c:	82 e0       	ldi	r24, 0x02	; 2
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,div1_on_min_tens);
    1a64:	60 91 5d 01 	lds	r22, 0x015D
    1a68:	83 e0       	ldi	r24, 0x03	; 3
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,div1_on_min_unit);
    1a70:	60 91 5c 01 	lds	r22, 0x015C
    1a74:	84 e0       	ldi	r24, 0x04	; 4
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,0);
    1a7c:	85 e0       	ldi	r24, 0x05	; 5
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,0);
    1a86:	86 e0       	ldi	r24, 0x06	; 6
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR8 = (1<<0);			// colons
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	80 93 f4 00 	sts	0x00F4, r24
	LCDDR0 |= (1<<2); 		// small digit 1 symbol
    1a96:	80 91 ec 00 	lds	r24, 0x00EC
    1a9a:	84 60       	ori	r24, 0x04	; 4
    1a9c:	80 93 ec 00 	sts	0x00EC, r24
	i++;
    1aa0:	80 91 7f 01 	lds	r24, 0x017F
    1aa4:	8f 5f       	subi	r24, 0xFF	; 255
    1aa6:	80 93 7f 01 	sts	0x017F, r24

}

if(i>=10 && i<15)	
    1aaa:	80 91 7f 01 	lds	r24, 0x017F
    1aae:	8a 50       	subi	r24, 0x0A	; 10
    1ab0:	85 30       	cpi	r24, 0x05	; 5
    1ab2:	28 f5       	brcc	.+74     	; 0x1afe <__stack+0x15ff>
{
	Clear_LCD();
    1ab4:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,O);
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	68 e1       	ldi	r22, 0x18	; 24
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,F);
    1ac2:	82 e0       	ldi	r24, 0x02	; 2
    1ac4:	6f e0       	ldi	r22, 0x0F	; 15
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,F);
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	6f e0       	ldi	r22, 0x0F	; 15
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,A);
    1ad6:	85 e0       	ldi	r24, 0x05	; 5
    1ad8:	6a e0       	ldi	r22, 0x0A	; 10
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,T);
    1ae0:	86 e0       	ldi	r24, 0x06	; 6
    1ae2:	6d e1       	ldi	r22, 0x1D	; 29
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR0 |= (1<<2); 		// small digit 1 symbol
    1aea:	80 91 ec 00 	lds	r24, 0x00EC
    1aee:	84 60       	ori	r24, 0x04	; 4
    1af0:	80 93 ec 00 	sts	0x00EC, r24
	i++;
    1af4:	80 91 7f 01 	lds	r24, 0x017F
    1af8:	8f 5f       	subi	r24, 0xFF	; 255
    1afa:	80 93 7f 01 	sts	0x017F, r24
 
}

if(i>=15 && i<20)	
    1afe:	80 91 7f 01 	lds	r24, 0x017F
    1b02:	8f 50       	subi	r24, 0x0F	; 15
    1b04:	85 30       	cpi	r24, 0x05	; 5
    1b06:	88 f5       	brcc	.+98     	; 0x1b6a <__stack+0x166b>
{

	Clear_LCD();
    1b08:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,div1_off_hr_tens);
    1b0c:	60 91 63 01 	lds	r22, 0x0163
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,div1_off_hr_unit);
    1b18:	60 91 62 01 	lds	r22, 0x0162
    1b1c:	82 e0       	ldi	r24, 0x02	; 2
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,div1_off_min_tens);
    1b24:	60 91 61 01 	lds	r22, 0x0161
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,div1_off_min_unit);
    1b30:	60 91 60 01 	lds	r22, 0x0160
    1b34:	84 e0       	ldi	r24, 0x04	; 4
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,0);
    1b3c:	85 e0       	ldi	r24, 0x05	; 5
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,0);
    1b46:	86 e0       	ldi	r24, 0x06	; 6
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR8 = (1<<0);			// colons
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	80 93 f4 00 	sts	0x00F4, r24
	LCDDR0 |= (1<<2); 		// small digit 1 symbol
    1b56:	80 91 ec 00 	lds	r24, 0x00EC
    1b5a:	84 60       	ori	r24, 0x04	; 4
    1b5c:	80 93 ec 00 	sts	0x00EC, r24
	i++;
    1b60:	80 91 7f 01 	lds	r24, 0x017F
    1b64:	8f 5f       	subi	r24, 0xFF	; 255
    1b66:	80 93 7f 01 	sts	0x017F, r24

}

if(i>=20) screenDispNum = 14;
    1b6a:	80 91 7f 01 	lds	r24, 0x017F
    1b6e:	84 31       	cpi	r24, 0x14	; 20
    1b70:	18 f0       	brcs	.+6      	; 0x1b78 <__stack+0x1679>
    1b72:	8e e0       	ldi	r24, 0x0E	; 14
    1b74:	80 93 7c 01 	sts	0x017C, r24


	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    1b78:	1c 99       	sbic	0x03, 4	; 3
    1b7a:	05 c0       	rjmp	.+10     	; 0x1b86 <__stack+0x1687>
    1b7c:	80 91 7d 01 	lds	r24, 0x017D
    1b80:	8f 5f       	subi	r24, 0xFF	; 255
    1b82:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    1b86:	1c 99       	sbic	0x03, 4	; 3
    1b88:	08 c0       	rjmp	.+16     	; 0x1b9a <__stack+0x169b>
    1b8a:	80 91 7d 01 	lds	r24, 0x017D
    1b8e:	85 30       	cpi	r24, 0x05	; 5
    1b90:	21 f4       	brne	.+8      	; 0x1b9a <__stack+0x169b>
	{
	screenDispNum = 0;
    1b92:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    1b96:	10 92 7d 01 	sts	0x017D, r1

}



if(screenDispNum == 16)	// submenu DEV 2 C Down ON IN
    1b9a:	80 91 7c 01 	lds	r24, 0x017C
    1b9e:	80 31       	cpi	r24, 0x10	; 16
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <__stack+0x16a5>
    1ba2:	76 c0       	rjmp	.+236    	; 0x1c90 <__stack+0x1791>
{
	Clear_LCD();
    1ba4:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,O);
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	68 e1       	ldi	r22, 0x18	; 24
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,N);
    1bb2:	82 e0       	ldi	r24, 0x02	; 2
    1bb4:	67 e1       	ldi	r22, 0x17	; 23
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,I);
    1bbc:	84 e0       	ldi	r24, 0x04	; 4
    1bbe:	62 e1       	ldi	r22, 0x12	; 18
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,N);
    1bc6:	85 e0       	ldi	r24, 0x05	; 5
    1bc8:	67 e1       	ldi	r22, 0x17	; 23
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	LCDDR0 |= (1<<2); 		// small digit 1 symbol
    1bd0:	80 91 ec 00 	lds	r24, 0x00EC
    1bd4:	84 60       	ori	r24, 0x04	; 4
    1bd6:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    1bda:	1c 99       	sbic	0x03, 4	; 3
    1bdc:	05 c0       	rjmp	.+10     	; 0x1be8 <__stack+0x16e9>
    1bde:	80 91 7d 01 	lds	r24, 0x017D
    1be2:	8f 5f       	subi	r24, 0xFF	; 255
    1be4:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    1be8:	63 99       	sbic	0x0c, 3	; 12
    1bea:	05 c0       	rjmp	.+10     	; 0x1bf6 <__stack+0x16f7>
    1bec:	80 91 7d 01 	lds	r24, 0x017D
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    1bf6:	62 99       	sbic	0x0c, 2	; 12
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <__stack+0x1705>
    1bfa:	80 91 7d 01 	lds	r24, 0x017D
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    1c04:	1f 99       	sbic	0x03, 7	; 3
    1c06:	05 c0       	rjmp	.+10     	; 0x1c12 <__stack+0x1713>
    1c08:	80 91 7d 01 	lds	r24, 0x017D
    1c0c:	8f 5f       	subi	r24, 0xFF	; 255
    1c0e:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    1c12:	1e 99       	sbic	0x03, 6	; 3
    1c14:	05 c0       	rjmp	.+10     	; 0x1c20 <__stack+0x1721>
    1c16:	80 91 7d 01 	lds	r24, 0x017D
    1c1a:	8f 5f       	subi	r24, 0xFF	; 255
    1c1c:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    1c20:	1c 99       	sbic	0x03, 4	; 3
    1c22:	08 c0       	rjmp	.+16     	; 0x1c34 <__stack+0x1735>
    1c24:	80 91 7d 01 	lds	r24, 0x017D
    1c28:	85 30       	cpi	r24, 0x05	; 5
    1c2a:	21 f4       	brne	.+8      	; 0x1c34 <__stack+0x1735>
	{
	screenDispNum = 0;
    1c2c:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    1c30:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    1c34:	63 99       	sbic	0x0c, 3	; 12
    1c36:	09 c0       	rjmp	.+18     	; 0x1c4a <__stack+0x174b>
    1c38:	80 91 7d 01 	lds	r24, 0x017D
    1c3c:	83 30       	cpi	r24, 0x03	; 3
    1c3e:	29 f4       	brne	.+10     	; 0x1c4a <__stack+0x174b>
	{
	screenDispNum = 17;
    1c40:	81 e1       	ldi	r24, 0x11	; 17
    1c42:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1c46:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    1c4a:	62 99       	sbic	0x0c, 2	; 12
    1c4c:	09 c0       	rjmp	.+18     	; 0x1c60 <__stack+0x1761>
    1c4e:	80 91 7d 01 	lds	r24, 0x017D
    1c52:	83 30       	cpi	r24, 0x03	; 3
    1c54:	29 f4       	brne	.+10     	; 0x1c60 <__stack+0x1761>
	{
	screenDispNum = 17;
    1c56:	81 e1       	ldi	r24, 0x11	; 17
    1c58:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1c5c:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    1c60:	1f 99       	sbic	0x03, 7	; 3
    1c62:	0b c0       	rjmp	.+22     	; 0x1c7a <__stack+0x177b>
    1c64:	80 91 7d 01 	lds	r24, 0x017D
    1c68:	83 30       	cpi	r24, 0x03	; 3
    1c6a:	39 f4       	brne	.+14     	; 0x1c7a <__stack+0x177b>
	{
	screenDispNum = 4;
    1c6c:	84 e0       	ldi	r24, 0x04	; 4
    1c6e:	80 93 7c 01 	sts	0x017C, r24
	sub_display = 4;
    1c72:	80 93 7e 01 	sts	0x017E, r24
	button_wait_time = 0;
    1c76:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    1c7a:	1e 99       	sbic	0x03, 6	; 3
    1c7c:	09 c0       	rjmp	.+18     	; 0x1c90 <__stack+0x1791>
    1c7e:	80 91 7d 01 	lds	r24, 0x017D
    1c82:	83 30       	cpi	r24, 0x03	; 3
    1c84:	29 f4       	brne	.+10     	; 0x1c90 <__stack+0x1791>
	{
	screenDispNum = 11;
    1c86:	8b e0       	ldi	r24, 0x0B	; 11
    1c88:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1c8c:	10 92 7d 01 	sts	0x017D, r1

}



if(screenDispNum == 17)	// submenu DEV 1 C Down OFF IN
    1c90:	80 91 7c 01 	lds	r24, 0x017C
    1c94:	81 31       	cpi	r24, 0x11	; 17
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <__stack+0x179b>
    1c98:	7c c0       	rjmp	.+248    	; 0x1d92 <__stack+0x1893>
{
	Clear_LCD();
    1c9a:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,O);
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	68 e1       	ldi	r22, 0x18	; 24
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,F);
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	6f e0       	ldi	r22, 0x0F	; 15
    1cac:	70 e0       	ldi	r23, 0x00	; 0
    1cae:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,F);
    1cb2:	83 e0       	ldi	r24, 0x03	; 3
    1cb4:	6f e0       	ldi	r22, 0x0F	; 15
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,I);
    1cbc:	85 e0       	ldi	r24, 0x05	; 5
    1cbe:	62 e1       	ldi	r22, 0x12	; 18
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,N);
    1cc6:	86 e0       	ldi	r24, 0x06	; 6
    1cc8:	67 e1       	ldi	r22, 0x17	; 23
    1cca:	70 e0       	ldi	r23, 0x00	; 0
    1ccc:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	LCDDR0 |= (1<<2); 		// small digit 1 symbol
    1cd0:	80 91 ec 00 	lds	r24, 0x00EC
    1cd4:	84 60       	ori	r24, 0x04	; 4
    1cd6:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    1cda:	1c 99       	sbic	0x03, 4	; 3
    1cdc:	05 c0       	rjmp	.+10     	; 0x1ce8 <__stack+0x17e9>
    1cde:	80 91 7d 01 	lds	r24, 0x017D
    1ce2:	8f 5f       	subi	r24, 0xFF	; 255
    1ce4:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    1ce8:	63 99       	sbic	0x0c, 3	; 12
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <__stack+0x17f7>
    1cec:	80 91 7d 01 	lds	r24, 0x017D
    1cf0:	8f 5f       	subi	r24, 0xFF	; 255
    1cf2:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    1cf6:	62 99       	sbic	0x0c, 2	; 12
    1cf8:	05 c0       	rjmp	.+10     	; 0x1d04 <__stack+0x1805>
    1cfa:	80 91 7d 01 	lds	r24, 0x017D
    1cfe:	8f 5f       	subi	r24, 0xFF	; 255
    1d00:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    1d04:	1f 99       	sbic	0x03, 7	; 3
    1d06:	05 c0       	rjmp	.+10     	; 0x1d12 <__stack+0x1813>
    1d08:	80 91 7d 01 	lds	r24, 0x017D
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    1d12:	1e 99       	sbic	0x03, 6	; 3
    1d14:	05 c0       	rjmp	.+10     	; 0x1d20 <__stack+0x1821>
    1d16:	80 91 7d 01 	lds	r24, 0x017D
    1d1a:	8f 5f       	subi	r24, 0xFF	; 255
    1d1c:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    1d20:	1c 99       	sbic	0x03, 4	; 3
    1d22:	08 c0       	rjmp	.+16     	; 0x1d34 <__stack+0x1835>
    1d24:	80 91 7d 01 	lds	r24, 0x017D
    1d28:	85 30       	cpi	r24, 0x05	; 5
    1d2a:	21 f4       	brne	.+8      	; 0x1d34 <__stack+0x1835>
	{
	screenDispNum = 0;
    1d2c:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    1d30:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    1d34:	63 99       	sbic	0x0c, 3	; 12
    1d36:	09 c0       	rjmp	.+18     	; 0x1d4a <__stack+0x184b>
    1d38:	80 91 7d 01 	lds	r24, 0x017D
    1d3c:	83 30       	cpi	r24, 0x03	; 3
    1d3e:	29 f4       	brne	.+10     	; 0x1d4a <__stack+0x184b>
	{
	screenDispNum = 16;
    1d40:	80 e1       	ldi	r24, 0x10	; 16
    1d42:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1d46:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    1d4a:	62 99       	sbic	0x0c, 2	; 12
    1d4c:	09 c0       	rjmp	.+18     	; 0x1d60 <__stack+0x1861>
    1d4e:	80 91 7d 01 	lds	r24, 0x017D
    1d52:	83 30       	cpi	r24, 0x03	; 3
    1d54:	29 f4       	brne	.+10     	; 0x1d60 <__stack+0x1861>
	{
	screenDispNum = 16;
    1d56:	80 e1       	ldi	r24, 0x10	; 16
    1d58:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1d5c:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    1d60:	1f 99       	sbic	0x03, 7	; 3
    1d62:	0c c0       	rjmp	.+24     	; 0x1d7c <__stack+0x187d>
    1d64:	80 91 7d 01 	lds	r24, 0x017D
    1d68:	83 30       	cpi	r24, 0x03	; 3
    1d6a:	41 f4       	brne	.+16     	; 0x1d7c <__stack+0x187d>
	{
	screenDispNum = 4;
    1d6c:	84 e0       	ldi	r24, 0x04	; 4
    1d6e:	80 93 7c 01 	sts	0x017C, r24
	sub_display = 5;
    1d72:	85 e0       	ldi	r24, 0x05	; 5
    1d74:	80 93 7e 01 	sts	0x017E, r24
	button_wait_time = 0;
    1d78:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    1d7c:	1e 99       	sbic	0x03, 6	; 3
    1d7e:	09 c0       	rjmp	.+18     	; 0x1d92 <__stack+0x1893>
    1d80:	80 91 7d 01 	lds	r24, 0x017D
    1d84:	83 30       	cpi	r24, 0x03	; 3
    1d86:	29 f4       	brne	.+10     	; 0x1d92 <__stack+0x1893>
	{
	screenDispNum = 11;
    1d88:	8b e0       	ldi	r24, 0x0B	; 11
    1d8a:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1d8e:	10 92 7d 01 	sts	0x017D, r1





if(screenDispNum == 19)	// CLEAR THE COUNTDOWN TIMER AND RESET TO AUTOMATIC ON/OFF MODE
    1d92:	80 91 7c 01 	lds	r24, 0x017C
    1d96:	83 31       	cpi	r24, 0x13	; 19
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <__stack+0x189d>
    1d9a:	5d c0       	rjmp	.+186    	; 0x1e56 <__stack+0x1957>
{

	Clear_LCD();
    1d9c:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,C);
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	6c e0       	ldi	r22, 0x0C	; 12
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,L);
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	65 e1       	ldi	r22, 0x15	; 21
    1dae:	70 e0       	ldi	r23, 0x00	; 0
    1db0:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,E);
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	6e e0       	ldi	r22, 0x0E	; 14
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,A);
    1dbe:	84 e0       	ldi	r24, 0x04	; 4
    1dc0:	6a e0       	ldi	r22, 0x0A	; 10
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,R);
    1dc8:	85 e0       	ldi	r24, 0x05	; 5
    1dca:	6b e1       	ldi	r22, 0x1B	; 27
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

 if (clear_sub_disp == 1) LCDDR0 |= (1<<2); 		// small digit 1 symbol
    1dd2:	80 91 86 01 	lds	r24, 0x0186
    1dd6:	81 30       	cpi	r24, 0x01	; 1
    1dd8:	21 f4       	brne	.+8      	; 0x1de2 <__stack+0x18e3>
    1dda:	80 91 ec 00 	lds	r24, 0x00EC
    1dde:	84 60       	ori	r24, 0x04	; 4
    1de0:	05 c0       	rjmp	.+10     	; 0x1dec <__stack+0x18ed>
 if (clear_sub_disp == 2) LCDDR0 |= (1<<6); 		// small digit 2 symbol
    1de2:	82 30       	cpi	r24, 0x02	; 2
    1de4:	29 f4       	brne	.+10     	; 0x1df0 <__stack+0x18f1>
    1de6:	80 91 ec 00 	lds	r24, 0x00EC
    1dea:	80 64       	ori	r24, 0x40	; 64
    1dec:	80 93 ec 00 	sts	0x00EC, r24
	

	i++;
    1df0:	80 91 7f 01 	lds	r24, 0x017F
    1df4:	8f 5f       	subi	r24, 0xFF	; 255
    1df6:	80 93 7f 01 	sts	0x017F, r24

	if(i>3) 
    1dfa:	84 30       	cpi	r24, 0x04	; 4
    1dfc:	60 f1       	brcs	.+88     	; 0x1e56 <__stack+0x1957>
	{
	
			if (clear_sub_disp == 1)
    1dfe:	80 91 86 01 	lds	r24, 0x0186
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	91 f4       	brne	.+36     	; 0x1e2a <__stack+0x192b>
			{
			relay_1_state = 0;	// puts relay 1 back into timed state
    1e06:	10 92 80 01 	sts	0x0180, r1
			div1_Cdown_sec_unit = 0;
    1e0a:	10 92 64 01 	sts	0x0164, r1
			div1_Cdown_sec_tens = 0;
    1e0e:	10 92 65 01 	sts	0x0165, r1
			div1_Cdown_min_unit = 0;
    1e12:	10 92 66 01 	sts	0x0166, r1
			div1_Cdown_min_tens = 0;
    1e16:	10 92 67 01 	sts	0x0167, r1
			div1_Cdown_hr_unit = 0;
    1e1a:	10 92 68 01 	sts	0x0168, r1
			div1_Cdown_hr_tens = 0;
    1e1e:	10 92 69 01 	sts	0x0169, r1
			lockout1 = 0;
    1e22:	10 92 82 01 	sts	0x0182, r1
			screenDispNum = 0;
    1e26:	10 92 7c 01 	sts	0x017C, r1
			}


			if (clear_sub_disp == 2)
    1e2a:	80 91 86 01 	lds	r24, 0x0186
    1e2e:	82 30       	cpi	r24, 0x02	; 2
    1e30:	91 f4       	brne	.+36     	; 0x1e56 <__stack+0x1957>
			{
			relay_2_state = 0;	// puts relay 2 back into timed state
    1e32:	10 92 81 01 	sts	0x0181, r1
			div2_Cdown_sec_unit = 0;
    1e36:	10 92 72 01 	sts	0x0172, r1
			div2_Cdown_sec_tens = 0;
    1e3a:	10 92 73 01 	sts	0x0173, r1
			div2_Cdown_min_unit = 0;
    1e3e:	10 92 74 01 	sts	0x0174, r1
			div2_Cdown_min_tens = 0;
    1e42:	10 92 75 01 	sts	0x0175, r1
			div2_Cdown_hr_unit = 0;
    1e46:	10 92 76 01 	sts	0x0176, r1
			div2_Cdown_hr_tens = 0;
    1e4a:	10 92 77 01 	sts	0x0177, r1
			lockout2 = 0;
    1e4e:	10 92 83 01 	sts	0x0183, r1
			screenDispNum = 0;
    1e52:	10 92 7c 01 	sts	0x017C, r1

//------------------------------------------------------------
//------------------------ DEV 2 -----------------------------
//------------------------------------------------------------

if(screenDispNum == 21)	// submenu DIV 2
    1e56:	80 91 7c 01 	lds	r24, 0x017C
    1e5a:	85 31       	cpi	r24, 0x15	; 21
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <__stack+0x1961>
    1e5e:	78 c0       	rjmp	.+240    	; 0x1f50 <__stack+0x1a51>
{
	Clear_LCD();
    1e60:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,T);
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	6d e1       	ldi	r22, 0x1D	; 29
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,I);
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	62 e1       	ldi	r22, 0x12	; 18
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,M);
    1e78:	83 e0       	ldi	r24, 0x03	; 3
    1e7a:	66 e1       	ldi	r22, 0x16	; 22
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,E);
    1e82:	84 e0       	ldi	r24, 0x04	; 4
    1e84:	6e e0       	ldi	r22, 0x0E	; 14
    1e86:	70 e0       	ldi	r23, 0x00	; 0
    1e88:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,D);
    1e8c:	85 e0       	ldi	r24, 0x05	; 5
    1e8e:	6d e0       	ldi	r22, 0x0D	; 13
    1e90:	70 e0       	ldi	r23, 0x00	; 0
    1e92:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR0 |= (1<<6); 		// small digit 2 symbol
    1e96:	80 91 ec 00 	lds	r24, 0x00EC
    1e9a:	80 64       	ori	r24, 0x40	; 64
    1e9c:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    1ea0:	1c 99       	sbic	0x03, 4	; 3
    1ea2:	05 c0       	rjmp	.+10     	; 0x1eae <__stack+0x19af>
    1ea4:	80 91 7d 01 	lds	r24, 0x017D
    1ea8:	8f 5f       	subi	r24, 0xFF	; 255
    1eaa:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    1eae:	63 99       	sbic	0x0c, 3	; 12
    1eb0:	05 c0       	rjmp	.+10     	; 0x1ebc <__stack+0x19bd>
    1eb2:	80 91 7d 01 	lds	r24, 0x017D
    1eb6:	8f 5f       	subi	r24, 0xFF	; 255
    1eb8:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    1ebc:	62 99       	sbic	0x0c, 2	; 12
    1ebe:	05 c0       	rjmp	.+10     	; 0x1eca <__stack+0x19cb>
    1ec0:	80 91 7d 01 	lds	r24, 0x017D
    1ec4:	8f 5f       	subi	r24, 0xFF	; 255
    1ec6:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    1eca:	1f 99       	sbic	0x03, 7	; 3
    1ecc:	05 c0       	rjmp	.+10     	; 0x1ed8 <__stack+0x19d9>
    1ece:	80 91 7d 01 	lds	r24, 0x017D
    1ed2:	8f 5f       	subi	r24, 0xFF	; 255
    1ed4:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    1ed8:	1e 99       	sbic	0x03, 6	; 3
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <__stack+0x19e7>
    1edc:	80 91 7d 01 	lds	r24, 0x017D
    1ee0:	8f 5f       	subi	r24, 0xFF	; 255
    1ee2:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    1ee6:	1c 99       	sbic	0x03, 4	; 3
    1ee8:	08 c0       	rjmp	.+16     	; 0x1efa <__stack+0x19fb>
    1eea:	80 91 7d 01 	lds	r24, 0x017D
    1eee:	85 30       	cpi	r24, 0x05	; 5
    1ef0:	21 f4       	brne	.+8      	; 0x1efa <__stack+0x19fb>
	{
	screenDispNum = 0;
    1ef2:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    1ef6:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    1efa:	63 99       	sbic	0x0c, 3	; 12
    1efc:	09 c0       	rjmp	.+18     	; 0x1f10 <__stack+0x1a11>
    1efe:	80 91 7d 01 	lds	r24, 0x017D
    1f02:	83 30       	cpi	r24, 0x03	; 3
    1f04:	29 f4       	brne	.+10     	; 0x1f10 <__stack+0x1a11>
	{
	screenDispNum = 22;
    1f06:	86 e1       	ldi	r24, 0x16	; 22
    1f08:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1f0c:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    1f10:	62 99       	sbic	0x0c, 2	; 12
    1f12:	09 c0       	rjmp	.+18     	; 0x1f26 <__stack+0x1a27>
    1f14:	80 91 7d 01 	lds	r24, 0x017D
    1f18:	83 30       	cpi	r24, 0x03	; 3
    1f1a:	29 f4       	brne	.+10     	; 0x1f26 <__stack+0x1a27>
	{
	screenDispNum = 22;
    1f1c:	86 e1       	ldi	r24, 0x16	; 22
    1f1e:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1f22:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    1f26:	1f 99       	sbic	0x03, 7	; 3
    1f28:	09 c0       	rjmp	.+18     	; 0x1f3c <__stack+0x1a3d>
    1f2a:	80 91 7d 01 	lds	r24, 0x017D
    1f2e:	83 30       	cpi	r24, 0x03	; 3
    1f30:	29 f4       	brne	.+10     	; 0x1f3c <__stack+0x1a3d>
	{
	screenDispNum = 23;
    1f32:	87 e1       	ldi	r24, 0x17	; 23
    1f34:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1f38:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    1f3c:	1e 99       	sbic	0x03, 6	; 3
    1f3e:	08 c0       	rjmp	.+16     	; 0x1f50 <__stack+0x1a51>
    1f40:	80 91 7d 01 	lds	r24, 0x017D
    1f44:	83 30       	cpi	r24, 0x03	; 3
    1f46:	21 f4       	brne	.+8      	; 0x1f50 <__stack+0x1a51>
	{
	screenDispNum = 3;
    1f48:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    1f4c:	10 92 7d 01 	sts	0x017D, r1
	}

}

if(screenDispNum == 22)	// submenu DIV 2
    1f50:	80 91 7c 01 	lds	r24, 0x017C
    1f54:	86 31       	cpi	r24, 0x16	; 22
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <__stack+0x1a5b>
    1f58:	78 c0       	rjmp	.+240    	; 0x204a <__stack+0x1b4b>
{
	Clear_LCD();
    1f5a:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,C);
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	6c e0       	ldi	r22, 0x0C	; 12
    1f62:	70 e0       	ldi	r23, 0x00	; 0
    1f64:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,D);
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	6d e0       	ldi	r22, 0x0D	; 13
    1f6c:	70 e0       	ldi	r23, 0x00	; 0
    1f6e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,O);
    1f72:	84 e0       	ldi	r24, 0x04	; 4
    1f74:	68 e1       	ldi	r22, 0x18	; 24
    1f76:	70 e0       	ldi	r23, 0x00	; 0
    1f78:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,W);
    1f7c:	85 e0       	ldi	r24, 0x05	; 5
    1f7e:	60 e2       	ldi	r22, 0x20	; 32
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,N);
    1f86:	86 e0       	ldi	r24, 0x06	; 6
    1f88:	67 e1       	ldi	r22, 0x17	; 23
    1f8a:	70 e0       	ldi	r23, 0x00	; 0
    1f8c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR0 |= (1<<6); 		// small digit 2 symbol
    1f90:	80 91 ec 00 	lds	r24, 0x00EC
    1f94:	80 64       	ori	r24, 0x40	; 64
    1f96:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    1f9a:	1c 99       	sbic	0x03, 4	; 3
    1f9c:	05 c0       	rjmp	.+10     	; 0x1fa8 <__stack+0x1aa9>
    1f9e:	80 91 7d 01 	lds	r24, 0x017D
    1fa2:	8f 5f       	subi	r24, 0xFF	; 255
    1fa4:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    1fa8:	63 99       	sbic	0x0c, 3	; 12
    1faa:	05 c0       	rjmp	.+10     	; 0x1fb6 <__stack+0x1ab7>
    1fac:	80 91 7d 01 	lds	r24, 0x017D
    1fb0:	8f 5f       	subi	r24, 0xFF	; 255
    1fb2:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    1fb6:	62 99       	sbic	0x0c, 2	; 12
    1fb8:	05 c0       	rjmp	.+10     	; 0x1fc4 <__stack+0x1ac5>
    1fba:	80 91 7d 01 	lds	r24, 0x017D
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    1fc4:	1f 99       	sbic	0x03, 7	; 3
    1fc6:	05 c0       	rjmp	.+10     	; 0x1fd2 <__stack+0x1ad3>
    1fc8:	80 91 7d 01 	lds	r24, 0x017D
    1fcc:	8f 5f       	subi	r24, 0xFF	; 255
    1fce:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    1fd2:	1e 99       	sbic	0x03, 6	; 3
    1fd4:	05 c0       	rjmp	.+10     	; 0x1fe0 <__stack+0x1ae1>
    1fd6:	80 91 7d 01 	lds	r24, 0x017D
    1fda:	8f 5f       	subi	r24, 0xFF	; 255
    1fdc:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    1fe0:	1c 99       	sbic	0x03, 4	; 3
    1fe2:	08 c0       	rjmp	.+16     	; 0x1ff4 <__stack+0x1af5>
    1fe4:	80 91 7d 01 	lds	r24, 0x017D
    1fe8:	85 30       	cpi	r24, 0x05	; 5
    1fea:	21 f4       	brne	.+8      	; 0x1ff4 <__stack+0x1af5>
	{
	screenDispNum = 0;
    1fec:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    1ff0:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    1ff4:	63 99       	sbic	0x0c, 3	; 12
    1ff6:	09 c0       	rjmp	.+18     	; 0x200a <__stack+0x1b0b>
    1ff8:	80 91 7d 01 	lds	r24, 0x017D
    1ffc:	83 30       	cpi	r24, 0x03	; 3
    1ffe:	29 f4       	brne	.+10     	; 0x200a <__stack+0x1b0b>
	{
	screenDispNum = 21;
    2000:	85 e1       	ldi	r24, 0x15	; 21
    2002:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    2006:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    200a:	62 99       	sbic	0x0c, 2	; 12
    200c:	09 c0       	rjmp	.+18     	; 0x2020 <__stack+0x1b21>
    200e:	80 91 7d 01 	lds	r24, 0x017D
    2012:	83 30       	cpi	r24, 0x03	; 3
    2014:	29 f4       	brne	.+10     	; 0x2020 <__stack+0x1b21>
	{
	screenDispNum = 21;
    2016:	85 e1       	ldi	r24, 0x15	; 21
    2018:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    201c:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    2020:	1f 99       	sbic	0x03, 7	; 3
    2022:	09 c0       	rjmp	.+18     	; 0x2036 <__stack+0x1b37>
    2024:	80 91 7d 01 	lds	r24, 0x017D
    2028:	83 30       	cpi	r24, 0x03	; 3
    202a:	29 f4       	brne	.+10     	; 0x2036 <__stack+0x1b37>
	{
	screenDispNum = 27;
    202c:	8b e1       	ldi	r24, 0x1B	; 27
    202e:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    2032:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    2036:	1e 99       	sbic	0x03, 6	; 3
    2038:	08 c0       	rjmp	.+16     	; 0x204a <__stack+0x1b4b>
    203a:	80 91 7d 01 	lds	r24, 0x017D
    203e:	83 30       	cpi	r24, 0x03	; 3
    2040:	21 f4       	brne	.+8      	; 0x204a <__stack+0x1b4b>
	{
	screenDispNum = 3;
    2042:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    2046:	10 92 7d 01 	sts	0x017D, r1

}



if(screenDispNum == 23)	// submenu DIV 2 ON AT:
    204a:	80 91 7c 01 	lds	r24, 0x017C
    204e:	87 31       	cpi	r24, 0x17	; 23
    2050:	09 f0       	breq	.+2      	; 0x2054 <__stack+0x1b55>
    2052:	77 c0       	rjmp	.+238    	; 0x2142 <__stack+0x1c43>
{
	Clear_LCD();
    2054:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,O);
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	68 e1       	ldi	r22, 0x18	; 24
    205c:	70 e0       	ldi	r23, 0x00	; 0
    205e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,N);
    2062:	82 e0       	ldi	r24, 0x02	; 2
    2064:	67 e1       	ldi	r22, 0x17	; 23
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,A);
    206c:	84 e0       	ldi	r24, 0x04	; 4
    206e:	6a e0       	ldi	r22, 0x0A	; 10
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,T);
    2076:	85 e0       	ldi	r24, 0x05	; 5
    2078:	6d e1       	ldi	r22, 0x1D	; 29
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	LCDDR0 |= (1<<6); 		// small digit 2 symbol
    2080:	80 91 ec 00 	lds	r24, 0x00EC
    2084:	80 64       	ori	r24, 0x40	; 64
    2086:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    208a:	1c 99       	sbic	0x03, 4	; 3
    208c:	05 c0       	rjmp	.+10     	; 0x2098 <__stack+0x1b99>
    208e:	80 91 7d 01 	lds	r24, 0x017D
    2092:	8f 5f       	subi	r24, 0xFF	; 255
    2094:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    2098:	63 99       	sbic	0x0c, 3	; 12
    209a:	05 c0       	rjmp	.+10     	; 0x20a6 <__stack+0x1ba7>
    209c:	80 91 7d 01 	lds	r24, 0x017D
    20a0:	8f 5f       	subi	r24, 0xFF	; 255
    20a2:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    20a6:	62 99       	sbic	0x0c, 2	; 12
    20a8:	05 c0       	rjmp	.+10     	; 0x20b4 <__stack+0x1bb5>
    20aa:	80 91 7d 01 	lds	r24, 0x017D
    20ae:	8f 5f       	subi	r24, 0xFF	; 255
    20b0:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    20b4:	1f 99       	sbic	0x03, 7	; 3
    20b6:	05 c0       	rjmp	.+10     	; 0x20c2 <__stack+0x1bc3>
    20b8:	80 91 7d 01 	lds	r24, 0x017D
    20bc:	8f 5f       	subi	r24, 0xFF	; 255
    20be:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    20c2:	1e 99       	sbic	0x03, 6	; 3
    20c4:	05 c0       	rjmp	.+10     	; 0x20d0 <__stack+0x1bd1>
    20c6:	80 91 7d 01 	lds	r24, 0x017D
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    20d0:	1c 99       	sbic	0x03, 4	; 3
    20d2:	08 c0       	rjmp	.+16     	; 0x20e4 <__stack+0x1be5>
    20d4:	80 91 7d 01 	lds	r24, 0x017D
    20d8:	85 30       	cpi	r24, 0x05	; 5
    20da:	21 f4       	brne	.+8      	; 0x20e4 <__stack+0x1be5>
	{
	screenDispNum = 0;
    20dc:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    20e0:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    20e4:	63 99       	sbic	0x0c, 3	; 12
    20e6:	09 c0       	rjmp	.+18     	; 0x20fa <__stack+0x1bfb>
    20e8:	80 91 7d 01 	lds	r24, 0x017D
    20ec:	83 30       	cpi	r24, 0x03	; 3
    20ee:	29 f4       	brne	.+10     	; 0x20fa <__stack+0x1bfb>
	{
	screenDispNum = 24;
    20f0:	88 e1       	ldi	r24, 0x18	; 24
    20f2:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    20f6:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    20fa:	62 99       	sbic	0x0c, 2	; 12
    20fc:	09 c0       	rjmp	.+18     	; 0x2110 <__stack+0x1c11>
    20fe:	80 91 7d 01 	lds	r24, 0x017D
    2102:	83 30       	cpi	r24, 0x03	; 3
    2104:	29 f4       	brne	.+10     	; 0x2110 <__stack+0x1c11>
	{
	screenDispNum = 25;
    2106:	89 e1       	ldi	r24, 0x19	; 25
    2108:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    210c:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    2110:	1f 99       	sbic	0x03, 7	; 3
    2112:	0c c0       	rjmp	.+24     	; 0x212c <__stack+0x1c2d>
    2114:	80 91 7d 01 	lds	r24, 0x017D
    2118:	83 30       	cpi	r24, 0x03	; 3
    211a:	41 f4       	brne	.+16     	; 0x212c <__stack+0x1c2d>
	{
	screenDispNum = 4;
    211c:	84 e0       	ldi	r24, 0x04	; 4
    211e:	80 93 7c 01 	sts	0x017C, r24
	sub_display = 6;
    2122:	86 e0       	ldi	r24, 0x06	; 6
    2124:	80 93 7e 01 	sts	0x017E, r24
	button_wait_time = 0;
    2128:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    212c:	1e 99       	sbic	0x03, 6	; 3
    212e:	09 c0       	rjmp	.+18     	; 0x2142 <__stack+0x1c43>
    2130:	80 91 7d 01 	lds	r24, 0x017D
    2134:	83 30       	cpi	r24, 0x03	; 3
    2136:	29 f4       	brne	.+10     	; 0x2142 <__stack+0x1c43>
	{
	screenDispNum = 21;
    2138:	85 e1       	ldi	r24, 0x15	; 21
    213a:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    213e:	10 92 7d 01 	sts	0x017D, r1
	}

}

if(screenDispNum == 24)	// submenu DIV 2 OFF AT:
    2142:	80 91 7c 01 	lds	r24, 0x017C
    2146:	88 31       	cpi	r24, 0x18	; 24
    2148:	09 f0       	breq	.+2      	; 0x214c <__stack+0x1c4d>
    214a:	7c c0       	rjmp	.+248    	; 0x2244 <__stack+0x1d45>
{
	Clear_LCD();
    214c:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,O);
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	68 e1       	ldi	r22, 0x18	; 24
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,F);
    215a:	82 e0       	ldi	r24, 0x02	; 2
    215c:	6f e0       	ldi	r22, 0x0F	; 15
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,F);
    2164:	83 e0       	ldi	r24, 0x03	; 3
    2166:	6f e0       	ldi	r22, 0x0F	; 15
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,A);
    216e:	85 e0       	ldi	r24, 0x05	; 5
    2170:	6a e0       	ldi	r22, 0x0A	; 10
    2172:	70 e0       	ldi	r23, 0x00	; 0
    2174:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,T);
    2178:	86 e0       	ldi	r24, 0x06	; 6
    217a:	6d e1       	ldi	r22, 0x1D	; 29
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	LCDDR0 |= (1<<6); 		// small digit 2 symbol
    2182:	80 91 ec 00 	lds	r24, 0x00EC
    2186:	80 64       	ori	r24, 0x40	; 64
    2188:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    218c:	1c 99       	sbic	0x03, 4	; 3
    218e:	05 c0       	rjmp	.+10     	; 0x219a <__stack+0x1c9b>
    2190:	80 91 7d 01 	lds	r24, 0x017D
    2194:	8f 5f       	subi	r24, 0xFF	; 255
    2196:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    219a:	63 99       	sbic	0x0c, 3	; 12
    219c:	05 c0       	rjmp	.+10     	; 0x21a8 <__stack+0x1ca9>
    219e:	80 91 7d 01 	lds	r24, 0x017D
    21a2:	8f 5f       	subi	r24, 0xFF	; 255
    21a4:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    21a8:	62 99       	sbic	0x0c, 2	; 12
    21aa:	05 c0       	rjmp	.+10     	; 0x21b6 <__stack+0x1cb7>
    21ac:	80 91 7d 01 	lds	r24, 0x017D
    21b0:	8f 5f       	subi	r24, 0xFF	; 255
    21b2:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    21b6:	1f 99       	sbic	0x03, 7	; 3
    21b8:	05 c0       	rjmp	.+10     	; 0x21c4 <__stack+0x1cc5>
    21ba:	80 91 7d 01 	lds	r24, 0x017D
    21be:	8f 5f       	subi	r24, 0xFF	; 255
    21c0:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    21c4:	1e 99       	sbic	0x03, 6	; 3
    21c6:	05 c0       	rjmp	.+10     	; 0x21d2 <__stack+0x1cd3>
    21c8:	80 91 7d 01 	lds	r24, 0x017D
    21cc:	8f 5f       	subi	r24, 0xFF	; 255
    21ce:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    21d2:	1c 99       	sbic	0x03, 4	; 3
    21d4:	08 c0       	rjmp	.+16     	; 0x21e6 <__stack+0x1ce7>
    21d6:	80 91 7d 01 	lds	r24, 0x017D
    21da:	85 30       	cpi	r24, 0x05	; 5
    21dc:	21 f4       	brne	.+8      	; 0x21e6 <__stack+0x1ce7>
	{
	screenDispNum = 0;
    21de:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    21e2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    21e6:	63 99       	sbic	0x0c, 3	; 12
    21e8:	09 c0       	rjmp	.+18     	; 0x21fc <__stack+0x1cfd>
    21ea:	80 91 7d 01 	lds	r24, 0x017D
    21ee:	83 30       	cpi	r24, 0x03	; 3
    21f0:	29 f4       	brne	.+10     	; 0x21fc <__stack+0x1cfd>
	{
	screenDispNum = 25;
    21f2:	89 e1       	ldi	r24, 0x19	; 25
    21f4:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    21f8:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    21fc:	62 99       	sbic	0x0c, 2	; 12
    21fe:	09 c0       	rjmp	.+18     	; 0x2212 <__stack+0x1d13>
    2200:	80 91 7d 01 	lds	r24, 0x017D
    2204:	83 30       	cpi	r24, 0x03	; 3
    2206:	29 f4       	brne	.+10     	; 0x2212 <__stack+0x1d13>
	{
	screenDispNum = 23;
    2208:	87 e1       	ldi	r24, 0x17	; 23
    220a:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    220e:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    2212:	1f 99       	sbic	0x03, 7	; 3
    2214:	0c c0       	rjmp	.+24     	; 0x222e <__stack+0x1d2f>
    2216:	80 91 7d 01 	lds	r24, 0x017D
    221a:	83 30       	cpi	r24, 0x03	; 3
    221c:	41 f4       	brne	.+16     	; 0x222e <__stack+0x1d2f>
	{
	screenDispNum = 4;
    221e:	84 e0       	ldi	r24, 0x04	; 4
    2220:	80 93 7c 01 	sts	0x017C, r24
	sub_display = 7;
    2224:	87 e0       	ldi	r24, 0x07	; 7
    2226:	80 93 7e 01 	sts	0x017E, r24
	button_wait_time = 0;
    222a:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    222e:	1e 99       	sbic	0x03, 6	; 3
    2230:	09 c0       	rjmp	.+18     	; 0x2244 <__stack+0x1d45>
    2232:	80 91 7d 01 	lds	r24, 0x017D
    2236:	83 30       	cpi	r24, 0x03	; 3
    2238:	29 f4       	brne	.+10     	; 0x2244 <__stack+0x1d45>
	{
	screenDispNum = 21;
    223a:	85 e1       	ldi	r24, 0x15	; 21
    223c:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    2240:	10 92 7d 01 	sts	0x017D, r1
	}

}

if(screenDispNum == 25)	// submenu DIV 2 CHECK
    2244:	80 91 7c 01 	lds	r24, 0x017C
    2248:	89 31       	cpi	r24, 0x19	; 25
    224a:	09 f0       	breq	.+2      	; 0x224e <__stack+0x1d4f>
    224c:	7b c0       	rjmp	.+246    	; 0x2344 <__stack+0x1e45>
{
	Clear_LCD();
    224e:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,C);
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	6c e0       	ldi	r22, 0x0C	; 12
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,H);
    225c:	82 e0       	ldi	r24, 0x02	; 2
    225e:	61 e1       	ldi	r22, 0x11	; 17
    2260:	70 e0       	ldi	r23, 0x00	; 0
    2262:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,E);
    2266:	83 e0       	ldi	r24, 0x03	; 3
    2268:	6e e0       	ldi	r22, 0x0E	; 14
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,C);
    2270:	84 e0       	ldi	r24, 0x04	; 4
    2272:	6c e0       	ldi	r22, 0x0C	; 12
    2274:	70 e0       	ldi	r23, 0x00	; 0
    2276:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,K);
    227a:	85 e0       	ldi	r24, 0x05	; 5
    227c:	64 e1       	ldi	r22, 0x14	; 20
    227e:	70 e0       	ldi	r23, 0x00	; 0
    2280:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	LCDDR0 |= (1<<6); 		// small digit 2 symbol
    2284:	80 91 ec 00 	lds	r24, 0x00EC
    2288:	80 64       	ori	r24, 0x40	; 64
    228a:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    228e:	1c 99       	sbic	0x03, 4	; 3
    2290:	05 c0       	rjmp	.+10     	; 0x229c <__stack+0x1d9d>
    2292:	80 91 7d 01 	lds	r24, 0x017D
    2296:	8f 5f       	subi	r24, 0xFF	; 255
    2298:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    229c:	63 99       	sbic	0x0c, 3	; 12
    229e:	05 c0       	rjmp	.+10     	; 0x22aa <__stack+0x1dab>
    22a0:	80 91 7d 01 	lds	r24, 0x017D
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    22aa:	62 99       	sbic	0x0c, 2	; 12
    22ac:	05 c0       	rjmp	.+10     	; 0x22b8 <__stack+0x1db9>
    22ae:	80 91 7d 01 	lds	r24, 0x017D
    22b2:	8f 5f       	subi	r24, 0xFF	; 255
    22b4:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    22b8:	1f 99       	sbic	0x03, 7	; 3
    22ba:	05 c0       	rjmp	.+10     	; 0x22c6 <__stack+0x1dc7>
    22bc:	80 91 7d 01 	lds	r24, 0x017D
    22c0:	8f 5f       	subi	r24, 0xFF	; 255
    22c2:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    22c6:	1e 99       	sbic	0x03, 6	; 3
    22c8:	05 c0       	rjmp	.+10     	; 0x22d4 <__stack+0x1dd5>
    22ca:	80 91 7d 01 	lds	r24, 0x017D
    22ce:	8f 5f       	subi	r24, 0xFF	; 255
    22d0:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    22d4:	1c 99       	sbic	0x03, 4	; 3
    22d6:	08 c0       	rjmp	.+16     	; 0x22e8 <__stack+0x1de9>
    22d8:	80 91 7d 01 	lds	r24, 0x017D
    22dc:	85 30       	cpi	r24, 0x05	; 5
    22de:	21 f4       	brne	.+8      	; 0x22e8 <__stack+0x1de9>
	{
	screenDispNum = 0;
    22e0:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    22e4:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    22e8:	63 99       	sbic	0x0c, 3	; 12
    22ea:	09 c0       	rjmp	.+18     	; 0x22fe <__stack+0x1dff>
    22ec:	80 91 7d 01 	lds	r24, 0x017D
    22f0:	83 30       	cpi	r24, 0x03	; 3
    22f2:	29 f4       	brne	.+10     	; 0x22fe <__stack+0x1dff>
	{
	screenDispNum = 23;
    22f4:	87 e1       	ldi	r24, 0x17	; 23
    22f6:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    22fa:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    22fe:	62 99       	sbic	0x0c, 2	; 12
    2300:	09 c0       	rjmp	.+18     	; 0x2314 <__stack+0x1e15>
    2302:	80 91 7d 01 	lds	r24, 0x017D
    2306:	83 30       	cpi	r24, 0x03	; 3
    2308:	29 f4       	brne	.+10     	; 0x2314 <__stack+0x1e15>
	{
	screenDispNum = 24;
    230a:	88 e1       	ldi	r24, 0x18	; 24
    230c:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    2310:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    2314:	1f 99       	sbic	0x03, 7	; 3
    2316:	0b c0       	rjmp	.+22     	; 0x232e <__stack+0x1e2f>
    2318:	80 91 7d 01 	lds	r24, 0x017D
    231c:	83 30       	cpi	r24, 0x03	; 3
    231e:	39 f4       	brne	.+14     	; 0x232e <__stack+0x1e2f>
	{
	screenDispNum = 26;
    2320:	8a e1       	ldi	r24, 0x1A	; 26
    2322:	80 93 7c 01 	sts	0x017C, r24
	i = 0;
    2326:	10 92 7f 01 	sts	0x017F, r1
	button_wait_time = 0;
    232a:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    232e:	1e 99       	sbic	0x03, 6	; 3
    2330:	09 c0       	rjmp	.+18     	; 0x2344 <__stack+0x1e45>
    2332:	80 91 7d 01 	lds	r24, 0x017D
    2336:	83 30       	cpi	r24, 0x03	; 3
    2338:	29 f4       	brne	.+10     	; 0x2344 <__stack+0x1e45>
	{
	screenDispNum = 21;
    233a:	85 e1       	ldi	r24, 0x15	; 21
    233c:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    2340:	10 92 7d 01 	sts	0x017D, r1
	}

}


if(screenDispNum == 26)	// submenu DIV 2 CHECK
    2344:	80 91 7c 01 	lds	r24, 0x017C
    2348:	8a 31       	cpi	r24, 0x1A	; 26
    234a:	09 f0       	breq	.+2      	; 0x234e <__stack+0x1e4f>
    234c:	d2 c0       	rjmp	.+420    	; 0x24f2 <__stack+0x1ff3>
{



if(i<5)	
    234e:	80 91 7f 01 	lds	r24, 0x017F
    2352:	85 30       	cpi	r24, 0x05	; 5
    2354:	00 f5       	brcc	.+64     	; 0x2396 <__stack+0x1e97>
{	
	Clear_LCD();
    2356:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,O);
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	68 e1       	ldi	r22, 0x18	; 24
    235e:	70 e0       	ldi	r23, 0x00	; 0
    2360:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,N);
    2364:	82 e0       	ldi	r24, 0x02	; 2
    2366:	67 e1       	ldi	r22, 0x17	; 23
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,A);
    236e:	84 e0       	ldi	r24, 0x04	; 4
    2370:	6a e0       	ldi	r22, 0x0A	; 10
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,T);
    2378:	85 e0       	ldi	r24, 0x05	; 5
    237a:	6d e1       	ldi	r22, 0x1D	; 29
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR0 |= (1<<6); 		// small digit 2 symbol
    2382:	80 91 ec 00 	lds	r24, 0x00EC
    2386:	80 64       	ori	r24, 0x40	; 64
    2388:	80 93 ec 00 	sts	0x00EC, r24
	i++;
    238c:	80 91 7f 01 	lds	r24, 0x017F
    2390:	8f 5f       	subi	r24, 0xFF	; 255
    2392:	80 93 7f 01 	sts	0x017F, r24
}

if(i>=5 && i<10)	
    2396:	80 91 7f 01 	lds	r24, 0x017F
    239a:	85 50       	subi	r24, 0x05	; 5
    239c:	85 30       	cpi	r24, 0x05	; 5
    239e:	88 f5       	brcc	.+98     	; 0x2402 <__stack+0x1f03>
{
	Clear_LCD();
    23a0:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,div2_on_hr_tens);
    23a4:	60 91 6d 01 	lds	r22, 0x016D
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	70 e0       	ldi	r23, 0x00	; 0
    23ac:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,div2_on_hr_unit);
    23b0:	60 91 6c 01 	lds	r22, 0x016C
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,div2_on_min_tens);
    23bc:	60 91 6b 01 	lds	r22, 0x016B
    23c0:	83 e0       	ldi	r24, 0x03	; 3
    23c2:	70 e0       	ldi	r23, 0x00	; 0
    23c4:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,div2_on_min_unit);
    23c8:	60 91 6a 01 	lds	r22, 0x016A
    23cc:	84 e0       	ldi	r24, 0x04	; 4
    23ce:	70 e0       	ldi	r23, 0x00	; 0
    23d0:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,0);
    23d4:	85 e0       	ldi	r24, 0x05	; 5
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	70 e0       	ldi	r23, 0x00	; 0
    23da:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,0);
    23de:	86 e0       	ldi	r24, 0x06	; 6
    23e0:	60 e0       	ldi	r22, 0x00	; 0
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR8 = (1<<0);			// colons
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	80 93 f4 00 	sts	0x00F4, r24
	LCDDR0 |= (1<<6); 		// small digit 2 symbol
    23ee:	80 91 ec 00 	lds	r24, 0x00EC
    23f2:	80 64       	ori	r24, 0x40	; 64
    23f4:	80 93 ec 00 	sts	0x00EC, r24
	i++;
    23f8:	80 91 7f 01 	lds	r24, 0x017F
    23fc:	8f 5f       	subi	r24, 0xFF	; 255
    23fe:	80 93 7f 01 	sts	0x017F, r24

}

if(i>=10 && i<15)	
    2402:	80 91 7f 01 	lds	r24, 0x017F
    2406:	8a 50       	subi	r24, 0x0A	; 10
    2408:	85 30       	cpi	r24, 0x05	; 5
    240a:	28 f5       	brcc	.+74     	; 0x2456 <__stack+0x1f57>
{
	Clear_LCD();
    240c:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,O);
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	68 e1       	ldi	r22, 0x18	; 24
    2414:	70 e0       	ldi	r23, 0x00	; 0
    2416:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,F);
    241a:	82 e0       	ldi	r24, 0x02	; 2
    241c:	6f e0       	ldi	r22, 0x0F	; 15
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,F);
    2424:	83 e0       	ldi	r24, 0x03	; 3
    2426:	6f e0       	ldi	r22, 0x0F	; 15
    2428:	70 e0       	ldi	r23, 0x00	; 0
    242a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,A);
    242e:	85 e0       	ldi	r24, 0x05	; 5
    2430:	6a e0       	ldi	r22, 0x0A	; 10
    2432:	70 e0       	ldi	r23, 0x00	; 0
    2434:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,T);
    2438:	86 e0       	ldi	r24, 0x06	; 6
    243a:	6d e1       	ldi	r22, 0x1D	; 29
    243c:	70 e0       	ldi	r23, 0x00	; 0
    243e:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR0 |= (1<<6); 		// small digit 2 symbol
    2442:	80 91 ec 00 	lds	r24, 0x00EC
    2446:	80 64       	ori	r24, 0x40	; 64
    2448:	80 93 ec 00 	sts	0x00EC, r24
	i++;
    244c:	80 91 7f 01 	lds	r24, 0x017F
    2450:	8f 5f       	subi	r24, 0xFF	; 255
    2452:	80 93 7f 01 	sts	0x017F, r24
 
}

if(i>=15 && i<20)	
    2456:	80 91 7f 01 	lds	r24, 0x017F
    245a:	8f 50       	subi	r24, 0x0F	; 15
    245c:	85 30       	cpi	r24, 0x05	; 5
    245e:	88 f5       	brcc	.+98     	; 0x24c2 <__stack+0x1fc3>
{

	Clear_LCD();
    2460:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,div2_off_hr_tens);
    2464:	60 91 71 01 	lds	r22, 0x0171
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	70 e0       	ldi	r23, 0x00	; 0
    246c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,div2_off_hr_unit);
    2470:	60 91 70 01 	lds	r22, 0x0170
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	70 e0       	ldi	r23, 0x00	; 0
    2478:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,div2_off_min_tens);
    247c:	60 91 6f 01 	lds	r22, 0x016F
    2480:	83 e0       	ldi	r24, 0x03	; 3
    2482:	70 e0       	ldi	r23, 0x00	; 0
    2484:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,div2_off_min_unit);
    2488:	60 91 6e 01 	lds	r22, 0x016E
    248c:	84 e0       	ldi	r24, 0x04	; 4
    248e:	70 e0       	ldi	r23, 0x00	; 0
    2490:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,0);
    2494:	85 e0       	ldi	r24, 0x05	; 5
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	70 e0       	ldi	r23, 0x00	; 0
    249a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,0);
    249e:	86 e0       	ldi	r24, 0x06	; 6
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	LCDDR8 = (1<<0);			// colons
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	80 93 f4 00 	sts	0x00F4, r24
	LCDDR0 |= (1<<6); 		// small digit 2 symbol
    24ae:	80 91 ec 00 	lds	r24, 0x00EC
    24b2:	80 64       	ori	r24, 0x40	; 64
    24b4:	80 93 ec 00 	sts	0x00EC, r24
	i++;
    24b8:	80 91 7f 01 	lds	r24, 0x017F
    24bc:	8f 5f       	subi	r24, 0xFF	; 255
    24be:	80 93 7f 01 	sts	0x017F, r24

}

if(i>=20) screenDispNum = 25;
    24c2:	80 91 7f 01 	lds	r24, 0x017F
    24c6:	84 31       	cpi	r24, 0x14	; 20
    24c8:	18 f0       	brcs	.+6      	; 0x24d0 <__stack+0x1fd1>
    24ca:	89 e1       	ldi	r24, 0x19	; 25
    24cc:	80 93 7c 01 	sts	0x017C, r24


	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    24d0:	1c 99       	sbic	0x03, 4	; 3
    24d2:	05 c0       	rjmp	.+10     	; 0x24de <__stack+0x1fdf>
    24d4:	80 91 7d 01 	lds	r24, 0x017D
    24d8:	8f 5f       	subi	r24, 0xFF	; 255
    24da:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    24de:	1c 99       	sbic	0x03, 4	; 3
    24e0:	08 c0       	rjmp	.+16     	; 0x24f2 <__stack+0x1ff3>
    24e2:	80 91 7d 01 	lds	r24, 0x017D
    24e6:	85 30       	cpi	r24, 0x05	; 5
    24e8:	21 f4       	brne	.+8      	; 0x24f2 <__stack+0x1ff3>
	{
	screenDispNum = 0;
    24ea:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    24ee:	10 92 7d 01 	sts	0x017D, r1

}



if(screenDispNum == 27)	// submenu DEV 2 C Down
    24f2:	80 91 7c 01 	lds	r24, 0x017C
    24f6:	8b 31       	cpi	r24, 0x1B	; 27
    24f8:	09 f0       	breq	.+2      	; 0x24fc <__stack+0x1ffd>
    24fa:	77 c0       	rjmp	.+238    	; 0x25ea <__stack+0x20eb>
{
	Clear_LCD();
    24fc:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,O);
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	68 e1       	ldi	r22, 0x18	; 24
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,N);
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	67 e1       	ldi	r22, 0x17	; 23
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(4,I);
    2514:	84 e0       	ldi	r24, 0x04	; 4
    2516:	62 e1       	ldi	r22, 0x12	; 18
    2518:	70 e0       	ldi	r23, 0x00	; 0
    251a:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,N);
    251e:	85 e0       	ldi	r24, 0x05	; 5
    2520:	67 e1       	ldi	r22, 0x17	; 23
    2522:	70 e0       	ldi	r23, 0x00	; 0
    2524:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	LCDDR0 |= (1<<6); 		// small digit 2 symbol
    2528:	80 91 ec 00 	lds	r24, 0x00EC
    252c:	80 64       	ori	r24, 0x40	; 64
    252e:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    2532:	1c 99       	sbic	0x03, 4	; 3
    2534:	05 c0       	rjmp	.+10     	; 0x2540 <__stack+0x2041>
    2536:	80 91 7d 01 	lds	r24, 0x017D
    253a:	8f 5f       	subi	r24, 0xFF	; 255
    253c:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    2540:	63 99       	sbic	0x0c, 3	; 12
    2542:	05 c0       	rjmp	.+10     	; 0x254e <__stack+0x204f>
    2544:	80 91 7d 01 	lds	r24, 0x017D
    2548:	8f 5f       	subi	r24, 0xFF	; 255
    254a:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    254e:	62 99       	sbic	0x0c, 2	; 12
    2550:	05 c0       	rjmp	.+10     	; 0x255c <__stack+0x205d>
    2552:	80 91 7d 01 	lds	r24, 0x017D
    2556:	8f 5f       	subi	r24, 0xFF	; 255
    2558:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    255c:	1f 99       	sbic	0x03, 7	; 3
    255e:	05 c0       	rjmp	.+10     	; 0x256a <__stack+0x206b>
    2560:	80 91 7d 01 	lds	r24, 0x017D
    2564:	8f 5f       	subi	r24, 0xFF	; 255
    2566:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    256a:	1e 99       	sbic	0x03, 6	; 3
    256c:	05 c0       	rjmp	.+10     	; 0x2578 <__stack+0x2079>
    256e:	80 91 7d 01 	lds	r24, 0x017D
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    2578:	1c 99       	sbic	0x03, 4	; 3
    257a:	08 c0       	rjmp	.+16     	; 0x258c <__stack+0x208d>
    257c:	80 91 7d 01 	lds	r24, 0x017D
    2580:	85 30       	cpi	r24, 0x05	; 5
    2582:	21 f4       	brne	.+8      	; 0x258c <__stack+0x208d>
	{
	screenDispNum = 0;
    2584:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    2588:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    258c:	63 99       	sbic	0x0c, 3	; 12
    258e:	09 c0       	rjmp	.+18     	; 0x25a2 <__stack+0x20a3>
    2590:	80 91 7d 01 	lds	r24, 0x017D
    2594:	83 30       	cpi	r24, 0x03	; 3
    2596:	29 f4       	brne	.+10     	; 0x25a2 <__stack+0x20a3>
	{
	screenDispNum = 28;
    2598:	8c e1       	ldi	r24, 0x1C	; 28
    259a:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    259e:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    25a2:	62 99       	sbic	0x0c, 2	; 12
    25a4:	09 c0       	rjmp	.+18     	; 0x25b8 <__stack+0x20b9>
    25a6:	80 91 7d 01 	lds	r24, 0x017D
    25aa:	83 30       	cpi	r24, 0x03	; 3
    25ac:	29 f4       	brne	.+10     	; 0x25b8 <__stack+0x20b9>
	{
	screenDispNum = 28;
    25ae:	8c e1       	ldi	r24, 0x1C	; 28
    25b0:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    25b4:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    25b8:	1f 99       	sbic	0x03, 7	; 3
    25ba:	0c c0       	rjmp	.+24     	; 0x25d4 <__stack+0x20d5>
    25bc:	80 91 7d 01 	lds	r24, 0x017D
    25c0:	83 30       	cpi	r24, 0x03	; 3
    25c2:	41 f4       	brne	.+16     	; 0x25d4 <__stack+0x20d5>
	{
	screenDispNum = 4;
    25c4:	84 e0       	ldi	r24, 0x04	; 4
    25c6:	80 93 7c 01 	sts	0x017C, r24
	sub_display = 8;
    25ca:	88 e0       	ldi	r24, 0x08	; 8
    25cc:	80 93 7e 01 	sts	0x017E, r24
	button_wait_time = 0;
    25d0:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    25d4:	1e 99       	sbic	0x03, 6	; 3
    25d6:	09 c0       	rjmp	.+18     	; 0x25ea <__stack+0x20eb>
    25d8:	80 91 7d 01 	lds	r24, 0x017D
    25dc:	83 30       	cpi	r24, 0x03	; 3
    25de:	29 f4       	brne	.+10     	; 0x25ea <__stack+0x20eb>
	{
	screenDispNum = 22;
    25e0:	86 e1       	ldi	r24, 0x16	; 22
    25e2:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    25e6:	10 92 7d 01 	sts	0x017D, r1

}



if(screenDispNum == 28)	// submenu DEV 2 C Down
    25ea:	80 91 7c 01 	lds	r24, 0x017C
    25ee:	8c 31       	cpi	r24, 0x1C	; 28
    25f0:	09 f0       	breq	.+2      	; 0x25f4 <__stack+0x20f5>
    25f2:	7c c0       	rjmp	.+248    	; 0x26ec <__stack+0x21ed>
{
	Clear_LCD();
    25f4:	0e 94 68 00 	call	0xd0	; 0xd0 <Clear_LCD>
	Send_Character(1,O);
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	68 e1       	ldi	r22, 0x18	; 24
    25fc:	70 e0       	ldi	r23, 0x00	; 0
    25fe:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(2,F);
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	6f e0       	ldi	r22, 0x0F	; 15
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(3,F);
    260c:	83 e0       	ldi	r24, 0x03	; 3
    260e:	6f e0       	ldi	r22, 0x0F	; 15
    2610:	70 e0       	ldi	r23, 0x00	; 0
    2612:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(5,I);
    2616:	85 e0       	ldi	r24, 0x05	; 5
    2618:	62 e1       	ldi	r22, 0x12	; 18
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>
	Send_Character(6,N);
    2620:	86 e0       	ldi	r24, 0x06	; 6
    2622:	67 e1       	ldi	r22, 0x17	; 23
    2624:	70 e0       	ldi	r23, 0x00	; 0
    2626:	0e 94 89 00 	call	0x112	; 0x112 <Send_Character>

	LCDDR0 |= (1<<6); 		// small digit 2 symbol
    262a:	80 91 ec 00 	lds	r24, 0x00EC
    262e:	80 64       	ori	r24, 0x40	; 64
    2630:	80 93 ec 00 	sts	0x00EC, r24

	if(CENTRE_BUTTON_PRESSED) button_wait_time++;
    2634:	1c 99       	sbic	0x03, 4	; 3
    2636:	05 c0       	rjmp	.+10     	; 0x2642 <__stack+0x2143>
    2638:	80 91 7d 01 	lds	r24, 0x017D
    263c:	8f 5f       	subi	r24, 0xFF	; 255
    263e:	80 93 7d 01 	sts	0x017D, r24
	if(RIGHT_BUTTON_PRESSED) button_wait_time++;
    2642:	63 99       	sbic	0x0c, 3	; 12
    2644:	05 c0       	rjmp	.+10     	; 0x2650 <__stack+0x2151>
    2646:	80 91 7d 01 	lds	r24, 0x017D
    264a:	8f 5f       	subi	r24, 0xFF	; 255
    264c:	80 93 7d 01 	sts	0x017D, r24
	if(LEFT_BUTTON_PRESSED) button_wait_time++;
    2650:	62 99       	sbic	0x0c, 2	; 12
    2652:	05 c0       	rjmp	.+10     	; 0x265e <__stack+0x215f>
    2654:	80 91 7d 01 	lds	r24, 0x017D
    2658:	8f 5f       	subi	r24, 0xFF	; 255
    265a:	80 93 7d 01 	sts	0x017D, r24
	if(DOWN_BUTTON_PRESSED) button_wait_time++;
    265e:	1f 99       	sbic	0x03, 7	; 3
    2660:	05 c0       	rjmp	.+10     	; 0x266c <__stack+0x216d>
    2662:	80 91 7d 01 	lds	r24, 0x017D
    2666:	8f 5f       	subi	r24, 0xFF	; 255
    2668:	80 93 7d 01 	sts	0x017D, r24
	if(UP_BUTTON_PRESSED) button_wait_time++;
    266c:	1e 99       	sbic	0x03, 6	; 3
    266e:	05 c0       	rjmp	.+10     	; 0x267a <__stack+0x217b>
    2670:	80 91 7d 01 	lds	r24, 0x017D
    2674:	8f 5f       	subi	r24, 0xFF	; 255
    2676:	80 93 7d 01 	sts	0x017D, r24

	if(CENTRE_BUTTON_PRESSED && (button_wait_time == 5) )
    267a:	1c 99       	sbic	0x03, 4	; 3
    267c:	08 c0       	rjmp	.+16     	; 0x268e <__stack+0x218f>
    267e:	80 91 7d 01 	lds	r24, 0x017D
    2682:	85 30       	cpi	r24, 0x05	; 5
    2684:	21 f4       	brne	.+8      	; 0x268e <__stack+0x218f>
	{
	screenDispNum = 0;
    2686:	10 92 7c 01 	sts	0x017C, r1
	button_wait_time = 0;
    268a:	10 92 7d 01 	sts	0x017D, r1
	}

	if(RIGHT_BUTTON_PRESSED && (button_wait_time == 3)) 
    268e:	63 99       	sbic	0x0c, 3	; 12
    2690:	09 c0       	rjmp	.+18     	; 0x26a4 <__stack+0x21a5>
    2692:	80 91 7d 01 	lds	r24, 0x017D
    2696:	83 30       	cpi	r24, 0x03	; 3
    2698:	29 f4       	brne	.+10     	; 0x26a4 <__stack+0x21a5>
	{
	screenDispNum = 27;
    269a:	8b e1       	ldi	r24, 0x1B	; 27
    269c:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    26a0:	10 92 7d 01 	sts	0x017D, r1
	}

	if(LEFT_BUTTON_PRESSED && (button_wait_time == 3)) 
    26a4:	62 99       	sbic	0x0c, 2	; 12
    26a6:	09 c0       	rjmp	.+18     	; 0x26ba <__stack+0x21bb>
    26a8:	80 91 7d 01 	lds	r24, 0x017D
    26ac:	83 30       	cpi	r24, 0x03	; 3
    26ae:	29 f4       	brne	.+10     	; 0x26ba <__stack+0x21bb>
	{
	screenDispNum = 27;
    26b0:	8b e1       	ldi	r24, 0x1B	; 27
    26b2:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    26b6:	10 92 7d 01 	sts	0x017D, r1
	}

	if(DOWN_BUTTON_PRESSED && (button_wait_time == 3)) 
    26ba:	1f 99       	sbic	0x03, 7	; 3
    26bc:	0c c0       	rjmp	.+24     	; 0x26d6 <__stack+0x21d7>
    26be:	80 91 7d 01 	lds	r24, 0x017D
    26c2:	83 30       	cpi	r24, 0x03	; 3
    26c4:	41 f4       	brne	.+16     	; 0x26d6 <__stack+0x21d7>
	{
	screenDispNum = 4;
    26c6:	84 e0       	ldi	r24, 0x04	; 4
    26c8:	80 93 7c 01 	sts	0x017C, r24
	sub_display = 9;
    26cc:	89 e0       	ldi	r24, 0x09	; 9
    26ce:	80 93 7e 01 	sts	0x017E, r24
	button_wait_time = 0;
    26d2:	10 92 7d 01 	sts	0x017D, r1
	}

	if(UP_BUTTON_PRESSED && (button_wait_time == 3)) 
    26d6:	1e 99       	sbic	0x03, 6	; 3
    26d8:	09 c0       	rjmp	.+18     	; 0x26ec <__stack+0x21ed>
    26da:	80 91 7d 01 	lds	r24, 0x017D
    26de:	83 30       	cpi	r24, 0x03	; 3
    26e0:	29 f4       	brne	.+10     	; 0x26ec <__stack+0x21ed>
	{
	screenDispNum = 22;
    26e2:	86 e1       	ldi	r24, 0x16	; 22
    26e4:	80 93 7c 01 	sts	0x017C, r24
	button_wait_time = 0;
    26e8:	10 92 7d 01 	sts	0x017D, r1





if(relay_1_state == 1) 
    26ec:	80 91 80 01 	lds	r24, 0x0180
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	11 f4       	brne	.+4      	; 0x26f8 <__stack+0x21f9>
{
RELAY_1_0FF;
    26f4:	28 9a       	sbi	0x05, 0	; 5
    26f6:	08 c0       	rjmp	.+16     	; 0x2708 <__stack+0x2209>
}


if(relay_1_state == 2)
    26f8:	82 30       	cpi	r24, 0x02	; 2
    26fa:	31 f4       	brne	.+12     	; 0x2708 <__stack+0x2209>
	{
	RELAY_1_0N; 
    26fc:	28 98       	cbi	0x05, 0	; 5
	LCDDR0 |= (1<<1); // arrow 1
    26fe:	80 91 ec 00 	lds	r24, 0x00EC
    2702:	82 60       	ori	r24, 0x02	; 2
    2704:	80 93 ec 00 	sts	0x00EC, r24
	}




if(relay_2_state == 1) 
    2708:	80 91 81 01 	lds	r24, 0x0181
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	11 f4       	brne	.+4      	; 0x2714 <__stack+0x2215>
{
RELAY_2_0FF;
    2710:	29 9a       	sbi	0x05, 1	; 5
    2712:	08 c0       	rjmp	.+16     	; 0x2724 <__stack+0x2225>
}


if(relay_2_state == 2)
    2714:	82 30       	cpi	r24, 0x02	; 2
    2716:	31 f4       	brne	.+12     	; 0x2724 <__stack+0x2225>
	{
	RELAY_2_0N; 
    2718:	29 98       	cbi	0x05, 1	; 5
	LCDDR0 |= (1<<5); // arrow 2
    271a:	80 91 ec 00 	lds	r24, 0x00EC
    271e:	80 62       	ori	r24, 0x20	; 32
    2720:	80 93 ec 00 	sts	0x00EC, r24
	}


} // end ISP TIMER 1
    2724:	ff 91       	pop	r31
    2726:	ef 91       	pop	r30
    2728:	bf 91       	pop	r27
    272a:	af 91       	pop	r26
    272c:	9f 91       	pop	r25
    272e:	8f 91       	pop	r24
    2730:	7f 91       	pop	r23
    2732:	6f 91       	pop	r22
    2734:	5f 91       	pop	r21
    2736:	4f 91       	pop	r20
    2738:	3f 91       	pop	r19
    273a:	2f 91       	pop	r18
    273c:	0f 90       	pop	r0
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	0f 90       	pop	r0
    2742:	1f 90       	pop	r1
    2744:	18 95       	reti

00002746 <__vector_5>:




ISR(TIMER2_OVF_vect)
{
    2746:	1f 92       	push	r1
    2748:	0f 92       	push	r0
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	0f 92       	push	r0
    274e:	11 24       	eor	r1, r1
    2750:	2f 93       	push	r18
    2752:	8f 93       	push	r24
    2754:	9f 93       	push	r25

sec_unit++;
    2756:	80 91 56 01 	lds	r24, 0x0156
    275a:	8f 5f       	subi	r24, 0xFF	; 255
    275c:	80 93 56 01 	sts	0x0156, r24

	if(sec_unit == 10)
    2760:	8a 30       	cpi	r24, 0x0A	; 10
    2762:	39 f4       	brne	.+14     	; 0x2772 <__vector_5+0x2c>
	{
		sec_unit = 0;
    2764:	10 92 56 01 	sts	0x0156, r1
		sec_tens++;
    2768:	80 91 57 01 	lds	r24, 0x0157
    276c:	8f 5f       	subi	r24, 0xFF	; 255
    276e:	80 93 57 01 	sts	0x0157, r24
	}

	
	if(sec_unit == 0 && sec_tens == 6)
    2772:	80 91 56 01 	lds	r24, 0x0156
    2776:	88 23       	and	r24, r24
    2778:	69 f4       	brne	.+26     	; 0x2794 <__vector_5+0x4e>
    277a:	80 91 57 01 	lds	r24, 0x0157
    277e:	86 30       	cpi	r24, 0x06	; 6
    2780:	49 f4       	brne	.+18     	; 0x2794 <__vector_5+0x4e>
	{
		min_unit++;
    2782:	80 91 58 01 	lds	r24, 0x0158
    2786:	8f 5f       	subi	r24, 0xFF	; 255
    2788:	80 93 58 01 	sts	0x0158, r24
		sec_unit =0;
    278c:	10 92 56 01 	sts	0x0156, r1
		sec_tens = 0;
    2790:	10 92 57 01 	sts	0x0157, r1
	}

	
	if(min_unit == 10)
    2794:	80 91 58 01 	lds	r24, 0x0158
    2798:	8a 30       	cpi	r24, 0x0A	; 10
    279a:	39 f4       	brne	.+14     	; 0x27aa <__vector_5+0x64>
	{
		min_unit = 0;
    279c:	10 92 58 01 	sts	0x0158, r1
		min_tens++;
    27a0:	80 91 59 01 	lds	r24, 0x0159
    27a4:	8f 5f       	subi	r24, 0xFF	; 255
    27a6:	80 93 59 01 	sts	0x0159, r24
	}

	
	if(min_unit == 0 && min_tens == 6)
    27aa:	80 91 58 01 	lds	r24, 0x0158
    27ae:	88 23       	and	r24, r24
    27b0:	69 f4       	brne	.+26     	; 0x27cc <__vector_5+0x86>
    27b2:	80 91 59 01 	lds	r24, 0x0159
    27b6:	86 30       	cpi	r24, 0x06	; 6
    27b8:	49 f4       	brne	.+18     	; 0x27cc <__vector_5+0x86>
	{
		hr_unit++;
    27ba:	80 91 5a 01 	lds	r24, 0x015A
    27be:	8f 5f       	subi	r24, 0xFF	; 255
    27c0:	80 93 5a 01 	sts	0x015A, r24
		min_unit =0;
    27c4:	10 92 58 01 	sts	0x0158, r1
		min_tens = 0;
    27c8:	10 92 59 01 	sts	0x0159, r1
	}

	if(hr_unit == 10)
    27cc:	80 91 5a 01 	lds	r24, 0x015A
    27d0:	8a 30       	cpi	r24, 0x0A	; 10
    27d2:	39 f4       	brne	.+14     	; 0x27e2 <__vector_5+0x9c>
	{
		hr_unit = 0;
    27d4:	10 92 5a 01 	sts	0x015A, r1
		hr_tens++;
    27d8:	80 91 5b 01 	lds	r24, 0x015B
    27dc:	8f 5f       	subi	r24, 0xFF	; 255
    27de:	80 93 5b 01 	sts	0x015B, r24
	}

	
	if(hr_unit == 4 && hr_tens == 2)
    27e2:	80 91 5a 01 	lds	r24, 0x015A
    27e6:	84 30       	cpi	r24, 0x04	; 4
    27e8:	41 f4       	brne	.+16     	; 0x27fa <__vector_5+0xb4>
    27ea:	80 91 5b 01 	lds	r24, 0x015B
    27ee:	82 30       	cpi	r24, 0x02	; 2
    27f0:	21 f4       	brne	.+8      	; 0x27fa <__vector_5+0xb4>
	{
		hr_unit = 0;
    27f2:	10 92 5a 01 	sts	0x015A, r1
		hr_tens = 0;
    27f6:	10 92 5b 01 	sts	0x015B, r1
	}

// =====================================================

if((relay_1_state > 0) && (lockout1 == 0))
    27fa:	20 91 80 01 	lds	r18, 0x0180
    27fe:	22 23       	and	r18, r18
    2800:	09 f4       	brne	.+2      	; 0x2804 <__vector_5+0xbe>
    2802:	7c c0       	rjmp	.+248    	; 0x28fc <__vector_5+0x1b6>
    2804:	80 91 82 01 	lds	r24, 0x0182
    2808:	88 23       	and	r24, r24
    280a:	09 f0       	breq	.+2      	; 0x280e <__vector_5+0xc8>
    280c:	77 c0       	rjmp	.+238    	; 0x28fc <__vector_5+0x1b6>
	{

		flag1 = 0;
    280e:	10 92 85 01 	sts	0x0185, r1

		if (div1_Cdown_hr_tens > 0 || div1_Cdown_hr_unit > 0 || div1_Cdown_min_tens > 0 || div1_Cdown_min_unit > 0 
    2812:	90 91 69 01 	lds	r25, 0x0169
    2816:	99 23       	and	r25, r25
    2818:	a1 f4       	brne	.+40     	; 0x2842 <__vector_5+0xfc>
    281a:	80 91 68 01 	lds	r24, 0x0168
    281e:	88 23       	and	r24, r24
    2820:	81 f4       	brne	.+32     	; 0x2842 <__vector_5+0xfc>
    2822:	80 91 67 01 	lds	r24, 0x0167
    2826:	88 23       	and	r24, r24
    2828:	61 f4       	brne	.+24     	; 0x2842 <__vector_5+0xfc>
    282a:	80 91 66 01 	lds	r24, 0x0166
    282e:	88 23       	and	r24, r24
    2830:	41 f4       	brne	.+16     	; 0x2842 <__vector_5+0xfc>
    2832:	80 91 65 01 	lds	r24, 0x0165
    2836:	88 23       	and	r24, r24
    2838:	21 f4       	brne	.+8      	; 0x2842 <__vector_5+0xfc>
    283a:	80 91 64 01 	lds	r24, 0x0164
    283e:	88 23       	and	r24, r24
    2840:	41 f0       	breq	.+16     	; 0x2852 <__vector_5+0x10c>
				|| div1_Cdown_sec_tens > 0 || div1_Cdown_sec_unit > 0)
				{
				flag1 = 1;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	80 93 85 01 	sts	0x0185, r24
				div1_Cdown_sec_unit--;
    2848:	80 91 64 01 	lds	r24, 0x0164
    284c:	81 50       	subi	r24, 0x01	; 1
    284e:	80 93 64 01 	sts	0x0164, r24
				}



		if(div1_Cdown_sec_unit == 255)
    2852:	80 91 64 01 	lds	r24, 0x0164
    2856:	8f 3f       	cpi	r24, 0xFF	; 255
    2858:	41 f4       	brne	.+16     	; 0x286a <__vector_5+0x124>
		{
		div1_Cdown_sec_tens--;
    285a:	80 91 65 01 	lds	r24, 0x0165
    285e:	81 50       	subi	r24, 0x01	; 1
    2860:	80 93 65 01 	sts	0x0165, r24
		div1_Cdown_sec_unit = 9;
    2864:	89 e0       	ldi	r24, 0x09	; 9
    2866:	80 93 64 01 	sts	0x0164, r24
		}

		if ( div1_Cdown_sec_tens == 255 )
    286a:	80 91 65 01 	lds	r24, 0x0165
    286e:	8f 3f       	cpi	r24, 0xFF	; 255
    2870:	41 f4       	brne	.+16     	; 0x2882 <__vector_5+0x13c>
		{
		div1_Cdown_sec_tens = 5;
    2872:	85 e0       	ldi	r24, 0x05	; 5
    2874:	80 93 65 01 	sts	0x0165, r24
		div1_Cdown_min_unit--;
    2878:	80 91 66 01 	lds	r24, 0x0166
    287c:	81 50       	subi	r24, 0x01	; 1
    287e:	80 93 66 01 	sts	0x0166, r24
		}


		if(div1_Cdown_min_unit == 255)
    2882:	80 91 66 01 	lds	r24, 0x0166
    2886:	8f 3f       	cpi	r24, 0xFF	; 255
    2888:	41 f4       	brne	.+16     	; 0x289a <__vector_5+0x154>
		{
		div1_Cdown_min_tens --;
    288a:	80 91 67 01 	lds	r24, 0x0167
    288e:	81 50       	subi	r24, 0x01	; 1
    2890:	80 93 67 01 	sts	0x0167, r24
		div1_Cdown_min_unit = 9;
    2894:	89 e0       	ldi	r24, 0x09	; 9
    2896:	80 93 66 01 	sts	0x0166, r24
		}

		if ( div1_Cdown_min_tens == 255 )
    289a:	80 91 67 01 	lds	r24, 0x0167
    289e:	8f 3f       	cpi	r24, 0xFF	; 255
    28a0:	41 f4       	brne	.+16     	; 0x28b2 <__vector_5+0x16c>
		{
		div1_Cdown_min_tens = 5;
    28a2:	85 e0       	ldi	r24, 0x05	; 5
    28a4:	80 93 67 01 	sts	0x0167, r24
		div1_Cdown_hr_unit--;
    28a8:	80 91 68 01 	lds	r24, 0x0168
    28ac:	81 50       	subi	r24, 0x01	; 1
    28ae:	80 93 68 01 	sts	0x0168, r24
		}

		if(div1_Cdown_hr_unit == 255)
    28b2:	80 91 68 01 	lds	r24, 0x0168
    28b6:	8f 3f       	cpi	r24, 0xFF	; 255
    28b8:	31 f4       	brne	.+12     	; 0x28c6 <__vector_5+0x180>
		{
		div1_Cdown_hr_tens --;
    28ba:	91 50       	subi	r25, 0x01	; 1
    28bc:	90 93 69 01 	sts	0x0169, r25
		div1_Cdown_hr_unit = 9;
    28c0:	89 e0       	ldi	r24, 0x09	; 9
    28c2:	80 93 68 01 	sts	0x0168, r24
		}

		if ( div1_Cdown_hr_tens == 255 )
    28c6:	80 91 69 01 	lds	r24, 0x0169
    28ca:	8f 3f       	cpi	r24, 0xFF	; 255
    28cc:	39 f4       	brne	.+14     	; 0x28dc <__vector_5+0x196>
		{
		div1_Cdown_hr_tens = 0;
    28ce:	10 92 69 01 	sts	0x0169, r1
		div1_Cdown_hr_unit--;
    28d2:	80 91 68 01 	lds	r24, 0x0168
    28d6:	81 50       	subi	r24, 0x01	; 1
    28d8:	80 93 68 01 	sts	0x0168, r24
		}

		if ((flag1 == 0) && (relay_1_state == 1)) relay_1_state = 2;
    28dc:	80 91 85 01 	lds	r24, 0x0185
    28e0:	88 23       	and	r24, r24
    28e2:	61 f4       	brne	.+24     	; 0x28fc <__vector_5+0x1b6>
    28e4:	21 30       	cpi	r18, 0x01	; 1
    28e6:	11 f4       	brne	.+4      	; 0x28ec <__vector_5+0x1a6>
    28e8:	82 e0       	ldi	r24, 0x02	; 2
    28ea:	03 c0       	rjmp	.+6      	; 0x28f2 <__vector_5+0x1ac>
		else if ((flag1 == 0) && (relay_1_state == 2)) relay_1_state = 1;
    28ec:	22 30       	cpi	r18, 0x02	; 2
    28ee:	19 f4       	brne	.+6      	; 0x28f6 <__vector_5+0x1b0>
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	80 93 80 01 	sts	0x0180, r24

		if (flag1 == 0) lockout1 = 1 ;								// never get back into this function unless restarted to avoid blinking.
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	80 93 82 01 	sts	0x0182, r24
	}


// =====================================================

if((relay_2_state > 0) && (lockout2 == 0))
    28fc:	20 91 81 01 	lds	r18, 0x0181
    2900:	22 23       	and	r18, r18
    2902:	09 f4       	brne	.+2      	; 0x2906 <__vector_5+0x1c0>
    2904:	7c c0       	rjmp	.+248    	; 0x29fe <__vector_5+0x2b8>
    2906:	80 91 83 01 	lds	r24, 0x0183
    290a:	88 23       	and	r24, r24
    290c:	09 f0       	breq	.+2      	; 0x2910 <__vector_5+0x1ca>
    290e:	77 c0       	rjmp	.+238    	; 0x29fe <__vector_5+0x2b8>
	{

		flag2 = 0;
    2910:	10 92 84 01 	sts	0x0184, r1

		if (div2_Cdown_hr_tens > 0 || div2_Cdown_hr_unit > 0 || div2_Cdown_min_tens > 0 || div2_Cdown_min_unit > 0 
    2914:	90 91 77 01 	lds	r25, 0x0177
    2918:	99 23       	and	r25, r25
    291a:	a1 f4       	brne	.+40     	; 0x2944 <__vector_5+0x1fe>
    291c:	80 91 76 01 	lds	r24, 0x0176
    2920:	88 23       	and	r24, r24
    2922:	81 f4       	brne	.+32     	; 0x2944 <__vector_5+0x1fe>
    2924:	80 91 75 01 	lds	r24, 0x0175
    2928:	88 23       	and	r24, r24
    292a:	61 f4       	brne	.+24     	; 0x2944 <__vector_5+0x1fe>
    292c:	80 91 74 01 	lds	r24, 0x0174
    2930:	88 23       	and	r24, r24
    2932:	41 f4       	brne	.+16     	; 0x2944 <__vector_5+0x1fe>
    2934:	80 91 73 01 	lds	r24, 0x0173
    2938:	88 23       	and	r24, r24
    293a:	21 f4       	brne	.+8      	; 0x2944 <__vector_5+0x1fe>
    293c:	80 91 72 01 	lds	r24, 0x0172
    2940:	88 23       	and	r24, r24
    2942:	41 f0       	breq	.+16     	; 0x2954 <__vector_5+0x20e>
				|| div2_Cdown_sec_tens > 0 || div2_Cdown_sec_unit > 0)
				{
				flag2 = 1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	80 93 84 01 	sts	0x0184, r24
				div2_Cdown_sec_unit--;
    294a:	80 91 72 01 	lds	r24, 0x0172
    294e:	81 50       	subi	r24, 0x01	; 1
    2950:	80 93 72 01 	sts	0x0172, r24
				}



		if(div2_Cdown_sec_unit == 255)
    2954:	80 91 72 01 	lds	r24, 0x0172
    2958:	8f 3f       	cpi	r24, 0xFF	; 255
    295a:	41 f4       	brne	.+16     	; 0x296c <__vector_5+0x226>
		{
		div2_Cdown_sec_tens--;
    295c:	80 91 73 01 	lds	r24, 0x0173
    2960:	81 50       	subi	r24, 0x01	; 1
    2962:	80 93 73 01 	sts	0x0173, r24
		div2_Cdown_sec_unit = 9;
    2966:	89 e0       	ldi	r24, 0x09	; 9
    2968:	80 93 72 01 	sts	0x0172, r24
		}

		if ( div2_Cdown_sec_tens == 255 )
    296c:	80 91 73 01 	lds	r24, 0x0173
    2970:	8f 3f       	cpi	r24, 0xFF	; 255
    2972:	41 f4       	brne	.+16     	; 0x2984 <__vector_5+0x23e>
		{
		div2_Cdown_sec_tens = 5;
    2974:	85 e0       	ldi	r24, 0x05	; 5
    2976:	80 93 73 01 	sts	0x0173, r24
		div2_Cdown_min_unit--;
    297a:	80 91 74 01 	lds	r24, 0x0174
    297e:	81 50       	subi	r24, 0x01	; 1
    2980:	80 93 74 01 	sts	0x0174, r24
		}


		if(div2_Cdown_min_unit == 255)
    2984:	80 91 74 01 	lds	r24, 0x0174
    2988:	8f 3f       	cpi	r24, 0xFF	; 255
    298a:	41 f4       	brne	.+16     	; 0x299c <__vector_5+0x256>
		{
		div2_Cdown_min_tens --;
    298c:	80 91 75 01 	lds	r24, 0x0175
    2990:	81 50       	subi	r24, 0x01	; 1
    2992:	80 93 75 01 	sts	0x0175, r24
		div2_Cdown_min_unit = 9;
    2996:	89 e0       	ldi	r24, 0x09	; 9
    2998:	80 93 74 01 	sts	0x0174, r24
		}

		if ( div2_Cdown_min_tens == 255 )
    299c:	80 91 75 01 	lds	r24, 0x0175
    29a0:	8f 3f       	cpi	r24, 0xFF	; 255
    29a2:	41 f4       	brne	.+16     	; 0x29b4 <__vector_5+0x26e>
		{
		div2_Cdown_min_tens = 5;
    29a4:	85 e0       	ldi	r24, 0x05	; 5
    29a6:	80 93 75 01 	sts	0x0175, r24
		div2_Cdown_hr_unit--;
    29aa:	80 91 76 01 	lds	r24, 0x0176
    29ae:	81 50       	subi	r24, 0x01	; 1
    29b0:	80 93 76 01 	sts	0x0176, r24
		}

		if(div2_Cdown_hr_unit == 255)
    29b4:	80 91 76 01 	lds	r24, 0x0176
    29b8:	8f 3f       	cpi	r24, 0xFF	; 255
    29ba:	31 f4       	brne	.+12     	; 0x29c8 <__vector_5+0x282>
		{
		div2_Cdown_hr_tens --;
    29bc:	91 50       	subi	r25, 0x01	; 1
    29be:	90 93 77 01 	sts	0x0177, r25
		div2_Cdown_hr_unit = 9;
    29c2:	89 e0       	ldi	r24, 0x09	; 9
    29c4:	80 93 76 01 	sts	0x0176, r24
		}

		if ( div2_Cdown_hr_tens == 255 )
    29c8:	80 91 77 01 	lds	r24, 0x0177
    29cc:	8f 3f       	cpi	r24, 0xFF	; 255
    29ce:	39 f4       	brne	.+14     	; 0x29de <__vector_5+0x298>
		{
		div2_Cdown_hr_tens = 0;
    29d0:	10 92 77 01 	sts	0x0177, r1
		div2_Cdown_hr_unit--;
    29d4:	80 91 76 01 	lds	r24, 0x0176
    29d8:	81 50       	subi	r24, 0x01	; 1
    29da:	80 93 76 01 	sts	0x0176, r24
		}

		if ((flag2 == 0) && (relay_2_state == 1)) relay_2_state = 2;
    29de:	80 91 84 01 	lds	r24, 0x0184
    29e2:	88 23       	and	r24, r24
    29e4:	61 f4       	brne	.+24     	; 0x29fe <__vector_5+0x2b8>
    29e6:	21 30       	cpi	r18, 0x01	; 1
    29e8:	11 f4       	brne	.+4      	; 0x29ee <__vector_5+0x2a8>
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	03 c0       	rjmp	.+6      	; 0x29f4 <__vector_5+0x2ae>
		else if ((flag2 == 0) && (relay_2_state == 2)) relay_2_state = 1;
    29ee:	22 30       	cpi	r18, 0x02	; 2
    29f0:	19 f4       	brne	.+6      	; 0x29f8 <__vector_5+0x2b2>
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	80 93 81 01 	sts	0x0181, r24

		if (flag2 == 0) lockout2 = 1 ;								// never get back into this function unless restarted to avoid blinking.
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	80 93 83 01 	sts	0x0183, r24
	}


} // end timer
    29fe:	9f 91       	pop	r25
    2a00:	8f 91       	pop	r24
    2a02:	2f 91       	pop	r18
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	0f 90       	pop	r0
    2a0a:	1f 90       	pop	r1
    2a0c:	18 95       	reti

00002a0e <checkTimedRelayONE>:


void checkTimedRelayONE(uint8_t hr_tens, uint8_t hr_unit, uint8_t min_tens, uint8_t min_unit,
						uint8_t div1_on_hr_tens, uint8_t div1_on_hr_unit, uint8_t div1_on_min_tens, uint8_t div1_on_min_unit, 
						uint8_t div1_off_hr_tens, uint8_t div1_off_hr_unit, uint8_t div1_off_min_tens, uint8_t div1_off_min_unit)
{
    2a0e:	8f 92       	push	r8
    2a10:	af 92       	push	r10
    2a12:	cf 92       	push	r12
    2a14:	ef 92       	push	r14
    2a16:	ff 92       	push	r15
    2a18:	0f 93       	push	r16
    2a1a:	1f 93       	push	r17
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	38 2f       	mov	r19, r24
    2a26:	e6 2f       	mov	r30, r22
    2a28:	14 2f       	mov	r17, r20
    2a2a:	f2 2e       	mov	r15, r18
div_1_off = (60*((10*div1_off_hr_tens) + div1_off_hr_unit)) + ((10*div1_off_min_tens) + div1_off_min_unit);

time_now = (60*((10*hr_tens) + hr_unit)) + ((10*min_tens) + min_unit);


	if(relay_1_state == 0)  // 0 = nothing state, 1 = permanently off, 2 = permanently on
    2a2c:	80 91 80 01 	lds	r24, 0x0180
    2a30:	88 23       	and	r24, r24
    2a32:	09 f0       	breq	.+2      	; 0x2a36 <checkTimedRelayONE+0x28>
    2a34:	69 c0       	rjmp	.+210    	; 0x2b08 <checkTimedRelayONE+0xfa>
uint16_t div_1_on;
uint16_t div_1_off; 
uint16_t time_now;


div_1_on = (60*((10*div1_on_hr_tens) + div1_on_hr_unit)) + ((10*div1_on_min_tens) + div1_on_min_unit);
    2a36:	2a e0       	ldi	r18, 0x0A	; 10
    2a38:	02 9f       	mul	r16, r18
    2a3a:	c0 01       	movw	r24, r0
    2a3c:	11 24       	eor	r1, r1
    2a3e:	8e 0d       	add	r24, r14
    2a40:	91 1d       	adc	r25, r1
    2a42:	6c e3       	ldi	r22, 0x3C	; 60
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	86 9f       	mul	r24, r22
    2a48:	d0 01       	movw	r26, r0
    2a4a:	87 9f       	mul	r24, r23
    2a4c:	b0 0d       	add	r27, r0
    2a4e:	96 9f       	mul	r25, r22
    2a50:	b0 0d       	add	r27, r0
    2a52:	11 24       	eor	r1, r1
    2a54:	c2 9e       	mul	r12, r18
    2a56:	c0 01       	movw	r24, r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	a8 0f       	add	r26, r24
    2a5c:	b9 1f       	adc	r27, r25
    2a5e:	aa 0d       	add	r26, r10
    2a60:	b1 1d       	adc	r27, r1
div_1_off = (60*((10*div1_off_hr_tens) + div1_off_hr_unit)) + ((10*div1_off_min_tens) + div1_off_min_unit);
    2a62:	82 9e       	mul	r8, r18
    2a64:	c0 01       	movw	r24, r0
    2a66:	11 24       	eor	r1, r1
    2a68:	4c 85       	ldd	r20, Y+12	; 0x0c
    2a6a:	84 0f       	add	r24, r20
    2a6c:	91 1d       	adc	r25, r1
    2a6e:	86 9f       	mul	r24, r22
    2a70:	a0 01       	movw	r20, r0
    2a72:	87 9f       	mul	r24, r23
    2a74:	50 0d       	add	r21, r0
    2a76:	96 9f       	mul	r25, r22
    2a78:	50 0d       	add	r21, r0
    2a7a:	11 24       	eor	r1, r1
    2a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7e:	82 9f       	mul	r24, r18
    2a80:	c0 01       	movw	r24, r0
    2a82:	11 24       	eor	r1, r1
    2a84:	48 0f       	add	r20, r24
    2a86:	59 1f       	adc	r21, r25
    2a88:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a8a:	48 0f       	add	r20, r24
    2a8c:	51 1d       	adc	r21, r1

time_now = (60*((10*hr_tens) + hr_unit)) + ((10*min_tens) + min_unit);
    2a8e:	32 9f       	mul	r19, r18
    2a90:	c0 01       	movw	r24, r0
    2a92:	11 24       	eor	r1, r1
    2a94:	8e 0f       	add	r24, r30
    2a96:	91 1d       	adc	r25, r1
    2a98:	86 9f       	mul	r24, r22
    2a9a:	f0 01       	movw	r30, r0
    2a9c:	87 9f       	mul	r24, r23
    2a9e:	f0 0d       	add	r31, r0
    2aa0:	96 9f       	mul	r25, r22
    2aa2:	f0 0d       	add	r31, r0
    2aa4:	11 24       	eor	r1, r1
    2aa6:	12 9f       	mul	r17, r18
    2aa8:	90 01       	movw	r18, r0
    2aaa:	11 24       	eor	r1, r1
    2aac:	e2 0f       	add	r30, r18
    2aae:	f3 1f       	adc	r31, r19
    2ab0:	ef 0d       	add	r30, r15
    2ab2:	f1 1d       	adc	r31, r1


	if(relay_1_state == 0)  // 0 = nothing state, 1 = permanently off, 2 = permanently on
	{
		if(div_1_on < div_1_off)
    2ab4:	a4 17       	cp	r26, r20
    2ab6:	b5 07       	cpc	r27, r21
    2ab8:	70 f4       	brcc	.+28     	; 0x2ad6 <checkTimedRelayONE+0xc8>
		{
			if((time_now >= div_1_on) && (time_now < div_1_off) ) 
    2aba:	ea 17       	cp	r30, r26
    2abc:	fb 07       	cpc	r31, r27
    2abe:	50 f0       	brcs	.+20     	; 0x2ad4 <checkTimedRelayONE+0xc6>
    2ac0:	e4 17       	cp	r30, r20
    2ac2:	f5 07       	cpc	r31, r21
    2ac4:	38 f4       	brcc	.+14     	; 0x2ad4 <checkTimedRelayONE+0xc6>
				{
				RELAY_1_0N; 
    2ac6:	28 98       	cbi	0x05, 0	; 5
				LCDDR0 |= (1<<1); // arrow 1
    2ac8:	80 91 ec 00 	lds	r24, 0x00EC
    2acc:	82 60       	ori	r24, 0x02	; 2
    2ace:	80 93 ec 00 	sts	0x00EC, r24
    2ad2:	01 c0       	rjmp	.+2      	; 0x2ad6 <checkTimedRelayONE+0xc8>
				}
			else RELAY_1_0FF;
    2ad4:	28 9a       	sbi	0x05, 0	; 5
		}


		if(div_1_on > div_1_off)
    2ad6:	4a 17       	cp	r20, r26
    2ad8:	5b 07       	cpc	r21, r27
    2ada:	90 f4       	brcc	.+36     	; 0x2b00 <checkTimedRelayONE+0xf2>
		{
			if(((time_now >= div_1_on) && (time_now < 1440)) ||  (time_now < div_1_off) )
    2adc:	ea 17       	cp	r30, r26
    2ade:	fb 07       	cpc	r31, r27
    2ae0:	20 f0       	brcs	.+8      	; 0x2aea <checkTimedRelayONE+0xdc>
    2ae2:	85 e0       	ldi	r24, 0x05	; 5
    2ae4:	e0 3a       	cpi	r30, 0xA0	; 160
    2ae6:	f8 07       	cpc	r31, r24
    2ae8:	18 f0       	brcs	.+6      	; 0x2af0 <checkTimedRelayONE+0xe2>
    2aea:	e4 17       	cp	r30, r20
    2aec:	f5 07       	cpc	r31, r21
    2aee:	38 f4       	brcc	.+14     	; 0x2afe <checkTimedRelayONE+0xf0>
				{
				RELAY_1_0N; 
    2af0:	28 98       	cbi	0x05, 0	; 5
				LCDDR0 |= (1<<1); // arrow 1
    2af2:	80 91 ec 00 	lds	r24, 0x00EC
    2af6:	82 60       	ori	r24, 0x02	; 2
    2af8:	80 93 ec 00 	sts	0x00EC, r24
    2afc:	01 c0       	rjmp	.+2      	; 0x2b00 <checkTimedRelayONE+0xf2>
				}
			else RELAY_1_0FF;
    2afe:	28 9a       	sbi	0x05, 0	; 5
		}


		if(div_1_on == div_1_off) RELAY_1_0FF;
    2b00:	a4 17       	cp	r26, r20
    2b02:	b5 07       	cpc	r27, r21
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <checkTimedRelayONE+0xfa>
    2b06:	28 9a       	sbi	0x05, 0	; 5
	

	}

}
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	1f 91       	pop	r17
    2b0e:	0f 91       	pop	r16
    2b10:	ff 90       	pop	r15
    2b12:	ef 90       	pop	r14
    2b14:	cf 90       	pop	r12
    2b16:	af 90       	pop	r10
    2b18:	8f 90       	pop	r8
    2b1a:	08 95       	ret

00002b1c <checkTimedRelayTWO>:


void checkTimedRelayTWO(uint8_t hr_tens, uint8_t hr_unit, uint8_t min_tens, uint8_t min_unit,
						uint8_t div2_on_hr_tens, uint8_t div2_on_hr_unit, uint8_t div2_on_min_tens, uint8_t div2_on_min_unit, 
						uint8_t div2_off_hr_tens, uint8_t div2_off_hr_unit, uint8_t div2_off_min_tens, uint8_t div2_off_min_unit)
{
    2b1c:	8f 92       	push	r8
    2b1e:	af 92       	push	r10
    2b20:	cf 92       	push	r12
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	38 2f       	mov	r19, r24
    2b34:	e6 2f       	mov	r30, r22
    2b36:	14 2f       	mov	r17, r20
    2b38:	f2 2e       	mov	r15, r18
div_2_off = (60*((10*div2_off_hr_tens) + div2_off_hr_unit)) + ((10*div2_off_min_tens) + div2_off_min_unit);

time_now = (60*((10*hr_tens) + hr_unit)) + ((10*min_tens) + min_unit);


	if(relay_2_state == 0)  // 0 = nothing state, 1 = permanently off, 2 = permanently on
    2b3a:	80 91 81 01 	lds	r24, 0x0181
    2b3e:	88 23       	and	r24, r24
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <checkTimedRelayTWO+0x28>
    2b42:	69 c0       	rjmp	.+210    	; 0x2c16 <checkTimedRelayTWO+0xfa>
uint16_t div_2_on;
uint16_t div_2_off; 
uint16_t time_now;


div_2_on = (60*((10*div2_on_hr_tens) + div2_on_hr_unit)) + ((10*div2_on_min_tens) + div2_on_min_unit);
    2b44:	2a e0       	ldi	r18, 0x0A	; 10
    2b46:	02 9f       	mul	r16, r18
    2b48:	c0 01       	movw	r24, r0
    2b4a:	11 24       	eor	r1, r1
    2b4c:	8e 0d       	add	r24, r14
    2b4e:	91 1d       	adc	r25, r1
    2b50:	6c e3       	ldi	r22, 0x3C	; 60
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	86 9f       	mul	r24, r22
    2b56:	d0 01       	movw	r26, r0
    2b58:	87 9f       	mul	r24, r23
    2b5a:	b0 0d       	add	r27, r0
    2b5c:	96 9f       	mul	r25, r22
    2b5e:	b0 0d       	add	r27, r0
    2b60:	11 24       	eor	r1, r1
    2b62:	c2 9e       	mul	r12, r18
    2b64:	c0 01       	movw	r24, r0
    2b66:	11 24       	eor	r1, r1
    2b68:	a8 0f       	add	r26, r24
    2b6a:	b9 1f       	adc	r27, r25
    2b6c:	aa 0d       	add	r26, r10
    2b6e:	b1 1d       	adc	r27, r1
div_2_off = (60*((10*div2_off_hr_tens) + div2_off_hr_unit)) + ((10*div2_off_min_tens) + div2_off_min_unit);
    2b70:	82 9e       	mul	r8, r18
    2b72:	c0 01       	movw	r24, r0
    2b74:	11 24       	eor	r1, r1
    2b76:	4c 85       	ldd	r20, Y+12	; 0x0c
    2b78:	84 0f       	add	r24, r20
    2b7a:	91 1d       	adc	r25, r1
    2b7c:	86 9f       	mul	r24, r22
    2b7e:	a0 01       	movw	r20, r0
    2b80:	87 9f       	mul	r24, r23
    2b82:	50 0d       	add	r21, r0
    2b84:	96 9f       	mul	r25, r22
    2b86:	50 0d       	add	r21, r0
    2b88:	11 24       	eor	r1, r1
    2b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8c:	82 9f       	mul	r24, r18
    2b8e:	c0 01       	movw	r24, r0
    2b90:	11 24       	eor	r1, r1
    2b92:	48 0f       	add	r20, r24
    2b94:	59 1f       	adc	r21, r25
    2b96:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b98:	48 0f       	add	r20, r24
    2b9a:	51 1d       	adc	r21, r1

time_now = (60*((10*hr_tens) + hr_unit)) + ((10*min_tens) + min_unit);
    2b9c:	32 9f       	mul	r19, r18
    2b9e:	c0 01       	movw	r24, r0
    2ba0:	11 24       	eor	r1, r1
    2ba2:	8e 0f       	add	r24, r30
    2ba4:	91 1d       	adc	r25, r1
    2ba6:	86 9f       	mul	r24, r22
    2ba8:	f0 01       	movw	r30, r0
    2baa:	87 9f       	mul	r24, r23
    2bac:	f0 0d       	add	r31, r0
    2bae:	96 9f       	mul	r25, r22
    2bb0:	f0 0d       	add	r31, r0
    2bb2:	11 24       	eor	r1, r1
    2bb4:	12 9f       	mul	r17, r18
    2bb6:	90 01       	movw	r18, r0
    2bb8:	11 24       	eor	r1, r1
    2bba:	e2 0f       	add	r30, r18
    2bbc:	f3 1f       	adc	r31, r19
    2bbe:	ef 0d       	add	r30, r15
    2bc0:	f1 1d       	adc	r31, r1


	if(relay_2_state == 0)  // 0 = nothing state, 1 = permanently off, 2 = permanently on
	{
		if(div_2_on < div_2_off)
    2bc2:	a4 17       	cp	r26, r20
    2bc4:	b5 07       	cpc	r27, r21
    2bc6:	70 f4       	brcc	.+28     	; 0x2be4 <checkTimedRelayTWO+0xc8>
		{
			if((time_now >= div_2_on) && (time_now < div_2_off) ) 
    2bc8:	ea 17       	cp	r30, r26
    2bca:	fb 07       	cpc	r31, r27
    2bcc:	50 f0       	brcs	.+20     	; 0x2be2 <checkTimedRelayTWO+0xc6>
    2bce:	e4 17       	cp	r30, r20
    2bd0:	f5 07       	cpc	r31, r21
    2bd2:	38 f4       	brcc	.+14     	; 0x2be2 <checkTimedRelayTWO+0xc6>
				{
				RELAY_2_0N; 
    2bd4:	29 98       	cbi	0x05, 1	; 5
				LCDDR0 |= (1<<5); // arrow 2
    2bd6:	80 91 ec 00 	lds	r24, 0x00EC
    2bda:	80 62       	ori	r24, 0x20	; 32
    2bdc:	80 93 ec 00 	sts	0x00EC, r24
    2be0:	01 c0       	rjmp	.+2      	; 0x2be4 <checkTimedRelayTWO+0xc8>
				}
			else RELAY_2_0FF;
    2be2:	29 9a       	sbi	0x05, 1	; 5
		}


		if(div_2_on > div_2_off)
    2be4:	4a 17       	cp	r20, r26
    2be6:	5b 07       	cpc	r21, r27
    2be8:	90 f4       	brcc	.+36     	; 0x2c0e <checkTimedRelayTWO+0xf2>
		{
			if(((time_now >= div_2_on) && (time_now < 1440)) ||  (time_now < div_2_off) )
    2bea:	ea 17       	cp	r30, r26
    2bec:	fb 07       	cpc	r31, r27
    2bee:	20 f0       	brcs	.+8      	; 0x2bf8 <checkTimedRelayTWO+0xdc>
    2bf0:	85 e0       	ldi	r24, 0x05	; 5
    2bf2:	e0 3a       	cpi	r30, 0xA0	; 160
    2bf4:	f8 07       	cpc	r31, r24
    2bf6:	18 f0       	brcs	.+6      	; 0x2bfe <checkTimedRelayTWO+0xe2>
    2bf8:	e4 17       	cp	r30, r20
    2bfa:	f5 07       	cpc	r31, r21
    2bfc:	38 f4       	brcc	.+14     	; 0x2c0c <checkTimedRelayTWO+0xf0>
				{
				RELAY_2_0N; 
    2bfe:	29 98       	cbi	0x05, 1	; 5
				LCDDR0 |= (1<<5); // arrow 2
    2c00:	80 91 ec 00 	lds	r24, 0x00EC
    2c04:	80 62       	ori	r24, 0x20	; 32
    2c06:	80 93 ec 00 	sts	0x00EC, r24
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <checkTimedRelayTWO+0xf2>
				}
			else RELAY_2_0FF;
    2c0c:	29 9a       	sbi	0x05, 1	; 5
		}


		if(div_2_on == div_2_off) RELAY_2_0FF;
    2c0e:	a4 17       	cp	r26, r20
    2c10:	b5 07       	cpc	r27, r21
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <checkTimedRelayTWO+0xfa>
    2c14:	29 9a       	sbi	0x05, 1	; 5
	

	}

}
    2c16:	cf 91       	pop	r28
    2c18:	df 91       	pop	r29
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	ff 90       	pop	r15
    2c20:	ef 90       	pop	r14
    2c22:	cf 90       	pop	r12
    2c24:	af 90       	pop	r10
    2c26:	8f 90       	pop	r8
    2c28:	08 95       	ret

00002c2a <__vector_11>:




ISR(TIMER0_OVF_vect)
{
    2c2a:	1f 92       	push	r1
    2c2c:	0f 92       	push	r0
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	0f 92       	push	r0
    2c32:	11 24       	eor	r1, r1
    2c34:	8f 92       	push	r8
    2c36:	af 92       	push	r10
    2c38:	cf 92       	push	r12
    2c3a:	ef 92       	push	r14
    2c3c:	0f 93       	push	r16
    2c3e:	2f 93       	push	r18
    2c40:	3f 93       	push	r19
    2c42:	4f 93       	push	r20
    2c44:	5f 93       	push	r21
    2c46:	6f 93       	push	r22
    2c48:	7f 93       	push	r23
    2c4a:	8f 93       	push	r24
    2c4c:	9f 93       	push	r25
    2c4e:	af 93       	push	r26
    2c50:	bf 93       	push	r27
    2c52:	ef 93       	push	r30
    2c54:	ff 93       	push	r31

button_pressed = 12;		// 12 is nothing ie no button pressed
    2c56:	8c e0       	ldi	r24, 0x0C	; 12
    2c58:	80 93 54 01 	sts	0x0154, r24
keypad_Get_Pressed();
    2c5c:	0e 94 92 01 	call	0x324	; 0x324 <keypad_Get_Pressed>

checkTimedRelayONE(hr_tens, hr_unit, min_tens, min_unit,
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <__vector_11+0x38>
    2c62:	0f 92       	push	r0
    2c64:	ed b7       	in	r30, 0x3d	; 61
    2c66:	fe b7       	in	r31, 0x3e	; 62
    2c68:	31 96       	adiw	r30, 0x01	; 1
    2c6a:	80 91 62 01 	lds	r24, 0x0162
    2c6e:	ad b7       	in	r26, 0x3d	; 61
    2c70:	be b7       	in	r27, 0x3e	; 62
    2c72:	11 96       	adiw	r26, 0x01	; 1
    2c74:	8c 93       	st	X, r24
    2c76:	80 91 61 01 	lds	r24, 0x0161
    2c7a:	81 83       	std	Z+1, r24	; 0x01
    2c7c:	80 91 60 01 	lds	r24, 0x0160
    2c80:	82 83       	std	Z+2, r24	; 0x02
    2c82:	80 91 5b 01 	lds	r24, 0x015B
    2c86:	60 91 5a 01 	lds	r22, 0x015A
    2c8a:	40 91 59 01 	lds	r20, 0x0159
    2c8e:	20 91 58 01 	lds	r18, 0x0158
    2c92:	00 91 5f 01 	lds	r16, 0x015F
    2c96:	e0 90 5e 01 	lds	r14, 0x015E
    2c9a:	c0 90 5d 01 	lds	r12, 0x015D
    2c9e:	a0 90 5c 01 	lds	r10, 0x015C
    2ca2:	80 90 63 01 	lds	r8, 0x0163
    2ca6:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <checkTimedRelayONE>
					div1_on_hr_tens, div1_on_hr_unit, div1_on_min_tens, div1_on_min_unit, 
					div1_off_hr_tens, div1_off_hr_unit, div1_off_min_tens, div1_off_min_unit);

checkTimedRelayTWO(hr_tens, hr_unit, min_tens, min_unit,
    2caa:	ed b7       	in	r30, 0x3d	; 61
    2cac:	fe b7       	in	r31, 0x3e	; 62
    2cae:	31 96       	adiw	r30, 0x01	; 1
    2cb0:	80 91 70 01 	lds	r24, 0x0170
    2cb4:	ad b7       	in	r26, 0x3d	; 61
    2cb6:	be b7       	in	r27, 0x3e	; 62
    2cb8:	11 96       	adiw	r26, 0x01	; 1
    2cba:	8c 93       	st	X, r24
    2cbc:	80 91 6f 01 	lds	r24, 0x016F
    2cc0:	81 83       	std	Z+1, r24	; 0x01
    2cc2:	80 91 6e 01 	lds	r24, 0x016E
    2cc6:	82 83       	std	Z+2, r24	; 0x02
    2cc8:	80 91 5b 01 	lds	r24, 0x015B
    2ccc:	60 91 5a 01 	lds	r22, 0x015A
    2cd0:	40 91 59 01 	lds	r20, 0x0159
    2cd4:	20 91 58 01 	lds	r18, 0x0158
    2cd8:	00 91 6d 01 	lds	r16, 0x016D
    2cdc:	e0 90 6c 01 	lds	r14, 0x016C
    2ce0:	c0 90 6b 01 	lds	r12, 0x016B
    2ce4:	a0 90 6a 01 	lds	r10, 0x016A
    2ce8:	80 90 71 01 	lds	r8, 0x0171
    2cec:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <checkTimedRelayTWO>
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
					div2_on_hr_tens, div2_on_hr_unit, div2_on_min_tens, div2_on_min_unit, 
					div2_off_hr_tens, div2_off_hr_unit, div2_off_min_tens, div2_off_min_unit);

}
    2cf6:	ff 91       	pop	r31
    2cf8:	ef 91       	pop	r30
    2cfa:	bf 91       	pop	r27
    2cfc:	af 91       	pop	r26
    2cfe:	9f 91       	pop	r25
    2d00:	8f 91       	pop	r24
    2d02:	7f 91       	pop	r23
    2d04:	6f 91       	pop	r22
    2d06:	5f 91       	pop	r21
    2d08:	4f 91       	pop	r20
    2d0a:	3f 91       	pop	r19
    2d0c:	2f 91       	pop	r18
    2d0e:	0f 91       	pop	r16
    2d10:	ef 90       	pop	r14
    2d12:	cf 90       	pop	r12
    2d14:	af 90       	pop	r10
    2d16:	8f 90       	pop	r8
    2d18:	0f 90       	pop	r0
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	0f 90       	pop	r0
    2d1e:	1f 90       	pop	r1
    2d20:	18 95       	reti

00002d22 <_exit>:
    2d22:	f8 94       	cli

00002d24 <__stop_program>:
    2d24:	ff cf       	rjmp	.-2      	; 0x2d24 <__stop_program>
