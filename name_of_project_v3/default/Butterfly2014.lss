
Butterfly2014.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018a  00800100  00003a42  00003ad6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011f  0080028a  0080028a  00003c60  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00003c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000050b  00000000  00000000  00003d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000141e  00000000  00000000  0000424b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c4  00000000  00000000  00005669  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ab3  00000000  00000000  00005d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  000077e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a20  00000000  00000000  00007b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__ctors_end>
       4:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
       8:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
       c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      10:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      14:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__vector_5>
      18:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      1c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      20:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      24:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      28:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      2c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      30:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      34:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__vector_13>
      38:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__vector_14>
      3c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      40:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      44:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      48:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      4c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      50:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      54:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      58:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__vector_22>

0000005c <LCD_character_table>:
      5c:	51 0a 80 2a 00 00 00 0a 00 40 00 00 59 55 18 01     Q..*.....@..YU..
      6c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
	...
      88:	00 00 51 0f 91 39 41 14 91 31 41 1e 41 0e 41 1d     ..Q..9A..1A.A.A.
      98:	50 0f 80 20 10 15 48 86 40 14 78 05 70 85 51 15     P.. ..H.@.x.p.Q.
      a8:	51 0e 51 95 51 8e 21 90 81 20 50 15 48 44 50 c5     Q.Q.Q.!.. P.HDP.
      b8:	28 c0 28 20 09 50 00 00 00 00 00 00 00 00 00 00     (.( .P..........

000000c8 <__c.1382>:
	...

000000c9 <__c.1410>:
      c9:	00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5     ..@z..Z..rN.....
      d9:	d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00     .....vH.....T...
      e9:	ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00     ..;.............
      f9:	00 40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00     .@B...........'.
     109:	00 00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a     .........d......
     119:	00 00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc     ...........,v...
     129:	67 4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4     gO.#....Y.......
     139:	53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c     S.:.Q.v.....&...
     149:	9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f     .b.@|o.....@...o
     159:	a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b     ....Z*.\.kl.gm..
     169:	fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03     ....G.. ........
     179:	00 94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00     ..5w........ N..
     189:	00 00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef     ....3333..n...A.
     199:	8d 21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b     .!..;.U........K
     1a9:	38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e     8..|......$ 2.r^
     1b9:	22 81 00 c9 f1 24 ec a1 e5 3d 27                    "....$...='

000001c4 <__ctors_end>:
     1c4:	11 24       	eor	r1, r1
     1c6:	1f be       	out	0x3f, r1	; 63
     1c8:	cf ef       	ldi	r28, 0xFF	; 255
     1ca:	d4 e0       	ldi	r29, 0x04	; 4
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	cd bf       	out	0x3d, r28	; 61

000001d0 <__do_copy_data>:
     1d0:	12 e0       	ldi	r17, 0x02	; 2
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b1 e0       	ldi	r27, 0x01	; 1
     1d6:	e2 e4       	ldi	r30, 0x42	; 66
     1d8:	fa e3       	ldi	r31, 0x3A	; 58
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <.do_copy_data_start>

000001dc <.do_copy_data_loop>:
     1dc:	05 90       	lpm	r0, Z+
     1de:	0d 92       	st	X+, r0

000001e0 <.do_copy_data_start>:
     1e0:	aa 38       	cpi	r26, 0x8A	; 138
     1e2:	b1 07       	cpc	r27, r17
     1e4:	d9 f7       	brne	.-10     	; 0x1dc <.do_copy_data_loop>

000001e6 <__do_clear_bss>:
     1e6:	13 e0       	ldi	r17, 0x03	; 3
     1e8:	aa e8       	ldi	r26, 0x8A	; 138
     1ea:	b2 e0       	ldi	r27, 0x02	; 2
     1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <.do_clear_bss_start>

000001ee <.do_clear_bss_loop>:
     1ee:	1d 92       	st	X+, r1

000001f0 <.do_clear_bss_start>:
     1f0:	a9 3a       	cpi	r26, 0xA9	; 169
     1f2:	b1 07       	cpc	r27, r17
     1f4:	e1 f7       	brne	.-8      	; 0x1ee <.do_clear_bss_loop>
     1f6:	0e 94 38 0b 	call	0x1670	; 0x1670 <main>
     1fa:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <_exit>

000001fe <__bad_interrupt>:
     1fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000202 <set_seed>:
#include "AVRBFLY.h"

/// Set seed for random number generation
/// source: http://www.roboternetz.de/wissen/index.php/Zufallszahlen_mit_avr-gcc
void set_seed(void)
{
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	00 d0       	rcall	.+0      	; 0x208 <set_seed+0x6>
     208:	00 d0       	rcall	.+0      	; 0x20a <set_seed+0x8>
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
#ifndef SIMULATION
	unsigned short seed = 0, *p = (unsigned short*) (RAMEND+1);
     20e:	1c 82       	std	Y+4, r1	; 0x04
     210:	1b 82       	std	Y+3, r1	; 0x03
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	95 e0       	ldi	r25, 0x05	; 5
     216:	9a 83       	std	Y+2, r25	; 0x02
     218:	89 83       	std	Y+1, r24	; 0x01
     21a:	0f c0       	rjmp	.+30     	; 0x23a <set_seed+0x38>
	extern unsigned short __heap_start;
	while (p >= &__heap_start + 1)
		seed ^= * (--p);
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	9a 81       	ldd	r25, Y+2	; 0x02
     220:	02 97       	sbiw	r24, 0x02	; 2
     222:	9a 83       	std	Y+2, r25	; 0x02
     224:	89 83       	std	Y+1, r24	; 0x01
     226:	e9 81       	ldd	r30, Y+1	; 0x01
     228:	fa 81       	ldd	r31, Y+2	; 0x02
     22a:	20 81       	ld	r18, Z
     22c:	31 81       	ldd	r19, Z+1	; 0x01
     22e:	8b 81       	ldd	r24, Y+3	; 0x03
     230:	9c 81       	ldd	r25, Y+4	; 0x04
     232:	82 27       	eor	r24, r18
     234:	93 27       	eor	r25, r19
     236:	9c 83       	std	Y+4, r25	; 0x04
     238:	8b 83       	std	Y+3, r24	; 0x03
void set_seed(void)
{
#ifndef SIMULATION
	unsigned short seed = 0, *p = (unsigned short*) (RAMEND+1);
	extern unsigned short __heap_start;
	while (p >= &__heap_start + 1)
     23a:	2b ea       	ldi	r18, 0xAB	; 171
     23c:	33 e0       	ldi	r19, 0x03	; 3
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	82 17       	cp	r24, r18
     244:	93 07       	cpc	r25, r19
     246:	50 f7       	brcc	.-44     	; 0x21c <set_seed+0x1a>
		seed ^= * (--p);
	srandom((unsigned long) seed);
     248:	8b 81       	ldd	r24, Y+3	; 0x03
     24a:	9c 81       	ldd	r25, Y+4	; 0x04
     24c:	cc 01       	movw	r24, r24
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	bc 01       	movw	r22, r24
     254:	cd 01       	movw	r24, r26
     256:	0e 94 49 1a 	call	0x3492	; 0x3492 <srandom>
#else
	srandom((unsigned long) 1);
#endif
}
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	cf 91       	pop	r28
     264:	df 91       	pop	r29
     266:	08 95       	ret

00000268 <InitBoard>:


/// Initialize the ports of the controller
void InitBoard(void)
{
     268:	df 93       	push	r29
     26a:	cf 93       	push	r28
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62

/// Inputs: PB4(center), PB6(up), PB7(down), PE2(left) and PE3(right)
	DDRB	= DDRB	& 0b00101111;
     270:	a4 e2       	ldi	r26, 0x24	; 36
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	e4 e2       	ldi	r30, 0x24	; 36
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	8f 72       	andi	r24, 0x2F	; 47
     27c:	8c 93       	st	X, r24
	DDRE	= DDRE	& 0b11110011;
     27e:	ad e2       	ldi	r26, 0x2D	; 45
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	ed e2       	ldi	r30, 0x2D	; 45
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	83 7f       	andi	r24, 0xF3	; 243
     28a:	8c 93       	st	X, r24
/// switch on pull up resistors
	PORTB	= PORTB	| 0b11010000;
     28c:	a5 e2       	ldi	r26, 0x25	; 37
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	e5 e2       	ldi	r30, 0x25	; 37
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	80 6d       	ori	r24, 0xD0	; 208
     298:	8c 93       	st	X, r24
	PORTE	= PORTE	| 0b00001100;
     29a:	ae e2       	ldi	r26, 0x2E	; 46
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	ee e2       	ldi	r30, 0x2E	; 46
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	8c 60       	ori	r24, 0x0C	; 12
     2a6:	8c 93       	st	X, r24
/// no button pressed
	PINB	= PINB	| 0b11010000;
     2a8:	a3 e2       	ldi	r26, 0x23	; 35
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	e3 e2       	ldi	r30, 0x23	; 35
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	80 6d       	ori	r24, 0xD0	; 208
     2b4:	8c 93       	st	X, r24
	PINE	= PINE	| 0b00001100;
     2b6:	ac e2       	ldi	r26, 0x2C	; 44
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	ec e2       	ldi	r30, 0x2C	; 44
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	8c 60       	ori	r24, 0x0C	; 12
     2c2:	8c 93       	st	X, r24
/// Output: LEDs at port C
	DDRC  = 0b11111111;
     2c4:	e7 e2       	ldi	r30, 0x27	; 39
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	80 83       	st	Z, r24
/// switch off all LEDs
	PORTC = 0b11111111;
     2cc:	e8 e2       	ldi	r30, 0x28	; 40
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	80 83       	st	Z, r24
/// initialize the random number generator
    set_seed();
     2d4:	0e 94 01 01 	call	0x202	; 0x202 <set_seed>
/// Output for buzzer on PORT B
	DDRB	= DDRB	| 0b00100000;
     2d8:	a4 e2       	ldi	r26, 0x24	; 36
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	e4 e2       	ldi	r30, 0x24	; 36
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	80 81       	ld	r24, Z
     2e2:	80 62       	ori	r24, 0x20	; 32
     2e4:	8c 93       	st	X, r24
//	PORTB	= PORTB	| 0b00100000;
}
     2e6:	cf 91       	pop	r28
     2e8:	df 91       	pop	r29
     2ea:	08 95       	ret

000002ec <delay_ds>:

/// Wait ds tenths of a second
void delay_ds(unsigned char ds)
{
     2ec:	df 93       	push	r29
     2ee:	cf 93       	push	r28
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	27 97       	sbiw	r28, 0x07	; 7
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	8f 83       	std	Y+7, r24	; 0x07
#ifndef SIMULATION
	uint16_t i, lim= 10*ds;
     302:	8f 81       	ldd	r24, Y+7	; 0x07
     304:	88 2f       	mov	r24, r24
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	9c 01       	movw	r18, r24
     30a:	22 0f       	add	r18, r18
     30c:	33 1f       	adc	r19, r19
     30e:	c9 01       	movw	r24, r18
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	82 0f       	add	r24, r18
     31a:	93 1f       	adc	r25, r19
     31c:	9c 83       	std	Y+4, r25	; 0x04
     31e:	8b 83       	std	Y+3, r24	; 0x03
	for(i=0; i<lim; i++)
     320:	1e 82       	std	Y+6, r1	; 0x06
     322:	1d 82       	std	Y+5, r1	; 0x05
     324:	0f c0       	rjmp	.+30     	; 0x344 <delay_ds+0x58>
	{
		uint16_t __ticks = F_CPU / 400;
     326:	88 e8       	ldi	r24, 0x88	; 136
     328:	93 e1       	ldi	r25, 0x13	; 19
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	89 83       	std	Y+1, r24	; 0x01
		__asm__ volatile (
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	f1 f7       	brne	.-4      	; 0x332 <delay_ds+0x46>
     336:	9a 83       	std	Y+2, r25	; 0x02
     338:	89 83       	std	Y+1, r24	; 0x01
/// Wait ds tenths of a second
void delay_ds(unsigned char ds)
{
#ifndef SIMULATION
	uint16_t i, lim= 10*ds;
	for(i=0; i<lim; i++)
     33a:	8d 81       	ldd	r24, Y+5	; 0x05
     33c:	9e 81       	ldd	r25, Y+6	; 0x06
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	9e 83       	std	Y+6, r25	; 0x06
     342:	8d 83       	std	Y+5, r24	; 0x05
     344:	2d 81       	ldd	r18, Y+5	; 0x05
     346:	3e 81       	ldd	r19, Y+6	; 0x06
     348:	8b 81       	ldd	r24, Y+3	; 0x03
     34a:	9c 81       	ldd	r25, Y+4	; 0x04
     34c:	28 17       	cp	r18, r24
     34e:	39 07       	cpc	r19, r25
     350:	50 f3       	brcs	.-44     	; 0x326 <delay_ds+0x3a>
			: "=w" (__ticks)
			: "0" (__ticks)
		);
	}
#endif
}
     352:	27 96       	adiw	r28, 0x07	; 7
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	de bf       	out	0x3e, r29	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	cd bf       	out	0x3d, r28	; 61
     35e:	cf 91       	pop	r28
     360:	df 91       	pop	r29
     362:	08 95       	ret

00000364 <autoADCps>:

void autoADCps(void)
{
     364:	df 93       	push	r29
     366:	cf 93       	push	r28
     368:	0f 92       	push	r0
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
  uint8_t ps012;
  /// Assures the ADC clock to be between 100 and 200 kHz
    if      (F_CPU <=   400000UL) ps012 = 0b00000001; //001 = PS   2
    else if (F_CPU <=   800000UL) ps012 = 0b00000010; //010 = PS   4
    else if (F_CPU <=  1600000UL) ps012 = 0b00000011; //011 = PS   8
    else if (F_CPU <=  3200000UL) ps012 = 0b00000100; //100 = PS  16
     36e:	84 e0       	ldi	r24, 0x04	; 4
     370:	89 83       	std	Y+1, r24	; 0x01
    else if (F_CPU <=  6400000UL) ps012 = 0b00000101; //101 = PS  32
    else if (F_CPU <= 12800000UL) ps012 = 0b00000110; //110 = PS  64
    else if (F_CPU >  12800000UL) ps012 = 0b00000111; //111 = PS 128

  	ADCSRA = ADCSRA & 0b11111000; // set bits PS0, PS1, PS2 to 0
     372:	aa e7       	ldi	r26, 0x7A	; 122
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ea e7       	ldi	r30, 0x7A	; 122
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	80 81       	ld	r24, Z
     37c:	88 7f       	andi	r24, 0xF8	; 248
     37e:	8c 93       	st	X, r24
    ADCSRA = ADCSRA | ps012;      // set prescaler bits
     380:	aa e7       	ldi	r26, 0x7A	; 122
     382:	b0 e0       	ldi	r27, 0x00	; 0
     384:	ea e7       	ldi	r30, 0x7A	; 122
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	90 81       	ld	r25, Z
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	89 2b       	or	r24, r25
     38e:	8c 93       	st	X, r24
}
     390:	0f 90       	pop	r0
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <InitBuzzer>:

void InitBuzzer(int f, int d)
{
     398:	df 93       	push	r29
     39a:	cf 93       	push	r28
     39c:	00 d0       	rcall	.+0      	; 0x39e <InitBuzzer+0x6>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <InitBuzzer+0x8>
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <InitBuzzer+0xa>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	9c 83       	std	Y+4, r25	; 0x04
     3a8:	8b 83       	std	Y+3, r24	; 0x03
     3aa:	7e 83       	std	Y+6, r23	; 0x06
     3ac:	6d 83       	std	Y+5, r22	; 0x05
//	char Volume=50;
	int icr1;
	icr1 = 1000000/(2*f);
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	9c 01       	movw	r18, r24
     3b8:	44 27       	eor	r20, r20
     3ba:	37 fd       	sbrc	r19, 7
     3bc:	40 95       	com	r20
     3be:	54 2f       	mov	r21, r20
     3c0:	80 e4       	ldi	r24, 0x40	; 64
     3c2:	92 e4       	ldi	r25, 0x42	; 66
     3c4:	af e0       	ldi	r26, 0x0F	; 15
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	bc 01       	movw	r22, r24
     3ca:	cd 01       	movw	r24, r26
     3cc:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__divmodsi4>
     3d0:	da 01       	movw	r26, r20
     3d2:	c9 01       	movw	r24, r18
     3d4:	9a 83       	std	Y+2, r25	; 0x02
     3d6:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = icr1;				// Top value of the Timer 1
     3d8:	e6 e8       	ldi	r30, 0x86	; 134
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	91 83       	std	Z+1, r25	; 0x01
     3e2:	80 83       	st	Z, r24
	TCCR1A = (1<<COM1A1);		// Set OC1A when upcounting, clear when downcounting
     3e4:	e0 e8       	ldi	r30, 0x80	; 128
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 e8       	ldi	r24, 0x80	; 128
     3ea:	80 83       	st	Z, r24
    TCCR1B = (1<<WGM13);        // Phase/Freq-correct PWM, top value = ICR1
     3ec:	e1 e8       	ldi	r30, 0x81	; 129
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 e1       	ldi	r24, 0x10	; 16
     3f2:	80 83       	st	Z, r24
	SET_BIT(TCCR1B, CS10)		// Start Timer1, prescaler(1)    
     3f4:	a1 e8       	ldi	r26, 0x81	; 129
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	e1 e8       	ldi	r30, 0x81	; 129
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	81 60       	ori	r24, 0x01	; 1
     400:	8c 93       	st	X, r24
	WAIT_SEC(d)
     402:	8d 81       	ldd	r24, Y+5	; 0x05
     404:	9e 81       	ldd	r25, Y+6	; 0x06
     406:	9c 01       	movw	r18, r24
     408:	22 0f       	add	r18, r18
     40a:	33 1f       	adc	r19, r19
     40c:	c9 01       	movw	r24, r18
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	82 0f       	add	r24, r18
     418:	93 1f       	adc	r25, r19
     41a:	0e 94 76 01 	call	0x2ec	; 0x2ec <delay_ds>
	CLEAR_BIT(TCCR1B, CS10)		// Stops Timer 1
     41e:	a1 e8       	ldi	r26, 0x81	; 129
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	e1 e8       	ldi	r30, 0x81	; 129
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	8e 7f       	andi	r24, 0xFE	; 254
     42a:	8c 93       	st	X, r24
}
     42c:	26 96       	adiw	r28, 0x06	; 6
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	cf 91       	pop	r28
     43a:	df 91       	pop	r29
     43c:	08 95       	ret

0000043e <DF_SPI_init>:
*	Purpose :		Sets up the HW SPI in Master mode, Mode 3
*					Note -> Uses the SS line to control the DF CS-line.
*
******************************************************************************/
void DF_SPI_init (void)
{
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
	
	PORTB |= (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
     446:	a5 e2       	ldi	r26, 0x25	; 37
     448:	b0 e0       	ldi	r27, 0x00	; 0
     44a:	e5 e2       	ldi	r30, 0x25	; 37
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	80 81       	ld	r24, Z
     450:	8f 60       	ori	r24, 0x0F	; 15
     452:	8c 93       	st	X, r24
	DDRB |= (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);		//Set MOSI, SCK AND SS as outputs
     454:	a4 e2       	ldi	r26, 0x24	; 36
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	e4 e2       	ldi	r30, 0x24	; 36
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	87 60       	ori	r24, 0x07	; 7
     460:	8c 93       	st	X, r24
	SPSR = (1<<SPI2X);                                      //SPI double speed settings
     462:	ed e4       	ldi	r30, 0x4D	; 77
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 83       	st	Z, r24
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPHA) | (1<<CPOL);	//Enable SPI in Master mode, mode 3, Fosc/2
     46a:	ec e4       	ldi	r30, 0x4C	; 76
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	8c e5       	ldi	r24, 0x5C	; 92
     470:	80 83       	st	Z, r24

}
     472:	cf 91       	pop	r28
     474:	df 91       	pop	r29
     476:	08 95       	ret

00000478 <DF_SPI_RW>:
*
*	Purpose :		Read and writes one byte from/to SPI master
*
******************************************************************************/
unsigned char DF_SPI_RW (unsigned char output)
{
     478:	df 93       	push	r29
     47a:	cf 93       	push	r28
     47c:	00 d0       	rcall	.+0      	; 0x47e <DF_SPI_RW+0x6>
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char input;
	
	SPDR = output;							//put byte 'output' in SPI data register
     484:	ee e4       	ldi	r30, 0x4E	; 78
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	80 83       	st	Z, r24
	while(!(SPSR & 0x80));					//wait for transfer complete, poll SPIF-flag
     48c:	ed e4       	ldi	r30, 0x4D	; 77
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	88 23       	and	r24, r24
     494:	dc f7       	brge	.-10     	; 0x48c <DF_SPI_RW+0x14>
	input = SPDR;							//read value in SPI data reg.
     496:	ee e4       	ldi	r30, 0x4E	; 78
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	89 83       	std	Y+1, r24	; 0x01
	
	return input;							//return the byte clocked in from SPI slave
     49e:	89 81       	ldd	r24, Y+1	; 0x01
}		
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	cf 91       	pop	r28
     4a6:	df 91       	pop	r29
     4a8:	08 95       	ret

000004aa <Read_DF_status>:
*					Status info concerning compare between buffer and flash page
*					Status info concerning size of actual device
*
******************************************************************************/
unsigned char Read_DF_status (void)
{
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <Read_DF_status+0x6>
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
	unsigned char result,index_copy;
	
	DF_CS_inactive;							//make sure to toggle CS signal in order
     4b4:	a5 e2       	ldi	r26, 0x25	; 37
     4b6:	b0 e0       	ldi	r27, 0x00	; 0
     4b8:	e5 e2       	ldi	r30, 0x25	; 37
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	81 60       	ori	r24, 0x01	; 1
     4c0:	8c 93       	st	X, r24
	DF_CS_active;							//to reset dataflash command decoder
     4c2:	a5 e2       	ldi	r26, 0x25	; 37
     4c4:	b0 e0       	ldi	r27, 0x00	; 0
     4c6:	e5 e2       	ldi	r30, 0x25	; 37
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	8c 93       	st	X, r24
	result = DF_SPI_RW(StatusReg);			//send status register read op-code
     4d0:	87 e5       	ldi	r24, 0x57	; 87
     4d2:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
     4d6:	8a 83       	std	Y+2, r24	; 0x02
	result = DF_SPI_RW(0x00);				//dummy write to get result
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
     4de:	8a 83       	std	Y+2, r24	; 0x02
	
	index_copy = ((result & 0x38) >> 3);	//get the size info from status register
     4e0:	8a 81       	ldd	r24, Y+2	; 0x02
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	88 73       	andi	r24, 0x38	; 56
     4e8:	90 70       	andi	r25, 0x00	; 0
     4ea:	95 95       	asr	r25
     4ec:	87 95       	ror	r24
     4ee:	95 95       	asr	r25
     4f0:	87 95       	ror	r24
     4f2:	95 95       	asr	r25
     4f4:	87 95       	ror	r24
     4f6:	89 83       	std	Y+1, r24	; 0x01
	PageBits   = DF_pagebits[index_copy];	//get number of internal page address bits from look-up table
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	88 2f       	mov	r24, r24
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	fc 01       	movw	r30, r24
     500:	e0 50       	subi	r30, 0x00	; 0
     502:	ff 4f       	sbci	r31, 0xFF	; 255
     504:	80 81       	ld	r24, Z
     506:	80 93 39 03 	sts	0x0339, r24
	PageSize   = DF_pagesize[index_copy];   //get the size of the page (in bytes)
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	88 2f       	mov	r24, r24
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	fc 01       	movw	r30, r24
     516:	e8 5f       	subi	r30, 0xF8	; 248
     518:	fe 4f       	sbci	r31, 0xFE	; 254
     51a:	80 81       	ld	r24, Z
     51c:	91 81       	ldd	r25, Z+1	; 0x01
     51e:	90 93 3b 03 	sts	0x033B, r25
     522:	80 93 3a 03 	sts	0x033A, r24
	return result;							//return the read status register value
     526:	8a 81       	ldd	r24, Y+2	; 0x02
}
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	cf 91       	pop	r28
     52e:	df 91       	pop	r29
     530:	08 95       	ret

00000532 <Page_To_Buffer>:
*
*	Purpose :		Transfers a page from flash to dataflash SRAM buffer
*					
******************************************************************************/
void Page_To_Buffer (unsigned int PageAdr, unsigned char BufferNo)
{
     532:	df 93       	push	r29
     534:	cf 93       	push	r28
     536:	00 d0       	rcall	.+0      	; 0x538 <Page_To_Buffer+0x6>
     538:	0f 92       	push	r0
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	9a 83       	std	Y+2, r25	; 0x02
     540:	89 83       	std	Y+1, r24	; 0x01
     542:	6b 83       	std	Y+3, r22	; 0x03
	DF_CS_inactive;												//make sure to toggle CS signal in order
     544:	a5 e2       	ldi	r26, 0x25	; 37
     546:	b0 e0       	ldi	r27, 0x00	; 0
     548:	e5 e2       	ldi	r30, 0x25	; 37
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	81 60       	ori	r24, 0x01	; 1
     550:	8c 93       	st	X, r24
	DF_CS_active;												//to reset dataflash command decoder
     552:	a5 e2       	ldi	r26, 0x25	; 37
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	e5 e2       	ldi	r30, 0x25	; 37
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	8e 7f       	andi	r24, 0xFE	; 254
     55e:	8c 93       	st	X, r24
	
	if (1 == BufferNo)											//transfer flash page to buffer 1
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	49 f5       	brne	.+82     	; 0x5b8 <Page_To_Buffer+0x86>
	{
		DF_SPI_RW(FlashToBuf1Transfer);							//transfer to buffer 1 op-code
     566:	83 e5       	ldi	r24, 0x53	; 83
     568:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr >> (16 - PageBits)));	//upper part of page address
     56c:	80 91 39 03 	lds	r24, 0x0339
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	80 e1       	ldi	r24, 0x10	; 16
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	ac 01       	movw	r20, r24
     57a:	42 1b       	sub	r20, r18
     57c:	53 0b       	sbc	r21, r19
     57e:	9a 01       	movw	r18, r20
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	9a 81       	ldd	r25, Y+2	; 0x02
     584:	02 c0       	rjmp	.+4      	; 0x58a <Page_To_Buffer+0x58>
     586:	96 95       	lsr	r25
     588:	87 95       	ror	r24
     58a:	2a 95       	dec	r18
     58c:	e2 f7       	brpl	.-8      	; 0x586 <Page_To_Buffer+0x54>
     58e:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr << (PageBits - 8)));	//lower part of page address
     592:	80 91 39 03 	lds	r24, 0x0339
     596:	88 2f       	mov	r24, r24
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	9c 01       	movw	r18, r24
     59c:	28 50       	subi	r18, 0x08	; 8
     59e:	30 40       	sbci	r19, 0x00	; 0
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <Page_To_Buffer+0x78>
     5a6:	88 0f       	add	r24, r24
     5a8:	99 1f       	adc	r25, r25
     5aa:	2a 95       	dec	r18
     5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <Page_To_Buffer+0x74>
     5ae:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);										//don't cares
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr << (PageBits - 8)));	//lower part of page address
		DF_SPI_RW(0x00);										//don't cares
	}
#endif
	
	DF_CS_inactive;												//initiate the transfer
     5b8:	a5 e2       	ldi	r26, 0x25	; 37
     5ba:	b0 e0       	ldi	r27, 0x00	; 0
     5bc:	e5 e2       	ldi	r30, 0x25	; 37
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	81 60       	ori	r24, 0x01	; 1
     5c4:	8c 93       	st	X, r24
	DF_CS_active;
     5c6:	a5 e2       	ldi	r26, 0x25	; 37
     5c8:	b0 e0       	ldi	r27, 0x00	; 0
     5ca:	e5 e2       	ldi	r30, 0x25	; 37
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	80 81       	ld	r24, Z
     5d0:	8e 7f       	andi	r24, 0xFE	; 254
     5d2:	8c 93       	st	X, r24
	
	while(!(Read_DF_status() & 0x80));							//monitor the status register, wait until busy-flag is high
     5d4:	0e 94 55 02 	call	0x4aa	; 0x4aa <Read_DF_status>
     5d8:	88 23       	and	r24, r24
     5da:	e4 f7       	brge	.-8      	; 0x5d4 <Page_To_Buffer+0xa2>
}
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	cf 91       	pop	r28
     5e4:	df 91       	pop	r29
     5e6:	08 95       	ret

000005e8 <Buffer_Read_Byte>:
*	Purpose :		Reads one byte from one of the dataflash
*					internal SRAM buffers
*
******************************************************************************/
unsigned char Buffer_Read_Byte (unsigned char BufferNo, unsigned int IntPageAdr)
{
     5e8:	df 93       	push	r29
     5ea:	cf 93       	push	r28
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <Buffer_Read_Byte+0x6>
     5ee:	00 d0       	rcall	.+0      	; 0x5f0 <Buffer_Read_Byte+0x8>
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	8a 83       	std	Y+2, r24	; 0x02
     5f6:	7c 83       	std	Y+4, r23	; 0x04
     5f8:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char data;
	
	DF_CS_inactive;								//make sure to toggle CS signal in order
     5fa:	a5 e2       	ldi	r26, 0x25	; 37
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	e5 e2       	ldi	r30, 0x25	; 37
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	81 60       	ori	r24, 0x01	; 1
     606:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     608:	a5 e2       	ldi	r26, 0x25	; 37
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	e5 e2       	ldi	r30, 0x25	; 37
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	80 81       	ld	r24, Z
     612:	8e 7f       	andi	r24, 0xFE	; 254
     614:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//read byte from buffer 1
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	b1 f4       	brne	.+44     	; 0x648 <Buffer_Read_Byte+0x60>
	{
		DF_SPI_RW(Buf1Read);					//buffer 1 read op-code
     61c:	84 e5       	ldi	r24, 0x54	; 84
     61e:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	9c 81       	ldd	r25, Y+4	; 0x04
     62c:	89 2f       	mov	r24, r25
     62e:	99 27       	eor	r25, r25
     630:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     634:	8b 81       	ldd	r24, Y+3	; 0x03
     636:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		data = DF_SPI_RW(0x00);					//read byte
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
     646:	89 83       	std	Y+1, r24	; 0x01
		DF_SPI_RW(0x00);						//don't cares
		data = DF_SPI_RW(0x00);					//read byte
	}
#endif
	
	return data;								//return the read data byte
     648:	89 81       	ldd	r24, Y+1	; 0x01
}
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	cf 91       	pop	r28
     654:	df 91       	pop	r29
     656:	08 95       	ret

00000658 <Buffer_Read_Str>:
*					internal SRAM buffers, and puts read bytes into
*					buffer pointed to by *BufferPtr
*
******************************************************************************/
void Buffer_Read_Str (unsigned char BufferNo, unsigned int IntPageAdr, unsigned int No_of_bytes, unsigned char *BufferPtr)
{
     658:	df 93       	push	r29
     65a:	cf 93       	push	r28
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	29 97       	sbiw	r28, 0x09	; 9
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
     66c:	8b 83       	std	Y+3, r24	; 0x03
     66e:	7d 83       	std	Y+5, r23	; 0x05
     670:	6c 83       	std	Y+4, r22	; 0x04
     672:	5f 83       	std	Y+7, r21	; 0x07
     674:	4e 83       	std	Y+6, r20	; 0x06
     676:	39 87       	std	Y+9, r19	; 0x09
     678:	28 87       	std	Y+8, r18	; 0x08
	unsigned int i;

	DF_CS_inactive;								//make sure to toggle CS signal in order
     67a:	a5 e2       	ldi	r26, 0x25	; 37
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	e5 e2       	ldi	r30, 0x25	; 37
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	81 60       	ori	r24, 0x01	; 1
     686:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     688:	a5 e2       	ldi	r26, 0x25	; 37
     68a:	b0 e0       	ldi	r27, 0x00	; 0
     68c:	e5 e2       	ldi	r30, 0x25	; 37
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	8e 7f       	andi	r24, 0xFE	; 254
     694:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//read byte(s) from buffer 1
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	81 30       	cpi	r24, 0x01	; 1
     69a:	61 f5       	brne	.+88     	; 0x6f4 <Buffer_Read_Str+0x9c>
	{
		DF_SPI_RW(Buf1Read);					//buffer 1 read op-code
     69c:	84 e5       	ldi	r24, 0x54	; 84
     69e:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     6a8:	8c 81       	ldd	r24, Y+4	; 0x04
     6aa:	9d 81       	ldd	r25, Y+5	; 0x05
     6ac:	89 2f       	mov	r24, r25
     6ae:	99 27       	eor	r25, r25
     6b0:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     6b4:	8c 81       	ldd	r24, Y+4	; 0x04
     6b6:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		for( i=0; i<No_of_bytes; i++)
     6c0:	1a 82       	std	Y+2, r1	; 0x02
     6c2:	19 82       	std	Y+1, r1	; 0x01
     6c4:	10 c0       	rjmp	.+32     	; 0x6e6 <Buffer_Read_Str+0x8e>
		{
			*(BufferPtr) = DF_SPI_RW(0x00);		//read byte and put it in AVR buffer pointed to by *BufferPtr
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
     6cc:	e8 85       	ldd	r30, Y+8	; 0x08
     6ce:	f9 85       	ldd	r31, Y+9	; 0x09
     6d0:	80 83       	st	Z, r24
			BufferPtr++;						//point to next element in AVR buffer
     6d2:	88 85       	ldd	r24, Y+8	; 0x08
     6d4:	99 85       	ldd	r25, Y+9	; 0x09
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	99 87       	std	Y+9, r25	; 0x09
     6da:	88 87       	std	Y+8, r24	; 0x08
		DF_SPI_RW(Buf1Read);					//buffer 1 read op-code
		DF_SPI_RW(0x00);						//don't cares
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
		DF_SPI_RW(0x00);						//don't cares
		for( i=0; i<No_of_bytes; i++)
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	9a 81       	ldd	r25, Y+2	; 0x02
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	9a 83       	std	Y+2, r25	; 0x02
     6e4:	89 83       	std	Y+1, r24	; 0x01
     6e6:	29 81       	ldd	r18, Y+1	; 0x01
     6e8:	3a 81       	ldd	r19, Y+2	; 0x02
     6ea:	8e 81       	ldd	r24, Y+6	; 0x06
     6ec:	9f 81       	ldd	r25, Y+7	; 0x07
     6ee:	28 17       	cp	r18, r24
     6f0:	39 07       	cpc	r19, r25
     6f2:	48 f3       	brcs	.-46     	; 0x6c6 <Buffer_Read_Str+0x6e>
			*(BufferPtr) = DF_SPI_RW(0x00);		//read byte and put it in AVR buffer pointed to by *BufferPtr
			BufferPtr++;						//point to next element in AVR buffer
		}
	}
#endif
}
     6f4:	29 96       	adiw	r28, 0x09	; 9
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	cf 91       	pop	r28
     702:	df 91       	pop	r29
     704:	08 95       	ret

00000706 <Buffer_Write_Enable>:
*					buffers. NOTE : User must ensure that CS goes high to terminate
*					this mode before accessing other dataflash functionalities 
*
******************************************************************************/
void Buffer_Write_Enable (unsigned char BufferNo, unsigned int IntPageAdr)
{
     706:	df 93       	push	r29
     708:	cf 93       	push	r28
     70a:	00 d0       	rcall	.+0      	; 0x70c <Buffer_Write_Enable+0x6>
     70c:	0f 92       	push	r0
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	89 83       	std	Y+1, r24	; 0x01
     714:	7b 83       	std	Y+3, r23	; 0x03
     716:	6a 83       	std	Y+2, r22	; 0x02
	DF_CS_inactive;								//make sure to toggle CS signal in order
     718:	a5 e2       	ldi	r26, 0x25	; 37
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	e5 e2       	ldi	r30, 0x25	; 37
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	81 60       	ori	r24, 0x01	; 1
     724:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     726:	a5 e2       	ldi	r26, 0x25	; 37
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	e5 e2       	ldi	r30, 0x25	; 37
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	8e 7f       	andi	r24, 0xFE	; 254
     732:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//write enable to buffer 1
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	81 30       	cpi	r24, 0x01	; 1
     738:	79 f4       	brne	.+30     	; 0x758 <Buffer_Write_Enable+0x52>
	{
		DF_SPI_RW(Buf1Write);					//buffer 1 write op-code
     73a:	84 e8       	ldi	r24, 0x84	; 132
     73c:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	9b 81       	ldd	r25, Y+3	; 0x03
     74a:	89 2f       	mov	r24, r25
     74c:	99 27       	eor	r25, r25
     74e:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
	}
#endif
}
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	cf 91       	pop	r28
     760:	df 91       	pop	r29
     762:	08 95       	ret

00000764 <Buffer_Write_Byte>:
*	Purpose :		Writes one byte to one of the dataflash
*					internal SRAM buffers
*
******************************************************************************/
void Buffer_Write_Byte (unsigned char BufferNo, unsigned int IntPageAdr, unsigned char Data)
{
     764:	df 93       	push	r29
     766:	cf 93       	push	r28
     768:	00 d0       	rcall	.+0      	; 0x76a <Buffer_Write_Byte+0x6>
     76a:	00 d0       	rcall	.+0      	; 0x76c <Buffer_Write_Byte+0x8>
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	89 83       	std	Y+1, r24	; 0x01
     772:	7b 83       	std	Y+3, r23	; 0x03
     774:	6a 83       	std	Y+2, r22	; 0x02
     776:	4c 83       	std	Y+4, r20	; 0x04
	
	DF_CS_inactive;								//make sure to toggle CS signal in order
     778:	a5 e2       	ldi	r26, 0x25	; 37
     77a:	b0 e0       	ldi	r27, 0x00	; 0
     77c:	e5 e2       	ldi	r30, 0x25	; 37
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	80 81       	ld	r24, Z
     782:	81 60       	ori	r24, 0x01	; 1
     784:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     786:	a5 e2       	ldi	r26, 0x25	; 37
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	e5 e2       	ldi	r30, 0x25	; 37
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	8e 7f       	andi	r24, 0xFE	; 254
     792:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//write byte to buffer 1
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	81 30       	cpi	r24, 0x01	; 1
     798:	91 f4       	brne	.+36     	; 0x7be <Buffer_Write_Byte+0x5a>
	{
		DF_SPI_RW(Buf1Write);					//buffer 1 write op-code
     79a:	84 e8       	ldi	r24, 0x84	; 132
     79c:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     7a6:	8a 81       	ldd	r24, Y+2	; 0x02
     7a8:	9b 81       	ldd	r25, Y+3	; 0x03
     7aa:	89 2f       	mov	r24, r25
     7ac:	99 27       	eor	r25, r25
     7ae:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     7b2:	8a 81       	ldd	r24, Y+2	; 0x02
     7b4:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(Data);						//write data byte
     7b8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ba:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
		DF_SPI_RW(Data);						//write data byte
	}		
#endif
}
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	08 95       	ret

000007cc <Buffer_Write_Str>:
*					internal SRAM buffers from AVR SRAM buffer
*					pointed to by *BufferPtr
*
******************************************************************************/
void Buffer_Write_Str (unsigned char BufferNo, unsigned int IntPageAdr, unsigned int No_of_bytes, unsigned char *BufferPtr)
{
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	29 97       	sbiw	r28, 0x09	; 9
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	8b 83       	std	Y+3, r24	; 0x03
     7e2:	7d 83       	std	Y+5, r23	; 0x05
     7e4:	6c 83       	std	Y+4, r22	; 0x04
     7e6:	5f 83       	std	Y+7, r21	; 0x07
     7e8:	4e 83       	std	Y+6, r20	; 0x06
     7ea:	39 87       	std	Y+9, r19	; 0x09
     7ec:	28 87       	std	Y+8, r18	; 0x08
	unsigned int i;

	DF_CS_inactive;								//make sure to toggle CS signal in order
     7ee:	a5 e2       	ldi	r26, 0x25	; 37
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	e5 e2       	ldi	r30, 0x25	; 37
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	81 60       	ori	r24, 0x01	; 1
     7fa:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     7fc:	a5 e2       	ldi	r26, 0x25	; 37
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	e5 e2       	ldi	r30, 0x25	; 37
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	8e 7f       	andi	r24, 0xFE	; 254
     808:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//write byte(s) to buffer 1
     80a:	8b 81       	ldd	r24, Y+3	; 0x03
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	41 f5       	brne	.+80     	; 0x860 <Buffer_Write_Str+0x94>
	{
		DF_SPI_RW(Buf1Write);					//buffer 1 write op-code
     810:	84 e8       	ldi	r24, 0x84	; 132
     812:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     81c:	8c 81       	ldd	r24, Y+4	; 0x04
     81e:	9d 81       	ldd	r25, Y+5	; 0x05
     820:	89 2f       	mov	r24, r25
     822:	99 27       	eor	r25, r25
     824:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     828:	8c 81       	ldd	r24, Y+4	; 0x04
     82a:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		for( i=0; i<No_of_bytes; i++)
     82e:	1a 82       	std	Y+2, r1	; 0x02
     830:	19 82       	std	Y+1, r1	; 0x01
     832:	0f c0       	rjmp	.+30     	; 0x852 <Buffer_Write_Str+0x86>
		{
			DF_SPI_RW(*(BufferPtr));			//write byte pointed at by *BufferPtr to dataflash buffer 1 location
     834:	e8 85       	ldd	r30, Y+8	; 0x08
     836:	f9 85       	ldd	r31, Y+9	; 0x09
     838:	80 81       	ld	r24, Z
     83a:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
			BufferPtr++;						//point to next element in AVR buffer
     83e:	88 85       	ldd	r24, Y+8	; 0x08
     840:	99 85       	ldd	r25, Y+9	; 0x09
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	99 87       	std	Y+9, r25	; 0x09
     846:	88 87       	std	Y+8, r24	; 0x08
	{
		DF_SPI_RW(Buf1Write);					//buffer 1 write op-code
		DF_SPI_RW(0x00);						//don't cares
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
		for( i=0; i<No_of_bytes; i++)
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	9a 81       	ldd	r25, Y+2	; 0x02
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	29 81       	ldd	r18, Y+1	; 0x01
     854:	3a 81       	ldd	r19, Y+2	; 0x02
     856:	8e 81       	ldd	r24, Y+6	; 0x06
     858:	9f 81       	ldd	r25, Y+7	; 0x07
     85a:	28 17       	cp	r18, r24
     85c:	39 07       	cpc	r19, r25
     85e:	50 f3       	brcs	.-44     	; 0x834 <Buffer_Write_Str+0x68>
			DF_SPI_RW(*(BufferPtr));			//write byte pointed at by *BufferPtr to dataflash buffer 2 location
			BufferPtr++;						//point to next element in AVR buffer
		}
	}
#endif
}
     860:	29 96       	adiw	r28, 0x09	; 9
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	cf 91       	pop	r28
     86e:	df 91       	pop	r29
     870:	08 95       	ret

00000872 <Buffer_To_Page>:
*
*	Purpose :		Transfers a page from dataflash SRAM buffer to flash
*					
******************************************************************************/
void Buffer_To_Page (unsigned char BufferNo, unsigned int PageAdr)
{
     872:	df 93       	push	r29
     874:	cf 93       	push	r28
     876:	00 d0       	rcall	.+0      	; 0x878 <Buffer_To_Page+0x6>
     878:	0f 92       	push	r0
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	89 83       	std	Y+1, r24	; 0x01
     880:	7b 83       	std	Y+3, r23	; 0x03
     882:	6a 83       	std	Y+2, r22	; 0x02
	DF_CS_inactive;												//make sure to toggle CS signal in order
     884:	a5 e2       	ldi	r26, 0x25	; 37
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e5 e2       	ldi	r30, 0x25	; 37
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	81 60       	ori	r24, 0x01	; 1
     890:	8c 93       	st	X, r24
	DF_CS_active;												//to reset dataflash command decoder
     892:	a5 e2       	ldi	r26, 0x25	; 37
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	e5 e2       	ldi	r30, 0x25	; 37
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	8e 7f       	andi	r24, 0xFE	; 254
     89e:	8c 93       	st	X, r24
		
	if (1 == BufferNo)											//program flash page from buffer 1
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	49 f5       	brne	.+82     	; 0x8f8 <Buffer_To_Page+0x86>
	{
		DF_SPI_RW(Buf1ToFlashWE);								//buffer 1 to flash with erase op-code
     8a6:	83 e8       	ldi	r24, 0x83	; 131
     8a8:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr >> (16 - PageBits)));	//upper part of page address
     8ac:	80 91 39 03 	lds	r24, 0x0339
     8b0:	28 2f       	mov	r18, r24
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	80 e1       	ldi	r24, 0x10	; 16
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	ac 01       	movw	r20, r24
     8ba:	42 1b       	sub	r20, r18
     8bc:	53 0b       	sbc	r21, r19
     8be:	9a 01       	movw	r18, r20
     8c0:	8a 81       	ldd	r24, Y+2	; 0x02
     8c2:	9b 81       	ldd	r25, Y+3	; 0x03
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <Buffer_To_Page+0x58>
     8c6:	96 95       	lsr	r25
     8c8:	87 95       	ror	r24
     8ca:	2a 95       	dec	r18
     8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <Buffer_To_Page+0x54>
     8ce:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr << (PageBits - 8)));	//lower part of page address
     8d2:	80 91 39 03 	lds	r24, 0x0339
     8d6:	88 2f       	mov	r24, r24
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	9c 01       	movw	r18, r24
     8dc:	28 50       	subi	r18, 0x08	; 8
     8de:	30 40       	sbci	r19, 0x00	; 0
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	9b 81       	ldd	r25, Y+3	; 0x03
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <Buffer_To_Page+0x78>
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	2a 95       	dec	r18
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <Buffer_To_Page+0x74>
     8ee:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW(0x00);										//don't cares
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr << (PageBits - 8)));	//lower part of page address
		DF_SPI_RW(0x00);										//don't cares
	}
#endif
	
	DF_CS_inactive;												//initiate flash page programming
     8f8:	a5 e2       	ldi	r26, 0x25	; 37
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	e5 e2       	ldi	r30, 0x25	; 37
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	81 60       	ori	r24, 0x01	; 1
     904:	8c 93       	st	X, r24
	DF_CS_active;												
     906:	a5 e2       	ldi	r26, 0x25	; 37
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e5 e2       	ldi	r30, 0x25	; 37
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	8e 7f       	andi	r24, 0xFE	; 254
     912:	8c 93       	st	X, r24
	
	while(!(Read_DF_status() & 0x80));							//monitor the status register, wait until busy-flag is high
     914:	0e 94 55 02 	call	0x4aa	; 0x4aa <Read_DF_status>
     918:	88 23       	and	r24, r24
     91a:	e4 f7       	brge	.-8      	; 0x914 <Buffer_To_Page+0xa2>
}
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	cf 91       	pop	r28
     924:	df 91       	pop	r29
     926:	08 95       	ret

00000928 <Cont_Flash_Read_Enable>:
*
*	Purpose :		Initiates a continuous read from a location in the DataFlash
*					
******************************************************************************/
void Cont_Flash_Read_Enable (unsigned int PageAdr, unsigned int IntPageAdr)
{
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	00 d0       	rcall	.+0      	; 0x92e <Cont_Flash_Read_Enable+0x6>
     92e:	00 d0       	rcall	.+0      	; 0x930 <Cont_Flash_Read_Enable+0x8>
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	9a 83       	std	Y+2, r25	; 0x02
     936:	89 83       	std	Y+1, r24	; 0x01
     938:	7c 83       	std	Y+4, r23	; 0x04
     93a:	6b 83       	std	Y+3, r22	; 0x03
	DF_CS_inactive;																//make sure to toggle CS signal in order
     93c:	a5 e2       	ldi	r26, 0x25	; 37
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	e5 e2       	ldi	r30, 0x25	; 37
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	81 60       	ori	r24, 0x01	; 1
     948:	8c 93       	st	X, r24
	DF_CS_active;																//to reset dataflash command decoder
     94a:	a5 e2       	ldi	r26, 0x25	; 37
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	e5 e2       	ldi	r30, 0x25	; 37
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	8e 7f       	andi	r24, 0xFE	; 254
     956:	8c 93       	st	X, r24
	
	DF_SPI_RW(ContArrayRead);													//Continuous Array Read op-code
     958:	88 e6       	ldi	r24, 0x68	; 104
     95a:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW((unsigned char)(PageAdr >> (16 - PageBits)));						//upper part of page address
     95e:	80 91 39 03 	lds	r24, 0x0339
     962:	28 2f       	mov	r18, r24
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	80 e1       	ldi	r24, 0x10	; 16
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	ac 01       	movw	r20, r24
     96c:	42 1b       	sub	r20, r18
     96e:	53 0b       	sbc	r21, r19
     970:	9a 01       	movw	r18, r20
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	02 c0       	rjmp	.+4      	; 0x97c <Cont_Flash_Read_Enable+0x54>
     978:	96 95       	lsr	r25
     97a:	87 95       	ror	r24
     97c:	2a 95       	dec	r18
     97e:	e2 f7       	brpl	.-8      	; 0x978 <Cont_Flash_Read_Enable+0x50>
     980:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW((unsigned char)((PageAdr << (PageBits - 8))+ (IntPageAdr>>8)));	//lower part of page address and MSB of int.page adr.
     984:	80 91 39 03 	lds	r24, 0x0339
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	9c 01       	movw	r18, r24
     98e:	28 50       	subi	r18, 0x08	; 8
     990:	30 40       	sbci	r19, 0x00	; 0
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	02 c0       	rjmp	.+4      	; 0x99c <Cont_Flash_Read_Enable+0x74>
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	2a 95       	dec	r18
     99e:	e2 f7       	brpl	.-8      	; 0x998 <Cont_Flash_Read_Enable+0x70>
     9a0:	28 2f       	mov	r18, r24
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	89 2f       	mov	r24, r25
     9a8:	99 27       	eor	r25, r25
     9aa:	82 0f       	add	r24, r18
     9ac:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW((unsigned char)(IntPageAdr));										//LSB byte of internal page address
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW(0x00);															//perform 4 dummy writes
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW(0x00);															//in order to intiate DataFlash
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW(0x00);															//address pointers
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
	DF_SPI_RW(0x00);
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	0e 94 3c 02 	call	0x478	; 0x478 <DF_SPI_RW>
}
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	cf 91       	pop	r28
     9d8:	df 91       	pop	r29
     9da:	08 95       	ret

000009dc <LCD_Init>:
*   Purpose :       Initialize LCD_displayData buffer.
*                   Set up the LCD (timing, contrast, etc.)
*
*****************************************************************************/
void LCD_Init (void)
{
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
    LCD_AllSegments(FALSE);                    // Clear segment buffer.
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <LCD_AllSegments>
    LCD_CONTRAST_LEVEL(LCD_INITIAL_CONTRAST);  //Set the LCD contrast level
     9ea:	e7 ee       	ldi	r30, 0xE7	; 231
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	8f e0       	ldi	r24, 0x0F	; 15
     9f0:	80 83       	st	Z, r24
    LCDCRB = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0); // Select asynchronous clock source, enable all COM pins and enable all segment pins.
     9f2:	e5 ee       	ldi	r30, 0xE5	; 229
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	87 eb       	ldi	r24, 0xB7	; 183
     9f8:	80 83       	st	Z, r24
    LCDFRR = (0<<LCDPS0) | (7<<LCDCD0);        // Set LCD prescaler to give a framerate of 32,0 Hz
     9fa:	e6 ee       	ldi	r30, 0xE6	; 230
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	87 e0       	ldi	r24, 0x07	; 7
     a00:	80 83       	st	Z, r24
    LCDCRA = (1<<LCDEN) | (1<<LCDAB);          // Enable LCD and set low power waveform
     a02:	e4 ee       	ldi	r30, 0xE4	; 228
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	80 ec       	ldi	r24, 0xC0	; 192
     a08:	80 83       	st	Z, r24
    LCDCRA |= (1<<LCDIE);                      //Enable LCD start of frame interrupt
     a0a:	a4 ee       	ldi	r26, 0xE4	; 228
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e4 ee       	ldi	r30, 0xE4	; 228
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	88 60       	ori	r24, 0x08	; 8
     a16:	8c 93       	st	X, r24
    gLCD_Update_Required = FALSE;
     a18:	10 92 8a 02 	sts	0x028A, r1
    sei();
     a1c:	78 94       	sei
}
     a1e:	cf 91       	pop	r28
     a20:	df 91       	pop	r29
     a22:	08 95       	ret

00000a24 <LCD_Clear>:
/****************************************************************************
*	Function name : LCD_Clear
*	Purpose :		Clear the LCD
*****************************************************************************/
void LCD_Clear(void)
{
     a24:	df 93       	push	r29
     a26:	cf 93       	push	r28
     a28:	0f 92       	push	r0
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
	enter=0;
     a2e:	10 92 8e 02 	sts	0x028E, r1
	for (i=0; i<TEXTBUFFER_SIZE; i++)
     a32:	19 82       	std	Y+1, r1	; 0x01
     a34:	0b c0       	rjmp	.+22     	; 0xa4c <LCD_Clear+0x28>
    gTextBuffer[i] = ' ';		
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	88 2f       	mov	r24, r24
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	fc 01       	movw	r30, r24
     a3e:	ed 58       	subi	r30, 0x8D	; 141
     a40:	fc 4f       	sbci	r31, 0xFC	; 252
     a42:	80 e2       	ldi	r24, 0x20	; 32
     a44:	80 83       	st	Z, r24
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i;
	enter=0;
	for (i=0; i<TEXTBUFFER_SIZE; i++)
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	8f 5f       	subi	r24, 0xFF	; 255
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	89 31       	cpi	r24, 0x19	; 25
     a50:	90 f3       	brcs	.-28     	; 0xa36 <LCD_Clear+0x12>
    gTextBuffer[i] = ' ';		
	
}
     a52:	0f 90       	pop	r0
     a54:	cf 91       	pop	r28
     a56:	df 91       	pop	r29
     a58:	08 95       	ret

00000a5a <LCD_puts>:
*	Function name : LCD_puts
*	Parameters :	pStr: Pointer to the string
*	Purpose :		Writes a string to the LCD
*****************************************************************************/
void LCD_puts(char *pStr)
{
     a5a:	df 93       	push	r29
     a5c:	cf 93       	push	r28
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <LCD_puts+0x6>
     a60:	0f 92       	push	r0
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
     a66:	9b 83       	std	Y+3, r25	; 0x03
     a68:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i; 
	enter=1;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 8e 02 	sts	0x028E, r24
	gLCD_Update_Required = 1;
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	80 93 8a 02 	sts	0x028A, r24
	LCD_puts_f(PSTR(""));
     a76:	88 ec       	ldi	r24, 0xC8	; 200
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 66 07 	call	0xecc	; 0xecc <LCD_puts_f>
	enter=1;	
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 8e 02 	sts	0x028E, r24
	if(enter)// This condition is to enable the scroll function
     a84:	80 91 8e 02 	lds	r24, 0x028E
     a88:	88 23       	and	r24, r24
     a8a:	09 f4       	brne	.+2      	; 0xa8e <LCD_puts+0x34>
     a8c:	43 c0       	rjmp	.+134    	; 0xb14 <LCD_puts+0xba>
    {
    enter = 0;
     a8e:	10 92 8e 02 	sts	0x028E, r1
	while (gLCD_Update_Required);      // Wait for access to buffer
     a92:	80 91 8a 02 	lds	r24, 0x028A
     a96:	88 23       	and	r24, r24
     a98:	e1 f7       	brne	.-8      	; 0xa92 <LCD_puts+0x38>

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
     a9a:	19 82       	std	Y+1, r1	; 0x01
     a9c:	13 c0       	rjmp	.+38     	; 0xac4 <LCD_puts+0x6a>
    gTextBuffer[i] = pStr[i];
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	48 2f       	mov	r20, r24
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	28 2f       	mov	r18, r24
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	8a 81       	ldd	r24, Y+2	; 0x02
     aac:	9b 81       	ldd	r25, Y+3	; 0x03
     aae:	fc 01       	movw	r30, r24
     ab0:	e2 0f       	add	r30, r18
     ab2:	f3 1f       	adc	r31, r19
     ab4:	80 81       	ld	r24, Z
     ab6:	fa 01       	movw	r30, r20
     ab8:	ed 58       	subi	r30, 0x8D	; 141
     aba:	fc 4f       	sbci	r31, 0xFC	; 252
     abc:	80 83       	st	Z, r24
	if(enter)// This condition is to enable the scroll function
    {
    enter = 0;
	while (gLCD_Update_Required);      // Wait for access to buffer

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	8f 5f       	subi	r24, 0xFF	; 255
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	8a 81       	ldd	r24, Y+2	; 0x02
     acc:	9b 81       	ldd	r25, Y+3	; 0x03
     ace:	fc 01       	movw	r30, r24
     ad0:	e2 0f       	add	r30, r18
     ad2:	f3 1f       	adc	r31, r19
     ad4:	80 81       	ld	r24, Z
     ad6:	88 23       	and	r24, r24
     ad8:	19 f0       	breq	.+6      	; 0xae0 <LCD_puts+0x86>
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	89 31       	cpi	r24, 0x19	; 25
     ade:	f8 f2       	brcs	.-66     	; 0xa9e <LCD_puts+0x44>
    gTextBuffer[i] = pStr[i];
    
	gTextBuffer[i] = '\0';
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	88 2f       	mov	r24, r24
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	fc 01       	movw	r30, r24
     ae8:	ed 58       	subi	r30, 0x8D	; 141
     aea:	fc 4f       	sbci	r31, 0xFC	; 252
     aec:	10 82       	st	Z, r1

    if (i > 6)
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	87 30       	cpi	r24, 0x07	; 7
     af2:	48 f0       	brcs	.+18     	; 0xb06 <LCD_puts+0xac>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 3c 03 	sts	0x033C, r24
        gScroll = 0;
     afa:	10 92 8c 03 	sts	0x038C, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	80 93 8b 02 	sts	0x028B, r24
     b04:	04 c0       	rjmp	.+8      	; 0xb0e <LCD_puts+0xb4>
    }
    else
    {
        gScrollMode = 0;        
     b06:	10 92 3c 03 	sts	0x033C, r1
        gScroll = 0;
     b0a:	10 92 8c 03 	sts	0x038C, r1
    }

    gLCD_Update_Required = 1;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	80 93 8a 02 	sts	0x028A, r24
}
}
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	cf 91       	pop	r28
     b1c:	df 91       	pop	r29
     b1e:	08 95       	ret

00000b20 <LCD_putc>:
/****************************************************************************
*	Function name : LCD_putc
*	Purpose :		Writes a character to the LCD
*****************************************************************************/
void LCD_putc(char character)
{
     b20:	df 93       	push	r29
     b22:	cf 93       	push	r28
     b24:	00 d0       	rcall	.+0      	; 0xb26 <LCD_putc+0x6>
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t digit=0;
     b2c:	19 82       	std	Y+1, r1	; 0x01
	enter=1;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 93 8e 02 	sts	0x028E, r24
    LCD_puts_f(PSTR(""));
     b34:	89 ec       	ldi	r24, 0xC9	; 201
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 66 07 	call	0xecc	; 0xecc <LCD_puts_f>
	if (digit < TEXTBUFFER_SIZE)
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	89 31       	cpi	r24, 0x19	; 25
     b40:	40 f4       	brcc	.+16     	; 0xb52 <LCD_putc+0x32>
        gTextBuffer[digit] = character;
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	88 2f       	mov	r24, r24
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	fc 01       	movw	r30, r24
     b4a:	ed 58       	subi	r30, 0x8D	; 141
     b4c:	fc 4f       	sbci	r31, 0xFC	; 252
     b4e:	8a 81       	ldd	r24, Y+2	; 0x02
     b50:	80 83       	st	Z, r24
}
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <LCD_Colon>:
*
*	Purpose :		Enable/disable colons on the LCD
*
*****************************************************************************/
void LCD_Colon(char show)
{
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	0f 92       	push	r0
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	89 83       	std	Y+1, r24	; 0x01
    gColon = show;
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	80 93 8d 02 	sts	0x028D, r24
}
     b6e:	0f 90       	pop	r0
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <LCD_UpdateRequired>:
*
*	Purpose :		Tells the LCD that there is new data to be presented
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <LCD_UpdateRequired+0x6>
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	89 83       	std	Y+1, r24	; 0x01
     b82:	6a 83       	std	Y+2, r22	; 0x02

    while (gLCD_Update_Required);
     b84:	80 91 8a 02 	lds	r24, 0x028A
     b88:	88 23       	and	r24, r24
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <LCD_UpdateRequired+0xe>
    
    gScrollMode = scrollmode;
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	80 93 3c 03 	sts	0x033C, r24
    gScroll = 0;
     b92:	10 92 8c 03 	sts	0x038C, r1

    gLCD_Update_Required = update;
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	80 93 8a 02 	sts	0x028A, r24
}
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <LCD_FlashReset>:
*
*	Purpose :		This function resets the blinking cycle of a flashing digit
*
*****************************************************************************/
void LCD_FlashReset(void)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
    gFlashTimer = 0;
     bae:	10 92 8c 02 	sts	0x028C, r1
}
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <LCD_WriteDigit>:
*   Purpose :       Stores LCD control data in the LCD_displayData buffer.
*                   (The LCD_displayData is latched in the LCD_SOF interrupt.)
*
*****************************************************************************/
void LCD_WriteDigit(char c, char digit)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	2d 97       	sbiw	r28, 0x0d	; 13
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	8c 87       	std	Y+12, r24	; 0x0c
     bce:	6d 87       	std	Y+13, r22	; 0x0d

    unsigned int seg = 0x0000;                  // Holds the segment pattern
     bd0:	1b 86       	std	Y+11, r1	; 0x0b
     bd2:	1a 86       	std	Y+10, r1	; 0x0a
    char mask, nibble;
    char *ptr;
    char i;


    if (digit > 5)                              // Skip if digit is illegal
     bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd6:	86 30       	cpi	r24, 0x06	; 6
     bd8:	08 f0       	brcs	.+2      	; 0xbdc <LCD_WriteDigit+0x24>
     bda:	68 c0       	rjmp	.+208    	; 0xcac <LCD_WriteDigit+0xf4>
        return;

    //Lookup character table for segmet data
    if ((c >= '*') && (c <= 'z'))
     bdc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bde:	8a 32       	cpi	r24, 0x2A	; 42
     be0:	10 f1       	brcs	.+68     	; 0xc26 <LCD_WriteDigit+0x6e>
     be2:	8c 85       	ldd	r24, Y+12	; 0x0c
     be4:	8b 37       	cpi	r24, 0x7B	; 123
     be6:	f8 f4       	brcc	.+62     	; 0xc26 <LCD_WriteDigit+0x6e>
    {
        // c is a letter
        if (c >= 'a')                           // Convert to upper case
     be8:	8c 85       	ldd	r24, Y+12	; 0x0c
     bea:	81 36       	cpi	r24, 0x61	; 97
     bec:	18 f0       	brcs	.+6      	; 0xbf4 <LCD_WriteDigit+0x3c>
            c &= ~0x20;                         // if necessarry
     bee:	8c 85       	ldd	r24, Y+12	; 0x0c
     bf0:	8f 7d       	andi	r24, 0xDF	; 223
     bf2:	8c 87       	std	Y+12, r24	; 0x0c

        c -= '*';
     bf4:	8c 85       	ldd	r24, Y+12	; 0x0c
     bf6:	8a 52       	subi	r24, 0x2A	; 42
     bf8:	8c 87       	std	Y+12, r24	; 0x0c

		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
     bfa:	8c 85       	ldd	r24, Y+12	; 0x0c
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	84 5a       	subi	r24, 0xA4	; 164
     c06:	9f 4f       	sbci	r25, 0xFF	; 255
     c08:	9c 83       	std	Y+4, r25	; 0x04
     c0a:	8b 83       	std	Y+3, r24	; 0x03
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	9c 81       	ldd	r25, Y+4	; 0x04
     c10:	fc 01       	movw	r30, r24
     c12:	85 91       	lpm	r24, Z+
     c14:	94 91       	lpm	r25, Z+
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	fc 83       	std	Y+4, r31	; 0x04
     c1c:	eb 83       	std	Y+3, r30	; 0x03
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	9a 81       	ldd	r25, Y+2	; 0x02
     c22:	9b 87       	std	Y+11, r25	; 0x0b
     c24:	8a 87       	std	Y+10, r24	; 0x0a
	}

    // Adjust mask according to LCD segment mapping
    if (digit & 0x01)
     c26:	8d 85       	ldd	r24, Y+13	; 0x0d
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	81 70       	andi	r24, 0x01	; 1
     c2e:	90 70       	andi	r25, 0x00	; 0
     c30:	88 23       	and	r24, r24
     c32:	19 f0       	breq	.+6      	; 0xc3a <LCD_WriteDigit+0x82>
        mask = 0x0F;                // Digit 1, 3, 5
     c34:	8f e0       	ldi	r24, 0x0F	; 15
     c36:	89 87       	std	Y+9, r24	; 0x09
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <LCD_WriteDigit+0x86>
    else
        mask = 0xF0;                // Digit 0, 2, 4
     c3a:	80 ef       	ldi	r24, 0xF0	; 240
     c3c:	89 87       	std	Y+9, r24	; 0x09

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
     c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c40:	86 95       	lsr	r24
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	81 5a       	subi	r24, 0xA1	; 161
     c48:	9c 4f       	sbci	r25, 0xFC	; 252
     c4a:	9f 83       	std	Y+7, r25	; 0x07
     c4c:	8e 83       	std	Y+6, r24	; 0x06

    for (i = 0; i < 4; i++)
     c4e:	1d 82       	std	Y+5, r1	; 0x05
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <LCD_WriteDigit+0xee>
    {
        nibble = seg & 0x000F;
     c52:	8a 85       	ldd	r24, Y+10	; 0x0a
     c54:	8f 70       	andi	r24, 0x0F	; 15
     c56:	88 87       	std	Y+8, r24	; 0x08
        seg >>= 4;
     c58:	8a 85       	ldd	r24, Y+10	; 0x0a
     c5a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c5c:	92 95       	swap	r25
     c5e:	82 95       	swap	r24
     c60:	8f 70       	andi	r24, 0x0F	; 15
     c62:	89 27       	eor	r24, r25
     c64:	9f 70       	andi	r25, 0x0F	; 15
     c66:	89 27       	eor	r24, r25
     c68:	9b 87       	std	Y+11, r25	; 0x0b
     c6a:	8a 87       	std	Y+10, r24	; 0x0a
        if (digit & 0x01)
     c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	81 70       	andi	r24, 0x01	; 1
     c74:	90 70       	andi	r25, 0x00	; 0
     c76:	88 23       	and	r24, r24
     c78:	21 f0       	breq	.+8      	; 0xc82 <LCD_WriteDigit+0xca>
            nibble <<= 4;
     c7a:	88 85       	ldd	r24, Y+8	; 0x08
     c7c:	82 95       	swap	r24
     c7e:	80 7f       	andi	r24, 0xF0	; 240
     c80:	88 87       	std	Y+8, r24	; 0x08
        *ptr = (*ptr & mask) | nibble;
     c82:	ee 81       	ldd	r30, Y+6	; 0x06
     c84:	ff 81       	ldd	r31, Y+7	; 0x07
     c86:	90 81       	ld	r25, Z
     c88:	89 85       	ldd	r24, Y+9	; 0x09
     c8a:	98 23       	and	r25, r24
     c8c:	88 85       	ldd	r24, Y+8	; 0x08
     c8e:	89 2b       	or	r24, r25
     c90:	ee 81       	ldd	r30, Y+6	; 0x06
     c92:	ff 81       	ldd	r31, Y+7	; 0x07
     c94:	80 83       	st	Z, r24
        ptr += 5;
     c96:	8e 81       	ldd	r24, Y+6	; 0x06
     c98:	9f 81       	ldd	r25, Y+7	; 0x07
     c9a:	05 96       	adiw	r24, 0x05	; 5
     c9c:	9f 83       	std	Y+7, r25	; 0x07
     c9e:	8e 83       	std	Y+6, r24	; 0x06
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}

    for (i = 0; i < 4; i++)
     ca0:	8d 81       	ldd	r24, Y+5	; 0x05
     ca2:	8f 5f       	subi	r24, 0xFF	; 255
     ca4:	8d 83       	std	Y+5, r24	; 0x05
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	84 30       	cpi	r24, 0x04	; 4
     caa:	98 f2       	brcs	.-90     	; 0xc52 <LCD_WriteDigit+0x9a>
        if (digit & 0x01)
            nibble <<= 4;
        *ptr = (*ptr & mask) | nibble;
        ptr += 5;
    }
}
     cac:	2d 96       	adiw	r28, 0x0d	; 13
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <LCD_AllSegments>:
*
*   Purpose :       shows or hide all all LCD segments on the LCD
*
*****************************************************************************/
void LCD_AllSegments(char show)
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <LCD_AllSegments+0x6>
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;

    if (show)
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	88 23       	and	r24, r24
     cce:	11 f0       	breq	.+4      	; 0xcd4 <LCD_AllSegments+0x16>
        show = 0xFF;
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	8a 83       	std	Y+2, r24	; 0x02

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
     cd4:	19 82       	std	Y+1, r1	; 0x01
     cd6:	0b c0       	rjmp	.+22     	; 0xcee <LCD_AllSegments+0x30>
        *(LCD_Data + i) = show;
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	fc 01       	movw	r30, r24
     ce0:	e1 5a       	subi	r30, 0xA1	; 161
     ce2:	fc 4f       	sbci	r31, 0xFC	; 252
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	80 83       	st	Z, r24

    if (show)
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	8f 5f       	subi	r24, 0xFF	; 255
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	84 31       	cpi	r24, 0x14	; 20
     cf2:	90 f3       	brcs	.-28     	; 0xcd8 <LCD_AllSegments+0x1a>
        *(LCD_Data + i) = show;
}
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <__vector_22>:
*   Purpose: Latch the LCD_displayData and Set LCD_status.updateComplete
*
*****************************************************************************/

SIGNAL(SIG_LCD)
{
     cfe:	1f 92       	push	r1
     d00:	0f 92       	push	r0
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	2f 93       	push	r18
     d0a:	3f 93       	push	r19
     d0c:	4f 93       	push	r20
     d0e:	5f 93       	push	r21
     d10:	6f 93       	push	r22
     d12:	7f 93       	push	r23
     d14:	8f 93       	push	r24
     d16:	9f 93       	push	r25
     d18:	af 93       	push	r26
     d1a:	bf 93       	push	r27
     d1c:	ef 93       	push	r30
     d1e:	ff 93       	push	r31
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <__vector_22+0x28>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <__vector_22+0x2a>
     d28:	0f 92       	push	r0
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
    char c_flash;
    char flash;

    char EOL;
    unsigned char i;
    LCD_timer--;                    // Decreased every LCD frame
     d2e:	80 91 18 01 	lds	r24, 0x0118
     d32:	81 50       	subi	r24, 0x01	; 1
     d34:	80 93 18 01 	sts	0x0118, r24

    if (gScrollMode)
     d38:	80 91 3c 03 	lds	r24, 0x033C
     d3c:	88 23       	and	r24, r24
     d3e:	91 f0       	breq	.+36     	; 0xd64 <__vector_22+0x66>
    {
        // If we are in scroll mode, and the timer has expired,
        // we will update the LCD
        if (LCD_timer == 0)
     d40:	80 91 18 01 	lds	r24, 0x0118
     d44:	88 23       	and	r24, r24
     d46:	81 f4       	brne	.+32     	; 0xd68 <__vector_22+0x6a>
        {
            if (gLCD_Start_Scroll_Timer == 0)
     d48:	80 91 8b 02 	lds	r24, 0x028B
     d4c:	88 23       	and	r24, r24
     d4e:	21 f4       	brne	.+8      	; 0xd58 <__vector_22+0x5a>
            {
                gLCD_Update_Required = TRUE;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	80 93 8a 02 	sts	0x028A, r24
     d56:	08 c0       	rjmp	.+16     	; 0xd68 <__vector_22+0x6a>
            }
            else
                gLCD_Start_Scroll_Timer--;
     d58:	80 91 8b 02 	lds	r24, 0x028B
     d5c:	81 50       	subi	r24, 0x01	; 1
     d5e:	80 93 8b 02 	sts	0x028B, r24
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__vector_22+0x6a>
    }
    else    
    {   // if not scrolling,
        // disble LCD start of frame interrupt
//        cbi(LCDCRA, LCDIE);   //DEBUG
        gScroll = 0;
     d64:	10 92 8c 03 	sts	0x038C, r1
    }


    EOL = FALSE;
     d68:	1a 82       	std	Y+2, r1	; 0x02
    if (gLCD_Update_Required == TRUE)
     d6a:	80 91 8a 02 	lds	r24, 0x028A
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	09 f0       	breq	.+2      	; 0xd74 <__vector_22+0x76>
     d72:	81 c0       	rjmp	.+258    	; 0xe76 <__vector_22+0x178>
    {
        // Duty cycle of flashing characters
        if (gFlashTimer < (LCD_FLASH_SEED >> 1))
     d74:	80 91 8c 02 	lds	r24, 0x028C
     d78:	85 30       	cpi	r24, 0x05	; 5
     d7a:	10 f4       	brcc	.+4      	; 0xd80 <__vector_22+0x82>
            flash = 0;
     d7c:	1b 82       	std	Y+3, r1	; 0x03
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <__vector_22+0x86>
        else
            flash = 1;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	8b 83       	std	Y+3, r24	; 0x03

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
     d84:	19 82       	std	Y+1, r1	; 0x01
     d86:	43 c0       	rjmp	.+134    	; 0xe0e <__vector_22+0x110>
        {
            if ((gScroll+i) >= 0 && (!EOL))
     d88:	80 91 8c 03 	lds	r24, 0x038C
     d8c:	28 2f       	mov	r18, r24
     d8e:	33 27       	eor	r19, r19
     d90:	27 fd       	sbrc	r18, 7
     d92:	30 95       	com	r19
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	82 0f       	add	r24, r18
     d9c:	93 1f       	adc	r25, r19
     d9e:	99 23       	and	r25, r25
     da0:	14 f1       	brlt	.+68     	; 0xde6 <__vector_22+0xe8>
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	88 23       	and	r24, r24
     da6:	f9 f4       	brne	.+62     	; 0xde6 <__vector_22+0xe8>
            {
                // We have some visible characters
                c = gTextBuffer[i + gScroll];
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	80 91 8c 03 	lds	r24, 0x038C
     db2:	99 27       	eor	r25, r25
     db4:	87 fd       	sbrc	r24, 7
     db6:	90 95       	com	r25
     db8:	82 0f       	add	r24, r18
     dba:	93 1f       	adc	r25, r19
     dbc:	fc 01       	movw	r30, r24
     dbe:	ed 58       	subi	r30, 0x8D	; 141
     dc0:	fc 4f       	sbci	r31, 0xFC	; 252
     dc2:	80 81       	ld	r24, Z
     dc4:	8d 83       	std	Y+5, r24	; 0x05
                c_flash = c & 0x80 ? 1 : 0;
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	1c 82       	std	Y+4, r1	; 0x04
     dca:	88 23       	and	r24, r24
     dcc:	14 f4       	brge	.+4      	; 0xdd2 <__vector_22+0xd4>
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	8c 83       	std	Y+4, r24	; 0x04
                c = c & 0x7F;
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	8f 77       	andi	r24, 0x7F	; 127
     dd6:	8d 83       	std	Y+5, r24	; 0x05

                if (c == '\0')
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	88 23       	and	r24, r24
     ddc:	31 f4       	brne	.+12     	; 0xdea <__vector_22+0xec>
                    EOL = i+1;      // End of character data
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	8a 83       	std	Y+2, r24	; 0x02
     de4:	02 c0       	rjmp	.+4      	; 0xdea <__vector_22+0xec>
            }
            else
                c = ' ';
     de6:	80 e2       	ldi	r24, 0x20	; 32
     de8:	8d 83       	std	Y+5, r24	; 0x05

            // Check if this character is flashing

            if (c_flash && flash)
     dea:	8c 81       	ldd	r24, Y+4	; 0x04
     dec:	88 23       	and	r24, r24
     dee:	41 f0       	breq	.+16     	; 0xe00 <__vector_22+0x102>
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	88 23       	and	r24, r24
     df4:	29 f0       	breq	.+10     	; 0xe00 <__vector_22+0x102>
                LCD_WriteDigit(' ', i);
     df6:	80 e2       	ldi	r24, 0x20	; 32
     df8:	69 81       	ldd	r22, Y+1	; 0x01
     dfa:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <LCD_WriteDigit>
     dfe:	04 c0       	rjmp	.+8      	; 0xe08 <__vector_22+0x10a>
            else
                LCD_WriteDigit(c, i);
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	69 81       	ldd	r22, Y+1	; 0x01
     e04:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <LCD_WriteDigit>
            flash = 0;
        else
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	8f 5f       	subi	r24, 0xFF	; 255
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	86 30       	cpi	r24, 0x06	; 6
     e12:	08 f4       	brcc	.+2      	; 0xe16 <__vector_22+0x118>
     e14:	b9 cf       	rjmp	.-142    	; 0xd88 <__vector_22+0x8a>
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	11 c0       	rjmp	.+34     	; 0xe3c <__vector_22+0x13e>
            *(pLCDREG + i) = *(LCD_Data+i);
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	dc 01       	movw	r26, r24
     e22:	a4 51       	subi	r26, 0x14	; 20
     e24:	bf 4f       	sbci	r27, 0xFF	; 255
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	88 2f       	mov	r24, r24
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	fc 01       	movw	r30, r24
     e2e:	e1 5a       	subi	r30, 0xA1	; 161
     e30:	fc 4f       	sbci	r31, 0xFC	; 252
     e32:	80 81       	ld	r24, Z
     e34:	8c 93       	st	X, r24
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	84 31       	cpi	r24, 0x14	; 20
     e40:	60 f3       	brcs	.-40     	; 0xe1a <__vector_22+0x11c>
            *(pLCDREG + i) = *(LCD_Data+i);

        // Handle colon
        if (gColon)
     e42:	80 91 8d 02 	lds	r24, 0x028D
     e46:	88 23       	and	r24, r24
     e48:	29 f0       	breq	.+10     	; 0xe54 <__vector_22+0x156>
            *(pLCDREG + 8) = 0x01;
     e4a:	e4 ef       	ldi	r30, 0xF4	; 244
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 83       	st	Z, r24
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <__vector_22+0x15c>
        else
            *(pLCDREG + 8) = 0x00;
     e54:	e4 ef       	ldi	r30, 0xF4	; 244
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1

        // If the text scrolled off the display,
        // we have to start over again.
        if (EOL == 1)
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	21 f4       	brne	.+8      	; 0xe68 <__vector_22+0x16a>
            gScroll = -6;
     e60:	8a ef       	ldi	r24, 0xFA	; 250
     e62:	80 93 8c 03 	sts	0x038C, r24
     e66:	05 c0       	rjmp	.+10     	; 0xe72 <__vector_22+0x174>
        else
            gScroll++;
     e68:	80 91 8c 03 	lds	r24, 0x038C
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	80 93 8c 03 	sts	0x038C, r24

        // No need to update anymore
        gLCD_Update_Required = FALSE;
     e72:	10 92 8a 02 	sts	0x028A, r1
    }


    // LCD_timer is used when scrolling text
    if (LCD_timer == 0)
     e76:	80 91 18 01 	lds	r24, 0x0118
     e7a:	88 23       	and	r24, r24
     e7c:	19 f4       	brne	.+6      	; 0xe84 <__vector_22+0x186>
    {
/*        if ((gScroll <= 0) || EOL)
            LCD_timer = LCD_TIMER_SEED/2;
        else*/
            LCD_timer = LCD_TIMER_SEED;
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	80 93 18 01 	sts	0x0118, r24
    }

    // gFlashTimer is used when flashing characters
    if (gFlashTimer == LCD_FLASH_SEED)
     e84:	80 91 8c 02 	lds	r24, 0x028C
     e88:	8a 30       	cpi	r24, 0x0A	; 10
     e8a:	19 f4       	brne	.+6      	; 0xe92 <__vector_22+0x194>
        gFlashTimer= 0;
     e8c:	10 92 8c 02 	sts	0x028C, r1
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <__vector_22+0x19e>
    else
        gFlashTimer++;
     e92:	80 91 8c 02 	lds	r24, 0x028C
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	80 93 8c 02 	sts	0x028C, r24

}
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <LCD_puts_f>:
*
*****************************************************************************/

// mt void LCD_puts_f(char __flash *pFlashStr, char scrollmode)
void LCD_puts_f(const char *pFlashStr )
{	
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	29 97       	sbiw	r28, 0x09	; 9
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	99 87       	std	Y+9, r25	; 0x09
     ee2:	88 87       	std	Y+8, r24	; 0x08
uint8_t i;
////////////////////////////////
enter = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	80 93 8e 02 	sts	0x028E, r24
	if(enter)
     eea:	80 91 8e 02 	lds	r24, 0x028E
     eee:	88 23       	and	r24, r24
     ef0:	09 f4       	brne	.+2      	; 0xef4 <LCD_puts_f+0x28>
     ef2:	4d c0       	rjmp	.+154    	; 0xf8e <LCD_puts_f+0xc2>
    {
        enter = 0;
     ef4:	10 92 8e 02 	sts	0x028E, r1
    //} CLOSE DOWN
////////////////////////////////
    // char i;


    while (gLCD_Update_Required);      // Wait for access to buffer
     ef8:	80 91 8a 02 	lds	r24, 0x028A
     efc:	88 23       	and	r24, r24
     efe:	e1 f7       	brne	.-8      	; 0xef8 <LCD_puts_f+0x2c>

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
     f00:	1f 82       	std	Y+7, r1	; 0x07
     f02:	18 c0       	rjmp	.+48     	; 0xf34 <LCD_puts_f+0x68>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
     f04:	8f 81       	ldd	r24, Y+7	; 0x07
     f06:	48 2f       	mov	r20, r24
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	8f 81       	ldd	r24, Y+7	; 0x07
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	88 85       	ldd	r24, Y+8	; 0x08
     f12:	99 85       	ldd	r25, Y+9	; 0x09
     f14:	82 0f       	add	r24, r18
     f16:	93 1f       	adc	r25, r19
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	ed 81       	ldd	r30, Y+5	; 0x05
     f1e:	fe 81       	ldd	r31, Y+6	; 0x06
     f20:	84 91       	lpm	r24, Z+
     f22:	8c 83       	std	Y+4, r24	; 0x04
     f24:	8c 81       	ldd	r24, Y+4	; 0x04
     f26:	fa 01       	movw	r30, r20
     f28:	ed 58       	subi	r30, 0x8D	; 141
     f2a:	fc 4f       	sbci	r31, 0xFC	; 252
     f2c:	80 83       	st	Z, r24


    while (gLCD_Update_Required);      // Wait for access to buffer

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
     f2e:	8f 81       	ldd	r24, Y+7	; 0x07
     f30:	8f 5f       	subi	r24, 0xFF	; 255
     f32:	8f 83       	std	Y+7, r24	; 0x07
     f34:	8f 81       	ldd	r24, Y+7	; 0x07
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	88 85       	ldd	r24, Y+8	; 0x08
     f3c:	99 85       	ldd	r25, Y+9	; 0x09
     f3e:	82 0f       	add	r24, r18
     f40:	93 1f       	adc	r25, r19
     f42:	9b 83       	std	Y+3, r25	; 0x03
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	ea 81       	ldd	r30, Y+2	; 0x02
     f48:	fb 81       	ldd	r31, Y+3	; 0x03
     f4a:	84 91       	lpm	r24, Z+
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	88 23       	and	r24, r24
     f52:	19 f0       	breq	.+6      	; 0xf5a <LCD_puts_f+0x8e>
     f54:	8f 81       	ldd	r24, Y+7	; 0x07
     f56:	89 31       	cpi	r24, 0x19	; 25
     f58:	a8 f2       	brcs	.-86     	; 0xf04 <LCD_puts_f+0x38>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
    }

    gTextBuffer[i] = '\0';
     f5a:	8f 81       	ldd	r24, Y+7	; 0x07
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	fc 01       	movw	r30, r24
     f62:	ed 58       	subi	r30, 0x8D	; 141
     f64:	fc 4f       	sbci	r31, 0xFC	; 252
     f66:	10 82       	st	Z, r1

    if (i > 6)
     f68:	8f 81       	ldd	r24, Y+7	; 0x07
     f6a:	87 30       	cpi	r24, 0x07	; 7
     f6c:	48 f0       	brcs	.+18     	; 0xf80 <LCD_puts_f+0xb4>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	80 93 3c 03 	sts	0x033C, r24
        gScroll = 0;
     f74:	10 92 8c 03 	sts	0x038C, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	80 93 8b 02 	sts	0x028B, r24
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <LCD_puts_f+0xbc>
    }
    else
    {
        gScrollMode = 0;        
     f80:	10 92 3c 03 	sts	0x033C, r1
        gScroll = 0;
     f84:	10 92 8c 03 	sts	0x038C, r1
    }

    gLCD_Update_Required = 1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 8a 02 	sts	0x028A, r24
}
}//CLOSE DOWN
     f8e:	29 96       	adiw	r28, 0x09	; 9
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     fa0:	1f 92       	push	r1
     fa2:	0f 92       	push	r0
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	0f 92       	push	r0
     fa8:	11 24       	eor	r1, r1
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <__vector_13+0x18>
     fb8:	00 d0       	rcall	.+0      	; 0xfba <__vector_13+0x1a>
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
     fbe:	e0 ec       	ldi	r30, 0xC0	; 192
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
     fc6:	e6 ec       	ldi	r30, 0xC6	; 198
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8b 83       	std	Y+3, r24	; 0x03

    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	88 71       	andi	r24, 0x18	; 24
     fd2:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     fd4:	80 91 31 03 	lds	r24, 0x0331
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
     fda:	8f 77       	andi	r24, 0x7F	; 127
     fdc:	8c 83       	std	Y+4, r24	; 0x04

    if ( tmphead == UART_RxTail ) {
     fde:	90 91 32 03 	lds	r25, 0x0332
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	89 17       	cp	r24, r25
     fe6:	19 f4       	brne	.+6      	; 0xfee <__vector_13+0x4e>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	0b c0       	rjmp	.+22     	; 0x1004 <__vector_13+0x64>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	80 93 31 03 	sts	0x0331, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	88 2f       	mov	r24, r24
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	fc 01       	movw	r30, r24
     ffc:	e1 55       	subi	r30, 0x51	; 81
     ffe:	fd 4f       	sbci	r31, 0xFD	; 253
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	80 83       	st	Z, r24
    }
    UART_LastRxError = lastRxError;
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	80 93 33 03 	sts	0x0333, r24
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	9f 91       	pop	r25
    101c:	8f 91       	pop	r24
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	8f 93       	push	r24
    1034:	9f 93       	push	r25
    1036:	af 93       	push	r26
    1038:	bf 93       	push	r27
    103a:	ef 93       	push	r30
    103c:	ff 93       	push	r31
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;


    if ( UART_TxHead != UART_TxTail) {
    1048:	90 91 2f 03 	lds	r25, 0x032F
    104c:	80 91 30 03 	lds	r24, 0x0330
    1050:	98 17       	cp	r25, r24
    1052:	99 f0       	breq	.+38     	; 0x107a <__vector_14+0x52>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1054:	80 91 30 03 	lds	r24, 0x0330
    1058:	8f 5f       	subi	r24, 0xFF	; 255
    105a:	8f 71       	andi	r24, 0x1F	; 31
    105c:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	80 93 30 03 	sts	0x0330, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1064:	a6 ec       	ldi	r26, 0xC6	; 198
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	fc 01       	movw	r30, r24
    1070:	e1 57       	subi	r30, 0x71	; 113
    1072:	fd 4f       	sbci	r31, 0xFD	; 253
    1074:	80 81       	ld	r24, Z
    1076:	8c 93       	st	X, r24
    1078:	07 c0       	rjmp	.+14     	; 0x1088 <__vector_14+0x60>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    107a:	a1 ec       	ldi	r26, 0xC1	; 193
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e1 ec       	ldi	r30, 0xC1	; 193
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8f 7d       	andi	r24, 0xDF	; 223
    1086:	8c 93       	st	X, r24
    }
}
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	0f 90       	pop	r0
    10a0:	1f 90       	pop	r1
    10a2:	18 95       	reti

000010a4 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <uart_init+0x6>
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
    10b2:	10 92 2f 03 	sts	0x032F, r1
    UART_TxTail = 0;
    10b6:	10 92 30 03 	sts	0x0330, r1
    UART_RxHead = 0;
    10ba:	10 92 31 03 	sts	0x0331, r1
    UART_RxTail = 0;
    10be:	10 92 32 03 	sts	0x0332, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	99 23       	and	r25, r25
    10c8:	4c f4       	brge	.+18     	; 0x10dc <uart_init+0x38>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed
    10ca:	e0 ec       	ldi	r30, 0xC0	; 192
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	80 83       	st	Z, r24
    	 baudrate &= ~0x8000;
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	9f 77       	andi	r25, 0x7F	; 127
    10d8:	9a 83       	std	Y+2, r25	; 0x02
    10da:	89 83       	std	Y+1, r24	; 0x01
    }
    UBRRH = (unsigned char)(baudrate>>8);
    10dc:	e5 ec       	ldi	r30, 0xC5	; 197
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	89 2f       	mov	r24, r25
    10e6:	99 27       	eor	r25, r25
    10e8:	80 83       	st	Z, r24
    UBRRL = (unsigned char) baudrate;
    10ea:	e4 ec       	ldi	r30, 0xC4	; 196
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	80 83       	st	Z, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
    10f2:	e1 ec       	ldi	r30, 0xC1	; 193
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	88 e9       	ldi	r24, 0x98	; 152
    10f8:	80 83       	st	Z, r24

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
    #else
    UCSRC = (3<<UCSZ0);
    10fa:	e2 ec       	ldi	r30, 0xC2	; 194
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	86 e0       	ldi	r24, 0x06	; 6
    1100:	80 83       	st	Z, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <uart_getc>:
Purpose:  return byte from ringbuffer
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <uart_getc+0x6>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <uart_getc+0x8>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    1118:	90 91 31 03 	lds	r25, 0x0331
    111c:	80 91 32 03 	lds	r24, 0x0332
    1120:	98 17       	cp	r25, r24
    1122:	29 f4       	brne	.+10     	; 0x112e <uart_getc+0x22>
        return UART_NO_DATA;   /* no data available */
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	1d c0       	rjmp	.+58     	; 0x1168 <uart_getc+0x5c>
    }

    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    112e:	80 91 32 03 	lds	r24, 0x0332
    1132:	8f 5f       	subi	r24, 0xFF	; 255
    1134:	8f 77       	andi	r24, 0x7F	; 127
    1136:	8a 83       	std	Y+2, r24	; 0x02
    UART_RxTail = tmptail;
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	80 93 32 03 	sts	0x0332, r24

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	fc 01       	movw	r30, r24
    1146:	e1 55       	subi	r30, 0x51	; 81
    1148:	fd 4f       	sbci	r31, 0xFD	; 253
    114a:	80 81       	ld	r24, Z
    114c:	89 83       	std	Y+1, r24	; 0x01

    return (UART_LastRxError << 8) + data;
    114e:	80 91 33 03 	lds	r24, 0x0333
    1152:	88 2f       	mov	r24, r24
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	38 2f       	mov	r19, r24
    1158:	22 27       	eor	r18, r18
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	82 0f       	add	r24, r18
    1162:	93 1f       	adc	r25, r19
    1164:	9c 83       	std	Y+4, r25	; 0x04
    1166:	8b 83       	std	Y+3, r24	; 0x03
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none
**************************************************************************/
void uart_putc(unsigned char data)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <uart_putc+0x6>
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;


    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1186:	80 91 2f 03 	lds	r24, 0x032F
    118a:	8f 5f       	subi	r24, 0xFF	; 255
    118c:	8f 71       	andi	r24, 0x1F	; 31
    118e:	89 83       	std	Y+1, r24	; 0x01

    while ( tmphead == UART_TxTail ){
    1190:	90 91 30 03 	lds	r25, 0x0330
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	89 17       	cp	r24, r25
    1198:	d9 f3       	breq	.-10     	; 0x1190 <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	fc 01       	movw	r30, r24
    11a2:	e1 57       	subi	r30, 0x71	; 113
    11a4:	fd 4f       	sbci	r31, 0xFD	; 253
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	80 93 2f 03 	sts	0x032F, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    11b0:	a1 ec       	ldi	r26, 0xC1	; 193
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e1 ec       	ldi	r30, 0xC1	; 193
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	80 62       	ori	r24, 0x20	; 32
    11bc:	8c 93       	st	X, r24

}/* uart_putc */
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts(const char *s )
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <uart_puts+0x6>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	9a 83       	std	Y+2, r25	; 0x02
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	0b c0       	rjmp	.+22     	; 0x11ee <uart_puts+0x26>
    while (*s)
      uart_putc(*s++);
    11d8:	e9 81       	ldd	r30, Y+1	; 0x01
    11da:	fa 81       	ldd	r31, Y+2	; 0x02
    11dc:	20 81       	ld	r18, Z
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	82 2f       	mov	r24, r18
    11ea:	0e 94 bd 08 	call	0x117a	; 0x117a <uart_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s)
    11ee:	e9 81       	ldd	r30, Y+1	; 0x01
    11f0:	fa 81       	ldd	r31, Y+2	; 0x02
    11f2:	80 81       	ld	r24, Z
    11f4:	88 23       	and	r24, r24
    11f6:	81 f7       	brne	.-32     	; 0x11d8 <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <uart_puts_p+0x6>
    1208:	00 d0       	rcall	.+0      	; 0x120a <uart_puts_p+0x8>
    120a:	00 d0       	rcall	.+0      	; 0x120c <uart_puts_p+0xa>
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	9d 83       	std	Y+5, r25	; 0x05
    1212:	8c 83       	std	Y+4, r24	; 0x04
    1214:	03 c0       	rjmp	.+6      	; 0x121c <uart_puts_p+0x1a>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
      uart_putc(c);
    1216:	8e 81       	ldd	r24, Y+6	; 0x06
    1218:	0e 94 bd 08 	call	0x117a	; 0x117a <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	9b 83       	std	Y+3, r25	; 0x03
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	9d 83       	std	Y+5, r25	; 0x05
    122c:	8c 83       	std	Y+4, r24	; 0x04
    122e:	ea 81       	ldd	r30, Y+2	; 0x02
    1230:	fb 81       	ldd	r31, Y+3	; 0x03
    1232:	84 91       	lpm	r24, Z+
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	8e 83       	std	Y+6, r24	; 0x06
    123a:	8e 81       	ldd	r24, Y+6	; 0x06
    123c:	88 23       	and	r24, r24
    123e:	59 f7       	brne	.-42     	; 0x1216 <uart_puts_p+0x14>
      uart_putc(c);

}/* uart_puts_p */
    1240:	26 96       	adiw	r28, 0x06	; 6
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <uart_read_line>:
}/* uart1_puts_p */


#endif
void uart_read_line(unsigned char * c_array, uint8_t max, int try_sec)
{
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	2f 97       	sbiw	r28, 0x0f	; 15
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	9b 87       	std	Y+11, r25	; 0x0b
    126c:	8a 87       	std	Y+10, r24	; 0x0a
    126e:	6c 87       	std	Y+12, r22	; 0x0c
    1270:	5e 87       	std	Y+14, r21	; 0x0e
    1272:	4d 87       	std	Y+13, r20	; 0x0d
	uint8_t i=0;
    1274:	19 86       	std	Y+9, r1	; 0x09
	unsigned long z = 0, tries = F_CPU / 160UL * try_sec + 10*max;
    1276:	1d 82       	std	Y+5, r1	; 0x05
    1278:	1e 82       	std	Y+6, r1	; 0x06
    127a:	1f 82       	std	Y+7, r1	; 0x07
    127c:	18 86       	std	Y+8, r1	; 0x08
    127e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1280:	9e 85       	ldd	r25, Y+14	; 0x0e
    1282:	aa 27       	eor	r26, r26
    1284:	97 fd       	sbrc	r25, 7
    1286:	a0 95       	com	r26
    1288:	ba 2f       	mov	r27, r26
    128a:	24 ed       	ldi	r18, 0xD4	; 212
    128c:	30 e3       	ldi	r19, 0x30	; 48
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 8c 1c 	call	0x3918	; 0x3918 <__mulsi3>
    129a:	ab 01       	movw	r20, r22
    129c:	bc 01       	movw	r22, r24
    129e:	8c 85       	ldd	r24, Y+12	; 0x0c
    12a0:	88 2f       	mov	r24, r24
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	9c 01       	movw	r18, r24
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	c9 01       	movw	r24, r18
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	82 0f       	add	r24, r18
    12b6:	93 1f       	adc	r25, r19
    12b8:	aa 27       	eor	r26, r26
    12ba:	97 fd       	sbrc	r25, 7
    12bc:	a0 95       	com	r26
    12be:	ba 2f       	mov	r27, r26
    12c0:	84 0f       	add	r24, r20
    12c2:	95 1f       	adc	r25, r21
    12c4:	a6 1f       	adc	r26, r22
    12c6:	b7 1f       	adc	r27, r23
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	ab 83       	std	Y+3, r26	; 0x03
    12ce:	bc 83       	std	Y+4, r27	; 0x04
	c_array[0] = 0;
    12d0:	ea 85       	ldd	r30, Y+10	; 0x0a
    12d2:	fb 85       	ldd	r31, Y+11	; 0x0b
    12d4:	10 82       	st	Z, r1

	while(1)
	{
		if(z++ > tries) return;							// Timeout: give up after <try_sec> seconds
    12d6:	1f 86       	std	Y+15, r1	; 0x0f
    12d8:	2d 81       	ldd	r18, Y+5	; 0x05
    12da:	3e 81       	ldd	r19, Y+6	; 0x06
    12dc:	4f 81       	ldd	r20, Y+7	; 0x07
    12de:	58 85       	ldd	r21, Y+8	; 0x08
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	ab 81       	ldd	r26, Y+3	; 0x03
    12e6:	bc 81       	ldd	r27, Y+4	; 0x04
    12e8:	82 17       	cp	r24, r18
    12ea:	93 07       	cpc	r25, r19
    12ec:	a4 07       	cpc	r26, r20
    12ee:	b5 07       	cpc	r27, r21
    12f0:	10 f4       	brcc	.+4      	; 0x12f6 <uart_read_line+0xa4>
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	8f 87       	std	Y+15, r24	; 0x0f
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	af 81       	ldd	r26, Y+7	; 0x07
    12fc:	b8 85       	ldd	r27, Y+8	; 0x08
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	a1 1d       	adc	r26, r1
    1302:	b1 1d       	adc	r27, r1
    1304:	8d 83       	std	Y+5, r24	; 0x05
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	af 83       	std	Y+7, r26	; 0x07
    130a:	b8 87       	std	Y+8, r27	; 0x08
    130c:	ef 85       	ldd	r30, Y+15	; 0x0f
    130e:	ee 23       	and	r30, r30
    1310:	09 f0       	breq	.+2      	; 0x1314 <uart_read_line+0xc2>
    1312:	4c c0       	rjmp	.+152    	; 0x13ac <uart_read_line+0x15a>
		c_array[i]=uart_getc();
    1314:	89 85       	ldd	r24, Y+9	; 0x09
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	8a 85       	ldd	r24, Y+10	; 0x0a
    131c:	9b 85       	ldd	r25, Y+11	; 0x0b
    131e:	8c 01       	movw	r16, r24
    1320:	02 0f       	add	r16, r18
    1322:	13 1f       	adc	r17, r19
    1324:	0e 94 86 08 	call	0x110c	; 0x110c <uart_getc>
    1328:	f8 01       	movw	r30, r16
    132a:	80 83       	st	Z, r24
		if(c_array[i]!=0 && c_array[i]!=10) // A (non-LF) character was received
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	8a 85       	ldd	r24, Y+10	; 0x0a
    1334:	9b 85       	ldd	r25, Y+11	; 0x0b
    1336:	fc 01       	movw	r30, r24
    1338:	e2 0f       	add	r30, r18
    133a:	f3 1f       	adc	r31, r19
    133c:	80 81       	ld	r24, Z
    133e:	88 23       	and	r24, r24
    1340:	51 f2       	breq	.-108    	; 0x12d6 <uart_read_line+0x84>
    1342:	89 85       	ldd	r24, Y+9	; 0x09
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	8a 85       	ldd	r24, Y+10	; 0x0a
    134a:	9b 85       	ldd	r25, Y+11	; 0x0b
    134c:	fc 01       	movw	r30, r24
    134e:	e2 0f       	add	r30, r18
    1350:	f3 1f       	adc	r31, r19
    1352:	80 81       	ld	r24, Z
    1354:	8a 30       	cpi	r24, 0x0A	; 10
    1356:	09 f4       	brne	.+2      	; 0x135a <uart_read_line+0x108>
    1358:	be cf       	rjmp	.-132    	; 0x12d6 <uart_read_line+0x84>
																				// A possible LF from last sentence is skipped
		{
			if(c_array[i]==13 || i==max)
    135a:	89 85       	ldd	r24, Y+9	; 0x09
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	8a 85       	ldd	r24, Y+10	; 0x0a
    1362:	9b 85       	ldd	r25, Y+11	; 0x0b
    1364:	fc 01       	movw	r30, r24
    1366:	e2 0f       	add	r30, r18
    1368:	f3 1f       	adc	r31, r19
    136a:	80 81       	ld	r24, Z
    136c:	8d 30       	cpi	r24, 0x0D	; 13
    136e:	21 f0       	breq	.+8      	; 0x1378 <uart_read_line+0x126>
    1370:	99 85       	ldd	r25, Y+9	; 0x09
    1372:	8c 85       	ldd	r24, Y+12	; 0x0c
    1374:	98 17       	cp	r25, r24
    1376:	51 f4       	brne	.+20     	; 0x138c <uart_read_line+0x13a>
				{c_array[i]=0; break;}
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1380:	9b 85       	ldd	r25, Y+11	; 0x0b
    1382:	fc 01       	movw	r30, r24
    1384:	e2 0f       	add	r30, r18
    1386:	f3 1f       	adc	r31, r19
    1388:	10 82       	st	Z, r1
    138a:	10 c0       	rjmp	.+32     	; 0x13ac <uart_read_line+0x15a>
			else if(c_array[i])
    138c:	89 85       	ldd	r24, Y+9	; 0x09
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8a 85       	ldd	r24, Y+10	; 0x0a
    1394:	9b 85       	ldd	r25, Y+11	; 0x0b
    1396:	fc 01       	movw	r30, r24
    1398:	e2 0f       	add	r30, r18
    139a:	f3 1f       	adc	r31, r19
    139c:	80 81       	ld	r24, Z
    139e:	88 23       	and	r24, r24
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <uart_read_line+0x152>
    13a2:	99 cf       	rjmp	.-206    	; 0x12d6 <uart_read_line+0x84>
				i++;
    13a4:	89 85       	ldd	r24, Y+9	; 0x09
    13a6:	8f 5f       	subi	r24, 0xFF	; 255
    13a8:	89 87       	std	Y+9, r24	; 0x09
    13aa:	95 cf       	rjmp	.-214    	; 0x12d6 <uart_read_line+0x84>
		}
	}
}
    13ac:	2f 96       	adiw	r28, 0x0f	; 15
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	08 95       	ret

000013c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>:
	} 
	return;
} 
*/

void WAIT_FOR_RELEASE_JOYSTICK_ALL() {
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62

  WAIT_FOR_RELEASE_JOYSTICK_RIGHT
    13ca:	ec e2       	ldi	r30, 0x2C	; 44
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	88 70       	andi	r24, 0x08	; 8
    13d6:	90 70       	andi	r25, 0x00	; 0
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	b9 f3       	breq	.-18     	; 0x13ca <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x8>
  WAIT_FOR_RELEASE_JOYSTICK_LEFT
    13dc:	ec e2       	ldi	r30, 0x2C	; 44
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	84 70       	andi	r24, 0x04	; 4
    13e8:	90 70       	andi	r25, 0x00	; 0
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	b9 f3       	breq	.-18     	; 0x13dc <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x1a>
  WAIT_FOR_RELEASE_JOYSTICK_UP
    13ee:	e3 e2       	ldi	r30, 0x23	; 35
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	80 74       	andi	r24, 0x40	; 64
    13fa:	90 70       	andi	r25, 0x00	; 0
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	b9 f3       	breq	.-18     	; 0x13ee <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x2c>
  WAIT_FOR_RELEASE_JOYSTICK_DOWN
    1400:	e3 e2       	ldi	r30, 0x23	; 35
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	88 23       	and	r24, r24
    1408:	dc f7       	brge	.-10     	; 0x1400 <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x3e>
  WAIT_FOR_RELEASE_JOYSTICK_CENTER
    140a:	e3 e2       	ldi	r30, 0x23	; 35
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	80 71       	andi	r24, 0x10	; 16
    1416:	90 70       	andi	r25, 0x00	; 0
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	b9 f3       	breq	.-18     	; 0x140a <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x48>
  return;
}
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <set_volume>:

void set_volume(int a, int *volume) {
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	61 97       	sbiw	r28, 0x11	; 17
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	9e 83       	std	Y+6, r25	; 0x06
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	78 87       	std	Y+8, r23	; 0x08
    1440:	6f 83       	std	Y+7, r22	; 0x07
  *volume = *volume + a;
    1442:	ef 81       	ldd	r30, Y+7	; 0x07
    1444:	f8 85       	ldd	r31, Y+8	; 0x08
    1446:	20 81       	ld	r18, Z
    1448:	31 81       	ldd	r19, Z+1	; 0x01
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	82 0f       	add	r24, r18
    1450:	93 1f       	adc	r25, r19
    1452:	ef 81       	ldd	r30, Y+7	; 0x07
    1454:	f8 85       	ldd	r31, Y+8	; 0x08
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	80 83       	st	Z, r24
  if (*volume >= 100) *volume = 100;
    145a:	ef 81       	ldd	r30, Y+7	; 0x07
    145c:	f8 85       	ldd	r31, Y+8	; 0x08
    145e:	80 81       	ld	r24, Z
    1460:	91 81       	ldd	r25, Z+1	; 0x01
    1462:	84 36       	cpi	r24, 0x64	; 100
    1464:	91 05       	cpc	r25, r1
    1466:	3c f0       	brlt	.+14     	; 0x1476 <set_volume+0x54>
    1468:	ef 81       	ldd	r30, Y+7	; 0x07
    146a:	f8 85       	ldd	r31, Y+8	; 0x08
    146c:	84 e6       	ldi	r24, 0x64	; 100
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	91 83       	std	Z+1, r25	; 0x01
    1472:	80 83       	st	Z, r24
    1474:	0b c0       	rjmp	.+22     	; 0x148c <set_volume+0x6a>
  else if (*volume <= 0) *volume = 0;
    1476:	ef 81       	ldd	r30, Y+7	; 0x07
    1478:	f8 85       	ldd	r31, Y+8	; 0x08
    147a:	80 81       	ld	r24, Z
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	18 16       	cp	r1, r24
    1480:	19 06       	cpc	r1, r25
    1482:	24 f0       	brlt	.+8      	; 0x148c <set_volume+0x6a>
    1484:	ef 81       	ldd	r30, Y+7	; 0x07
    1486:	f8 85       	ldd	r31, Y+8	; 0x08
    1488:	11 82       	std	Z+1, r1	; 0x01
    148a:	10 82       	st	Z, r1
  BEEP_VOLUME(*volume)
    148c:	e9 e8       	ldi	r30, 0x89	; 137
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	10 82       	st	Z, r1
    1492:	a8 e8       	ldi	r26, 0x88	; 136
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ef 81       	ldd	r30, Y+7	; 0x07
    1498:	f8 85       	ldd	r31, Y+8	; 0x08
    149a:	80 81       	ld	r24, Z
    149c:	91 81       	ldd	r25, Z+1	; 0x01
    149e:	8c 93       	st	X, r24
  BEEP(246.942, 0.2) //beep with frequency 246.942 --> tone h for 0.25sec
    14a0:	86 ef       	ldi	r24, 0xF6	; 246
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
  LCD_D_NUMBER(*volume,3,0)	
    14ac:	ef 81       	ldd	r30, Y+7	; 0x07
    14ae:	f8 85       	ldd	r31, Y+8	; 0x08
    14b0:	80 81       	ld	r24, Z
    14b2:	91 81       	ldd	r25, Z+1	; 0x01
    14b4:	aa 27       	eor	r26, r26
    14b6:	97 fd       	sbrc	r25, 7
    14b8:	a0 95       	com	r26
    14ba:	ba 2f       	mov	r27, r26
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__floatsisf>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	ed e3       	ldi	r30, 0x3D	; 61
    14ca:	f3 e0       	ldi	r31, 0x03	; 3
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	43 e0       	ldi	r20, 0x03	; 3
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	8f 01       	movw	r16, r30
    14d6:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <dtostrf>
    14da:	8d e3       	ldi	r24, 0x3D	; 61
    14dc:	93 e0       	ldi	r25, 0x03	; 3
    14de:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
  int j = 0;
    14e2:	1c 82       	std	Y+4, r1	; 0x04
    14e4:	1b 82       	std	Y+3, r1	; 0x03
    14e6:	6d c0       	rjmp	.+218    	; 0x15c2 <set_volume+0x1a0>
  while ( (!(PINE & (1 << 2)) & (*volume > 0)) | (!(PINE & (1 << 3)) & (*volume < 100)) ) {
  	for (int i = 0; i<500; i++) ;
    14e8:	1a 82       	std	Y+2, r1	; 0x02
    14ea:	19 82       	std	Y+1, r1	; 0x01
    14ec:	05 c0       	rjmp	.+10     	; 0x14f8 <set_volume+0xd6>
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	9a 83       	std	Y+2, r25	; 0x02
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	21 e0       	ldi	r18, 0x01	; 1
    14fe:	84 3f       	cpi	r24, 0xF4	; 244
    1500:	92 07       	cpc	r25, r18
    1502:	ac f3       	brlt	.-22     	; 0x14ee <set_volume+0xcc>
	j = j + 1;
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	9c 83       	std	Y+4, r25	; 0x04
    150c:	8b 83       	std	Y+3, r24	; 0x03
	if (j > 60) {
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	8d 33       	cpi	r24, 0x3D	; 61
    1514:	91 05       	cpc	r25, r1
    1516:	0c f4       	brge	.+2      	; 0x151a <set_volume+0xf8>
    1518:	54 c0       	rjmp	.+168    	; 0x15c2 <set_volume+0x1a0>
		*volume = *volume + a;
    151a:	ef 81       	ldd	r30, Y+7	; 0x07
    151c:	f8 85       	ldd	r31, Y+8	; 0x08
    151e:	20 81       	ld	r18, Z
    1520:	31 81       	ldd	r19, Z+1	; 0x01
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	82 0f       	add	r24, r18
    1528:	93 1f       	adc	r25, r19
    152a:	ef 81       	ldd	r30, Y+7	; 0x07
    152c:	f8 85       	ldd	r31, Y+8	; 0x08
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24
		if (*volume >= 100) *volume = 100;
    1532:	ef 81       	ldd	r30, Y+7	; 0x07
    1534:	f8 85       	ldd	r31, Y+8	; 0x08
    1536:	80 81       	ld	r24, Z
    1538:	91 81       	ldd	r25, Z+1	; 0x01
    153a:	84 36       	cpi	r24, 0x64	; 100
    153c:	91 05       	cpc	r25, r1
    153e:	3c f0       	brlt	.+14     	; 0x154e <set_volume+0x12c>
    1540:	ef 81       	ldd	r30, Y+7	; 0x07
    1542:	f8 85       	ldd	r31, Y+8	; 0x08
    1544:	84 e6       	ldi	r24, 0x64	; 100
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	91 83       	std	Z+1, r25	; 0x01
    154a:	80 83       	st	Z, r24
    154c:	0b c0       	rjmp	.+22     	; 0x1564 <set_volume+0x142>
		else if (*volume <= 0) *volume = 0;
    154e:	ef 81       	ldd	r30, Y+7	; 0x07
    1550:	f8 85       	ldd	r31, Y+8	; 0x08
    1552:	80 81       	ld	r24, Z
    1554:	91 81       	ldd	r25, Z+1	; 0x01
    1556:	18 16       	cp	r1, r24
    1558:	19 06       	cpc	r1, r25
    155a:	24 f0       	brlt	.+8      	; 0x1564 <set_volume+0x142>
    155c:	ef 81       	ldd	r30, Y+7	; 0x07
    155e:	f8 85       	ldd	r31, Y+8	; 0x08
    1560:	11 82       	std	Z+1, r1	; 0x01
    1562:	10 82       	st	Z, r1
		BEEP_VOLUME(*volume)
    1564:	e9 e8       	ldi	r30, 0x89	; 137
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	10 82       	st	Z, r1
    156a:	a8 e8       	ldi	r26, 0x88	; 136
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	ef 81       	ldd	r30, Y+7	; 0x07
    1570:	f8 85       	ldd	r31, Y+8	; 0x08
    1572:	80 81       	ld	r24, Z
    1574:	91 81       	ldd	r25, Z+1	; 0x01
    1576:	8c 93       	st	X, r24
		BEEP(246.942, 0.2) //beep with frequency 246.942 --> tone h for 0.25sec
    1578:	86 ef       	ldi	r24, 0xF6	; 246
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_D_NUMBER(*volume,3,0)
    1584:	ef 81       	ldd	r30, Y+7	; 0x07
    1586:	f8 85       	ldd	r31, Y+8	; 0x08
    1588:	80 81       	ld	r24, Z
    158a:	91 81       	ldd	r25, Z+1	; 0x01
    158c:	aa 27       	eor	r26, r26
    158e:	97 fd       	sbrc	r25, 7
    1590:	a0 95       	com	r26
    1592:	ba 2f       	mov	r27, r26
    1594:	bc 01       	movw	r22, r24
    1596:	cd 01       	movw	r24, r26
    1598:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__floatsisf>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	ed e3       	ldi	r30, 0x3D	; 61
    15a2:	f3 e0       	ldi	r31, 0x03	; 3
    15a4:	bc 01       	movw	r22, r24
    15a6:	cd 01       	movw	r24, r26
    15a8:	43 e0       	ldi	r20, 0x03	; 3
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	8f 01       	movw	r16, r30
    15ae:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <dtostrf>
    15b2:	8d e3       	ldi	r24, 0x3D	; 61
    15b4:	93 e0       	ldi	r25, 0x03	; 3
    15b6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		j = 55;
    15ba:	87 e3       	ldi	r24, 0x37	; 55
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9c 83       	std	Y+4, r25	; 0x04
    15c0:	8b 83       	std	Y+3, r24	; 0x03
  else if (*volume <= 0) *volume = 0;
  BEEP_VOLUME(*volume)
  BEEP(246.942, 0.2) //beep with frequency 246.942 --> tone h for 0.25sec
  LCD_D_NUMBER(*volume,3,0)	
  int j = 0;
  while ( (!(PINE & (1 << 2)) & (*volume > 0)) | (!(PINE & (1 << 3)) & (*volume < 100)) ) {
    15c2:	ec e2       	ldi	r30, 0x2C	; 44
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	88 2f       	mov	r24, r24
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	84 70       	andi	r24, 0x04	; 4
    15ce:	90 70       	andi	r25, 0x00	; 0
    15d0:	19 8a       	std	Y+17, r1	; 0x11
    15d2:	18 8a       	std	Y+16, r1	; 0x10
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	21 f4       	brne	.+8      	; 0x15e0 <set_volume+0x1be>
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	99 8b       	std	Y+17, r25	; 0x11
    15de:	88 8b       	std	Y+16, r24	; 0x10
    15e0:	ef 81       	ldd	r30, Y+7	; 0x07
    15e2:	f8 85       	ldd	r31, Y+8	; 0x08
    15e4:	80 81       	ld	r24, Z
    15e6:	91 81       	ldd	r25, Z+1	; 0x01
    15e8:	1f 86       	std	Y+15, r1	; 0x0f
    15ea:	1e 86       	std	Y+14, r1	; 0x0e
    15ec:	18 16       	cp	r1, r24
    15ee:	19 06       	cpc	r1, r25
    15f0:	24 f4       	brge	.+8      	; 0x15fa <set_volume+0x1d8>
    15f2:	21 e0       	ldi	r18, 0x01	; 1
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	3f 87       	std	Y+15, r19	; 0x0f
    15f8:	2e 87       	std	Y+14, r18	; 0x0e
    15fa:	88 89       	ldd	r24, Y+16	; 0x10
    15fc:	99 89       	ldd	r25, Y+17	; 0x11
    15fe:	2e 85       	ldd	r18, Y+14	; 0x0e
    1600:	3f 85       	ldd	r19, Y+15	; 0x0f
    1602:	82 23       	and	r24, r18
    1604:	93 23       	and	r25, r19
    1606:	8d 87       	std	Y+13, r24	; 0x0d
    1608:	ec e2       	ldi	r30, 0x2C	; 44
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	88 2f       	mov	r24, r24
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	88 70       	andi	r24, 0x08	; 8
    1614:	90 70       	andi	r25, 0x00	; 0
    1616:	1c 86       	std	Y+12, r1	; 0x0c
    1618:	1b 86       	std	Y+11, r1	; 0x0b
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	21 f4       	brne	.+8      	; 0x1626 <set_volume+0x204>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	9c 87       	std	Y+12, r25	; 0x0c
    1624:	8b 87       	std	Y+11, r24	; 0x0b
    1626:	ef 81       	ldd	r30, Y+7	; 0x07
    1628:	f8 85       	ldd	r31, Y+8	; 0x08
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	1a 86       	std	Y+10, r1	; 0x0a
    1630:	19 86       	std	Y+9, r1	; 0x09
    1632:	84 36       	cpi	r24, 0x64	; 100
    1634:	91 05       	cpc	r25, r1
    1636:	24 f4       	brge	.+8      	; 0x1640 <set_volume+0x21e>
    1638:	21 e0       	ldi	r18, 0x01	; 1
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	3a 87       	std	Y+10, r19	; 0x0a
    163e:	29 87       	std	Y+9, r18	; 0x09
    1640:	8b 85       	ldd	r24, Y+11	; 0x0b
    1642:	9c 85       	ldd	r25, Y+12	; 0x0c
    1644:	29 85       	ldd	r18, Y+9	; 0x09
    1646:	3a 85       	ldd	r19, Y+10	; 0x0a
    1648:	82 23       	and	r24, r18
    164a:	93 23       	and	r25, r19
    164c:	3d 85       	ldd	r19, Y+13	; 0x0d
    164e:	83 2b       	or	r24, r19
    1650:	88 23       	and	r24, r24
    1652:	09 f0       	breq	.+2      	; 0x1656 <set_volume+0x234>
    1654:	49 cf       	rjmp	.-366    	; 0x14e8 <set_volume+0xc6>
		BEEP(246.942, 0.2) //beep with frequency 246.942 --> tone h for 0.25sec
		LCD_D_NUMBER(*volume,3,0)
		j = 55;
	}	
  }
  j = 0;
    1656:	1c 82       	std	Y+4, r1	; 0x04
    1658:	1b 82       	std	Y+3, r1	; 0x03
  return;
}
    165a:	61 96       	adiw	r28, 0x11	; 17
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	08 95       	ret

00001670 <main>:

PROGRAM_INIT
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	a7 97       	sbiw	r28, 0x27	; 39
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	0e 94 34 01 	call	0x268	; 0x268 <InitBoard>
	ACTIVATE_LCD // initialize the LCD. The output begins at the first position of the display.
    168c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_Init>
	CLEAR_LCD // Clears the LCD screen.
    1690:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_Clear>
	TCCR1B = ((1 << CS10)); // Set up timer at Fcpu/256 
    1694:	e1 e8       	ldi	r30, 0x81	; 129
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 83       	st	Z, r24
	RTC_init();	
    169c:	0e 94 b0 14 	call	0x2960	; 0x2960 <RTC_init>
				  display_set_timer1_countdown, state_set_timer1_countdown,
				  display_set_timer2_countdown, state_set_timer2_countdown,
				  display_timer1_input, state_timer1_input,
				  display_timer2_input, state_timer2_input
				};
	enum states c = display_time;
    16a0:	1d 8a       	std	Y+21, r1	; 0x15
	int volume = 50;
    16a2:	82 e3       	ldi	r24, 0x32	; 50
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9f 8b       	std	Y+23, r25	; 0x17
    16a8:	8e 8b       	std	Y+22, r24	; 0x16
	int *v;
	v = &volume;
    16aa:	ce 01       	movw	r24, r28
    16ac:	46 96       	adiw	r24, 0x16	; 22
    16ae:	9c 8b       	std	Y+20, r25	; 0x14
    16b0:	8b 8b       	std	Y+19, r24	; 0x13
	int seconds = 0;
    16b2:	19 8e       	std	Y+25, r1	; 0x19
    16b4:	18 8e       	std	Y+24, r1	; 0x18
	int *s;
	s = &seconds;
    16b6:	ce 01       	movw	r24, r28
    16b8:	48 96       	adiw	r24, 0x18	; 24
    16ba:	9a 8b       	std	Y+18, r25	; 0x12
    16bc:	89 8b       	std	Y+17, r24	; 0x11
	int minutes = 0;
    16be:	1b 8e       	std	Y+27, r1	; 0x1b
    16c0:	1a 8e       	std	Y+26, r1	; 0x1a
	int *m;
	m = &minutes;
    16c2:	ce 01       	movw	r24, r28
    16c4:	4a 96       	adiw	r24, 0x1a	; 26
    16c6:	98 8b       	std	Y+16, r25	; 0x10
    16c8:	8f 87       	std	Y+15, r24	; 0x0f
	int hours = 0;
    16ca:	1d 8e       	std	Y+29, r1	; 0x1d
    16cc:	1c 8e       	std	Y+28, r1	; 0x1c
	int *h;
	h = &hours;
    16ce:	ce 01       	movw	r24, r28
    16d0:	4c 96       	adiw	r24, 0x1c	; 28
    16d2:	9e 87       	std	Y+14, r25	; 0x0e
    16d4:	8d 87       	std	Y+13, r24	; 0x0d
	BEEP_VOLUME(volume)
    16d6:	e9 e8       	ldi	r30, 0x89	; 137
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	10 82       	st	Z, r1
    16dc:	e8 e8       	ldi	r30, 0x88	; 136
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	8e 89       	ldd	r24, Y+22	; 0x16
    16e2:	9f 89       	ldd	r25, Y+23	; 0x17
    16e4:	80 83       	st	Z, r24
	float beep_frequency = 246.942; //between 20 and 20000 in Hz
    16e6:	87 e2       	ldi	r24, 0x27	; 39
    16e8:	91 ef       	ldi	r25, 0xF1	; 241
    16ea:	a6 e7       	ldi	r26, 0x76	; 118
    16ec:	b3 e4       	ldi	r27, 0x43	; 67
    16ee:	89 87       	std	Y+9, r24	; 0x09
    16f0:	9a 87       	std	Y+10, r25	; 0x0a
    16f2:	ab 87       	std	Y+11, r26	; 0x0b
    16f4:	bc 87       	std	Y+12, r27	; 0x0c
	float beep_time = 0.2; //between 0.1 and 25 in s
    16f6:	8d ec       	ldi	r24, 0xCD	; 205
    16f8:	9c ec       	ldi	r25, 0xCC	; 204
    16fa:	ac e4       	ldi	r26, 0x4C	; 76
    16fc:	be e3       	ldi	r27, 0x3E	; 62
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	9e 83       	std	Y+6, r25	; 0x06
    1702:	af 83       	std	Y+7, r26	; 0x07
    1704:	b8 87       	std	Y+8, r27	; 0x08
	int actual_minute = 0;
    1706:	1c 82       	std	Y+4, r1	; 0x04
    1708:	1b 82       	std	Y+3, r1	; 0x03
	int actual_second = 0;
    170a:	1a 82       	std	Y+2, r1	; 0x02
    170c:	19 82       	std	Y+1, r1	; 0x01

PROGRAM_START

	//run_timer(s, m, h);
	switch (c)
    170e:	8d 89       	ldd	r24, Y+21	; 0x15
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	3f a3       	std	Y+39, r19	; 0x27
    1716:	2e a3       	std	Y+38, r18	; 0x26
    1718:	8e a1       	ldd	r24, Y+38	; 0x26
    171a:	9f a1       	ldd	r25, Y+39	; 0x27
    171c:	8a 31       	cpi	r24, 0x1A	; 26
    171e:	91 05       	cpc	r25, r1
    1720:	09 f4       	brne	.+2      	; 0x1724 <main+0xb4>
    1722:	f1 c3       	rjmp	.+2018   	; 0x1f06 <main+0x896>
    1724:	2e a1       	ldd	r18, Y+38	; 0x26
    1726:	3f a1       	ldd	r19, Y+39	; 0x27
    1728:	2b 31       	cpi	r18, 0x1B	; 27
    172a:	31 05       	cpc	r19, r1
    172c:	0c f0       	brlt	.+2      	; 0x1730 <main+0xc0>
    172e:	bd c0       	rjmp	.+378    	; 0x18aa <main+0x23a>
    1730:	8e a1       	ldd	r24, Y+38	; 0x26
    1732:	9f a1       	ldd	r25, Y+39	; 0x27
    1734:	8d 30       	cpi	r24, 0x0D	; 13
    1736:	91 05       	cpc	r25, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <main+0xcc>
    173a:	02 c3       	rjmp	.+1540   	; 0x1d40 <main+0x6d0>
    173c:	2e a1       	ldd	r18, Y+38	; 0x26
    173e:	3f a1       	ldd	r19, Y+39	; 0x27
    1740:	2e 30       	cpi	r18, 0x0E	; 14
    1742:	31 05       	cpc	r19, r1
    1744:	0c f0       	brlt	.+2      	; 0x1748 <main+0xd8>
    1746:	58 c0       	rjmp	.+176    	; 0x17f8 <main+0x188>
    1748:	8e a1       	ldd	r24, Y+38	; 0x26
    174a:	9f a1       	ldd	r25, Y+39	; 0x27
    174c:	85 30       	cpi	r24, 0x05	; 5
    174e:	91 05       	cpc	r25, r1
    1750:	09 f4       	brne	.+2      	; 0x1754 <main+0xe4>
    1752:	39 c2       	rjmp	.+1138   	; 0x1bc6 <main+0x556>
    1754:	2e a1       	ldd	r18, Y+38	; 0x26
    1756:	3f a1       	ldd	r19, Y+39	; 0x27
    1758:	26 30       	cpi	r18, 0x06	; 6
    175a:	31 05       	cpc	r19, r1
    175c:	34 f5       	brge	.+76     	; 0x17aa <main+0x13a>
    175e:	8e a1       	ldd	r24, Y+38	; 0x26
    1760:	9f a1       	ldd	r25, Y+39	; 0x27
    1762:	82 30       	cpi	r24, 0x02	; 2
    1764:	91 05       	cpc	r25, r1
    1766:	09 f4       	brne	.+2      	; 0x176a <main+0xfa>
    1768:	c8 c1       	rjmp	.+912    	; 0x1afa <main+0x48a>
    176a:	2e a1       	ldd	r18, Y+38	; 0x26
    176c:	3f a1       	ldd	r19, Y+39	; 0x27
    176e:	23 30       	cpi	r18, 0x03	; 3
    1770:	31 05       	cpc	r19, r1
    1772:	6c f4       	brge	.+26     	; 0x178e <main+0x11e>
    1774:	8e a1       	ldd	r24, Y+38	; 0x26
    1776:	9f a1       	ldd	r25, Y+39	; 0x27
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	09 f4       	brne	.+2      	; 0x177e <main+0x10e>
    177c:	52 c1       	rjmp	.+676    	; 0x1a22 <main+0x3b2>
    177e:	2e a1       	ldd	r18, Y+38	; 0x26
    1780:	3f a1       	ldd	r19, Y+39	; 0x27
    1782:	21 30       	cpi	r18, 0x01	; 1
    1784:	31 05       	cpc	r19, r1
    1786:	09 f4       	brne	.+2      	; 0x178a <main+0x11a>
    1788:	6b c1       	rjmp	.+726    	; 0x1a60 <main+0x3f0>
    178a:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    178e:	8e a1       	ldd	r24, Y+38	; 0x26
    1790:	9f a1       	ldd	r25, Y+39	; 0x27
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	91 05       	cpc	r25, r1
    1796:	09 f4       	brne	.+2      	; 0x179a <main+0x12a>
    1798:	cf c1       	rjmp	.+926    	; 0x1b38 <main+0x4c8>
    179a:	2e a1       	ldd	r18, Y+38	; 0x26
    179c:	3f a1       	ldd	r19, Y+39	; 0x27
    179e:	24 30       	cpi	r18, 0x04	; 4
    17a0:	31 05       	cpc	r19, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <main+0x136>
    17a4:	f1 c1       	rjmp	.+994    	; 0x1b88 <main+0x518>
    17a6:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    17aa:	8e a1       	ldd	r24, Y+38	; 0x26
    17ac:	9f a1       	ldd	r25, Y+39	; 0x27
    17ae:	88 30       	cpi	r24, 0x08	; 8
    17b0:	91 05       	cpc	r25, r1
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <main+0x146>
    17b4:	30 c2       	rjmp	.+1120   	; 0x1c16 <main+0x5a6>
    17b6:	2e a1       	ldd	r18, Y+38	; 0x26
    17b8:	3f a1       	ldd	r19, Y+39	; 0x27
    17ba:	29 30       	cpi	r18, 0x09	; 9
    17bc:	31 05       	cpc	r19, r1
    17be:	74 f4       	brge	.+28     	; 0x17dc <main+0x16c>
    17c0:	8e a1       	ldd	r24, Y+38	; 0x26
    17c2:	9f a1       	ldd	r25, Y+39	; 0x27
    17c4:	86 30       	cpi	r24, 0x06	; 6
    17c6:	91 05       	cpc	r25, r1
    17c8:	09 f4       	brne	.+2      	; 0x17cc <main+0x15c>
    17ca:	33 c2       	rjmp	.+1126   	; 0x1c32 <main+0x5c2>
    17cc:	2e a1       	ldd	r18, Y+38	; 0x26
    17ce:	3f a1       	ldd	r19, Y+39	; 0x27
    17d0:	27 30       	cpi	r18, 0x07	; 7
    17d2:	31 05       	cpc	r19, r1
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <main+0x168>
    17d6:	4c c2       	rjmp	.+1176   	; 0x1c70 <main+0x600>
    17d8:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    17dc:	8e a1       	ldd	r24, Y+38	; 0x26
    17de:	9f a1       	ldd	r25, Y+39	; 0x27
    17e0:	89 30       	cpi	r24, 0x09	; 9
    17e2:	91 05       	cpc	r25, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <main+0x178>
    17e6:	1b c2       	rjmp	.+1078   	; 0x1c1e <main+0x5ae>
    17e8:	2e a1       	ldd	r18, Y+38	; 0x26
    17ea:	3f a1       	ldd	r19, Y+39	; 0x27
    17ec:	2a 30       	cpi	r18, 0x0A	; 10
    17ee:	31 05       	cpc	r19, r1
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <main+0x184>
    17f2:	1a c2       	rjmp	.+1076   	; 0x1c28 <main+0x5b8>
    17f4:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    17f8:	8e a1       	ldd	r24, Y+38	; 0x26
    17fa:	9f a1       	ldd	r25, Y+39	; 0x27
    17fc:	83 31       	cpi	r24, 0x13	; 19
    17fe:	91 05       	cpc	r25, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <main+0x194>
    1802:	ef c2       	rjmp	.+1502   	; 0x1de2 <main+0x772>
    1804:	2e a1       	ldd	r18, Y+38	; 0x26
    1806:	3f a1       	ldd	r19, Y+39	; 0x27
    1808:	24 31       	cpi	r18, 0x14	; 20
    180a:	31 05       	cpc	r19, r1
    180c:	3c f5       	brge	.+78     	; 0x185c <main+0x1ec>
    180e:	8e a1       	ldd	r24, Y+38	; 0x26
    1810:	9f a1       	ldd	r25, Y+39	; 0x27
    1812:	80 31       	cpi	r24, 0x10	; 16
    1814:	91 05       	cpc	r25, r1
    1816:	09 f4       	brne	.+2      	; 0x181a <main+0x1aa>
    1818:	08 c4       	rjmp	.+2064   	; 0x202a <main+0x9ba>
    181a:	2e a1       	ldd	r18, Y+38	; 0x26
    181c:	3f a1       	ldd	r19, Y+39	; 0x27
    181e:	21 31       	cpi	r18, 0x11	; 17
    1820:	31 05       	cpc	r19, r1
    1822:	74 f4       	brge	.+28     	; 0x1840 <main+0x1d0>
    1824:	8e a1       	ldd	r24, Y+38	; 0x26
    1826:	9f a1       	ldd	r25, Y+39	; 0x27
    1828:	8e 30       	cpi	r24, 0x0E	; 14
    182a:	91 05       	cpc	r25, r1
    182c:	09 f4       	brne	.+2      	; 0x1830 <main+0x1c0>
    182e:	a7 c2       	rjmp	.+1358   	; 0x1d7e <main+0x70e>
    1830:	2e a1       	ldd	r18, Y+38	; 0x26
    1832:	3f a1       	ldd	r19, Y+39	; 0x27
    1834:	2f 30       	cpi	r18, 0x0F	; 15
    1836:	31 05       	cpc	r19, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <main+0x1cc>
    183a:	d8 c3       	rjmp	.+1968   	; 0x1fec <main+0x97c>
    183c:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    1840:	8e a1       	ldd	r24, Y+38	; 0x26
    1842:	9f a1       	ldd	r25, Y+39	; 0x27
    1844:	81 31       	cpi	r24, 0x11	; 17
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <main+0x1dc>
    184a:	24 c4       	rjmp	.+2120   	; 0x2094 <main+0xa24>
    184c:	2e a1       	ldd	r18, Y+38	; 0x26
    184e:	3f a1       	ldd	r19, Y+39	; 0x27
    1850:	22 31       	cpi	r18, 0x12	; 18
    1852:	31 05       	cpc	r19, r1
    1854:	09 f4       	brne	.+2      	; 0x1858 <main+0x1e8>
    1856:	3d c4       	rjmp	.+2170   	; 0x20d2 <main+0xa62>
    1858:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    185c:	8e a1       	ldd	r24, Y+38	; 0x26
    185e:	9f a1       	ldd	r25, Y+39	; 0x27
    1860:	86 31       	cpi	r24, 0x16	; 22
    1862:	91 05       	cpc	r25, r1
    1864:	09 f4       	brne	.+2      	; 0x1868 <main+0x1f8>
    1866:	4d c2       	rjmp	.+1178   	; 0x1d02 <main+0x692>
    1868:	2e a1       	ldd	r18, Y+38	; 0x26
    186a:	3f a1       	ldd	r19, Y+39	; 0x27
    186c:	27 31       	cpi	r18, 0x17	; 23
    186e:	31 05       	cpc	r19, r1
    1870:	74 f4       	brge	.+28     	; 0x188e <main+0x21e>
    1872:	8e a1       	ldd	r24, Y+38	; 0x26
    1874:	9f a1       	ldd	r25, Y+39	; 0x27
    1876:	84 31       	cpi	r24, 0x14	; 20
    1878:	91 05       	cpc	r25, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <main+0x20e>
    187c:	d1 c2       	rjmp	.+1442   	; 0x1e20 <main+0x7b0>
    187e:	2e a1       	ldd	r18, Y+38	; 0x26
    1880:	3f a1       	ldd	r19, Y+39	; 0x27
    1882:	25 31       	cpi	r18, 0x15	; 21
    1884:	31 05       	cpc	r19, r1
    1886:	09 f4       	brne	.+2      	; 0x188a <main+0x21a>
    1888:	1d c2       	rjmp	.+1082   	; 0x1cc4 <main+0x654>
    188a:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    188e:	8e a1       	ldd	r24, Y+38	; 0x26
    1890:	9f a1       	ldd	r25, Y+39	; 0x27
    1892:	87 31       	cpi	r24, 0x17	; 23
    1894:	91 05       	cpc	r25, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <main+0x22a>
    1898:	f8 c2       	rjmp	.+1520   	; 0x1e8a <main+0x81a>
    189a:	2e a1       	ldd	r18, Y+38	; 0x26
    189c:	3f a1       	ldd	r19, Y+39	; 0x27
    189e:	28 31       	cpi	r18, 0x18	; 24
    18a0:	31 05       	cpc	r19, r1
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <main+0x236>
    18a4:	11 c3       	rjmp	.+1570   	; 0x1ec8 <main+0x858>
    18a6:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    18aa:	8e a1       	ldd	r24, Y+38	; 0x26
    18ac:	9f a1       	ldd	r25, Y+39	; 0x27
    18ae:	86 32       	cpi	r24, 0x26	; 38
    18b0:	91 05       	cpc	r25, r1
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <main+0x246>
    18b4:	c9 c5       	rjmp	.+2962   	; 0x2448 <main+0xdd8>
    18b6:	2e a1       	ldd	r18, Y+38	; 0x26
    18b8:	3f a1       	ldd	r19, Y+39	; 0x27
    18ba:	27 32       	cpi	r18, 0x27	; 39
    18bc:	31 05       	cpc	r19, r1
    18be:	0c f0       	brlt	.+2      	; 0x18c2 <main+0x252>
    18c0:	59 c0       	rjmp	.+178    	; 0x1974 <main+0x304>
    18c2:	8e a1       	ldd	r24, Y+38	; 0x26
    18c4:	9f a1       	ldd	r25, Y+39	; 0x27
    18c6:	80 32       	cpi	r24, 0x20	; 32
    18c8:	91 05       	cpc	r25, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <main+0x25e>
    18cc:	8b c4       	rjmp	.+2326   	; 0x21e4 <main+0xb74>
    18ce:	2e a1       	ldd	r18, Y+38	; 0x26
    18d0:	3f a1       	ldd	r19, Y+39	; 0x27
    18d2:	21 32       	cpi	r18, 0x21	; 33
    18d4:	31 05       	cpc	r19, r1
    18d6:	3c f5       	brge	.+78     	; 0x1926 <main+0x2b6>
    18d8:	8e a1       	ldd	r24, Y+38	; 0x26
    18da:	9f a1       	ldd	r25, Y+39	; 0x27
    18dc:	8d 31       	cpi	r24, 0x1D	; 29
    18de:	91 05       	cpc	r25, r1
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <main+0x274>
    18e2:	4b c4       	rjmp	.+2198   	; 0x217a <main+0xb0a>
    18e4:	2e a1       	ldd	r18, Y+38	; 0x26
    18e6:	3f a1       	ldd	r19, Y+39	; 0x27
    18e8:	2e 31       	cpi	r18, 0x1E	; 30
    18ea:	31 05       	cpc	r19, r1
    18ec:	74 f4       	brge	.+28     	; 0x190a <main+0x29a>
    18ee:	8e a1       	ldd	r24, Y+38	; 0x26
    18f0:	9f a1       	ldd	r25, Y+39	; 0x27
    18f2:	8b 31       	cpi	r24, 0x1B	; 27
    18f4:	91 05       	cpc	r25, r1
    18f6:	09 f4       	brne	.+2      	; 0x18fa <main+0x28a>
    18f8:	3a c3       	rjmp	.+1652   	; 0x1f6e <main+0x8fe>
    18fa:	2e a1       	ldd	r18, Y+38	; 0x26
    18fc:	3f a1       	ldd	r19, Y+39	; 0x27
    18fe:	2c 31       	cpi	r18, 0x1C	; 28
    1900:	31 05       	cpc	r19, r1
    1902:	09 f4       	brne	.+2      	; 0x1906 <main+0x296>
    1904:	1b c4       	rjmp	.+2102   	; 0x213c <main+0xacc>
    1906:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    190a:	8e a1       	ldd	r24, Y+38	; 0x26
    190c:	9f a1       	ldd	r25, Y+39	; 0x27
    190e:	8e 31       	cpi	r24, 0x1E	; 30
    1910:	91 05       	cpc	r25, r1
    1912:	09 f4       	brne	.+2      	; 0x1916 <main+0x2a6>
    1914:	40 c5       	rjmp	.+2688   	; 0x2396 <main+0xd26>
    1916:	2e a1       	ldd	r18, Y+38	; 0x26
    1918:	3f a1       	ldd	r19, Y+39	; 0x27
    191a:	2f 31       	cpi	r18, 0x1F	; 31
    191c:	31 05       	cpc	r19, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <main+0x2b2>
    1920:	59 c5       	rjmp	.+2738   	; 0x23d4 <main+0xd64>
    1922:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    1926:	8e a1       	ldd	r24, Y+38	; 0x26
    1928:	9f a1       	ldd	r25, Y+39	; 0x27
    192a:	83 32       	cpi	r24, 0x23	; 35
    192c:	91 05       	cpc	r25, r1
    192e:	09 f4       	brne	.+2      	; 0x1932 <main+0x2c2>
    1930:	c8 c4       	rjmp	.+2448   	; 0x22c2 <main+0xc52>
    1932:	2e a1       	ldd	r18, Y+38	; 0x26
    1934:	3f a1       	ldd	r19, Y+39	; 0x27
    1936:	24 32       	cpi	r18, 0x24	; 36
    1938:	31 05       	cpc	r19, r1
    193a:	74 f4       	brge	.+28     	; 0x1958 <main+0x2e8>
    193c:	8e a1       	ldd	r24, Y+38	; 0x26
    193e:	9f a1       	ldd	r25, Y+39	; 0x27
    1940:	81 32       	cpi	r24, 0x21	; 33
    1942:	91 05       	cpc	r25, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <main+0x2d8>
    1946:	53 c4       	rjmp	.+2214   	; 0x21ee <main+0xb7e>
    1948:	2e a1       	ldd	r18, Y+38	; 0x26
    194a:	3f a1       	ldd	r19, Y+39	; 0x27
    194c:	22 32       	cpi	r18, 0x22	; 34
    194e:	31 05       	cpc	r19, r1
    1950:	09 f4       	brne	.+2      	; 0x1954 <main+0x2e4>
    1952:	6c c4       	rjmp	.+2264   	; 0x222c <main+0xbbc>
    1954:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    1958:	8e a1       	ldd	r24, Y+38	; 0x26
    195a:	9f a1       	ldd	r25, Y+39	; 0x27
    195c:	84 32       	cpi	r24, 0x24	; 36
    195e:	91 05       	cpc	r25, r1
    1960:	09 f4       	brne	.+2      	; 0x1964 <main+0x2f4>
    1962:	ce c4       	rjmp	.+2460   	; 0x2300 <main+0xc90>
    1964:	2e a1       	ldd	r18, Y+38	; 0x26
    1966:	3f a1       	ldd	r19, Y+39	; 0x27
    1968:	25 32       	cpi	r18, 0x25	; 37
    196a:	31 05       	cpc	r19, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <main+0x300>
    196e:	67 c5       	rjmp	.+2766   	; 0x243e <main+0xdce>
    1970:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    1974:	8e a1       	ldd	r24, Y+38	; 0x26
    1976:	9f a1       	ldd	r25, Y+39	; 0x27
    1978:	8c 32       	cpi	r24, 0x2C	; 44
    197a:	91 05       	cpc	r25, r1
    197c:	09 f4       	brne	.+2      	; 0x1980 <main+0x310>
    197e:	cc c6       	rjmp	.+3480   	; 0x2718 <main+0x10a8>
    1980:	2e a1       	ldd	r18, Y+38	; 0x26
    1982:	3f a1       	ldd	r19, Y+39	; 0x27
    1984:	2d 32       	cpi	r18, 0x2D	; 45
    1986:	31 05       	cpc	r19, r1
    1988:	3c f5       	brge	.+78     	; 0x19d8 <main+0x368>
    198a:	8e a1       	ldd	r24, Y+38	; 0x26
    198c:	9f a1       	ldd	r25, Y+39	; 0x27
    198e:	89 32       	cpi	r24, 0x29	; 41
    1990:	91 05       	cpc	r25, r1
    1992:	09 f4       	brne	.+2      	; 0x1996 <main+0x326>
    1994:	e2 c5       	rjmp	.+3012   	; 0x255a <main+0xeea>
    1996:	2e a1       	ldd	r18, Y+38	; 0x26
    1998:	3f a1       	ldd	r19, Y+39	; 0x27
    199a:	2a 32       	cpi	r18, 0x2A	; 42
    199c:	31 05       	cpc	r19, r1
    199e:	74 f4       	brge	.+28     	; 0x19bc <main+0x34c>
    19a0:	8e a1       	ldd	r24, Y+38	; 0x26
    19a2:	9f a1       	ldd	r25, Y+39	; 0x27
    19a4:	87 32       	cpi	r24, 0x27	; 39
    19a6:	91 05       	cpc	r25, r1
    19a8:	09 f4       	brne	.+2      	; 0x19ac <main+0x33c>
    19aa:	6d c5       	rjmp	.+2778   	; 0x2486 <main+0xe16>
    19ac:	2e a1       	ldd	r18, Y+38	; 0x26
    19ae:	3f a1       	ldd	r19, Y+39	; 0x27
    19b0:	28 32       	cpi	r18, 0x28	; 40
    19b2:	31 05       	cpc	r19, r1
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <main+0x348>
    19b6:	b2 c5       	rjmp	.+2916   	; 0x251c <main+0xeac>
    19b8:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    19bc:	8e a1       	ldd	r24, Y+38	; 0x26
    19be:	9f a1       	ldd	r25, Y+39	; 0x27
    19c0:	8a 32       	cpi	r24, 0x2A	; 42
    19c2:	91 05       	cpc	r25, r1
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <main+0x358>
    19c6:	14 c6       	rjmp	.+3112   	; 0x25f0 <main+0xf80>
    19c8:	2e a1       	ldd	r18, Y+38	; 0x26
    19ca:	3f a1       	ldd	r19, Y+39	; 0x27
    19cc:	2b 32       	cpi	r18, 0x2B	; 43
    19ce:	31 05       	cpc	r19, r1
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <main+0x364>
    19d2:	2d c6       	rjmp	.+3162   	; 0x262e <main+0xfbe>
    19d4:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x11d8>
    19d8:	8e a1       	ldd	r24, Y+38	; 0x26
    19da:	9f a1       	ldd	r25, Y+39	; 0x27
    19dc:	8f 32       	cpi	r24, 0x2F	; 47
    19de:	91 05       	cpc	r25, r1
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <main+0x374>
    19e2:	79 c6       	rjmp	.+3314   	; 0x26d6 <main+0x1066>
    19e4:	2e a1       	ldd	r18, Y+38	; 0x26
    19e6:	3f a1       	ldd	r19, Y+39	; 0x27
    19e8:	20 33       	cpi	r18, 0x30	; 48
    19ea:	31 05       	cpc	r19, r1
    19ec:	6c f4       	brge	.+26     	; 0x1a08 <main+0x398>
    19ee:	8e a1       	ldd	r24, Y+38	; 0x26
    19f0:	9f a1       	ldd	r25, Y+39	; 0x27
    19f2:	8d 32       	cpi	r24, 0x2D	; 45
    19f4:	91 05       	cpc	r25, r1
    19f6:	09 f4       	brne	.+2      	; 0x19fa <main+0x38a>
    19f8:	af c6       	rjmp	.+3422   	; 0x2758 <main+0x10e8>
    19fa:	2e a1       	ldd	r18, Y+38	; 0x26
    19fc:	3f a1       	ldd	r19, Y+39	; 0x27
    19fe:	2e 32       	cpi	r18, 0x2E	; 46
    1a00:	31 05       	cpc	r19, r1
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <main+0x396>
    1a04:	49 c6       	rjmp	.+3218   	; 0x2698 <main+0x1028>
    1a06:	20 c7       	rjmp	.+3648   	; 0x2848 <main+0x11d8>
    1a08:	8e a1       	ldd	r24, Y+38	; 0x26
    1a0a:	9f a1       	ldd	r25, Y+39	; 0x27
    1a0c:	80 33       	cpi	r24, 0x30	; 48
    1a0e:	91 05       	cpc	r25, r1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <main+0x3a4>
    1a12:	d9 c6       	rjmp	.+3506   	; 0x27c6 <main+0x1156>
    1a14:	2e a1       	ldd	r18, Y+38	; 0x26
    1a16:	3f a1       	ldd	r19, Y+39	; 0x27
    1a18:	21 33       	cpi	r18, 0x31	; 49
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <main+0x3b0>
    1a1e:	f3 c6       	rjmp	.+3558   	; 0x2806 <main+0x1196>
    1a20:	13 c7       	rjmp	.+3622   	; 0x2848 <main+0x11d8>
	{

	// DISPLAY TIME AND WAIT FOR EVENT
	case display_time:

		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1a22:	69 85       	ldd	r22, Y+9	; 0x09
    1a24:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a26:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a28:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a2a:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	8c 01       	movw	r16, r24
    1a34:	6d 81       	ldd	r22, Y+5	; 0x05
    1a36:	7e 81       	ldd	r23, Y+6	; 0x06
    1a38:	8f 81       	ldd	r24, Y+7	; 0x07
    1a3a:	98 85       	ldd	r25, Y+8	; 0x08
    1a3c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9c 01       	movw	r18, r24
    1a46:	c8 01       	movw	r24, r16
    1a48:	b9 01       	movw	r22, r18
    1a4a:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		#if DEBUG_MODE
			LCD_TEXT("DEBUG")
    1a4e:	8a e1       	ldi	r24, 0x1A	; 26
    1a50:	91 e0       	ldi	r25, 0x01	; 1
    1a52:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
			hours = get_hour();
			actual_minute = get_minute();
			ShowClock();
			LCD_D_NUMBER(seconds,2,0)
		#endif
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1a56:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_time;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	8d 8b       	std	Y+21, r24	; 0x15
    1a5e:	57 ce       	rjmp	.-850    	; 0x170e <main+0x9e>
		break;
	case state_time:
		ON_JOYSTICK_LEFT   c = display_dev1;
    1a60:	ec e2       	ldi	r30, 0x2C	; 44
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	84 70       	andi	r24, 0x04	; 4
    1a6c:	90 70       	andi	r25, 0x00	; 0
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	11 f4       	brne	.+4      	; 0x1a76 <main+0x406>
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_dev2;
    1a76:	ec e2       	ldi	r30, 0x2C	; 44
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	88 2f       	mov	r24, r24
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	88 70       	andi	r24, 0x08	; 8
    1a82:	90 70       	andi	r25, 0x00	; 0
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	11 f4       	brne	.+4      	; 0x1a8c <main+0x41c>
    1a88:	84 e0       	ldi	r24, 0x04	; 4
    1a8a:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = state_time_center_pressed;
    1a8c:	e3 e2       	ldi	r30, 0x23	; 35
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	80 71       	andi	r24, 0x10	; 16
    1a98:	90 70       	andi	r25, 0x00	; 0
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	11 f4       	brne	.+4      	; 0x1aa2 <main+0x432>
    1a9e:	88 e0       	ldi	r24, 0x08	; 8
    1aa0:	8d 8b       	std	Y+21, r24	; 0x15
		//run_timer(s, m, h);
		//if ((minutes - actual_minute >= 1) | ((actual_minute == 59) & (minutes == 0))) c = display_time;
		if ((seconds - actual_second >= 1) | ((actual_second == 59) & (seconds == 0))) c = display_time;
    1aa2:	88 8d       	ldd	r24, Y+24	; 0x18
    1aa4:	99 8d       	ldd	r25, Y+25	; 0x19
    1aa6:	29 81       	ldd	r18, Y+1	; 0x01
    1aa8:	3a 81       	ldd	r19, Y+2	; 0x02
    1aaa:	82 1b       	sub	r24, r18
    1aac:	93 0b       	sbc	r25, r19
    1aae:	1d a2       	std	Y+37, r1	; 0x25
    1ab0:	1c a2       	std	Y+36, r1	; 0x24
    1ab2:	18 16       	cp	r1, r24
    1ab4:	19 06       	cpc	r1, r25
    1ab6:	24 f4       	brge	.+8      	; 0x1ac0 <main+0x450>
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9d a3       	std	Y+37, r25	; 0x25
    1abe:	8c a3       	std	Y+36, r24	; 0x24
    1ac0:	1b a2       	std	Y+35, r1	; 0x23
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac6:	8b 33       	cpi	r24, 0x3B	; 59
    1ac8:	91 05       	cpc	r25, r1
    1aca:	11 f4       	brne	.+4      	; 0x1ad0 <main+0x460>
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	9b a3       	std	Y+35, r25	; 0x23
    1ad0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ad2:	99 8d       	ldd	r25, Y+25	; 0x19
    1ad4:	1a a2       	std	Y+34, r1	; 0x22
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	11 f4       	brne	.+4      	; 0x1ade <main+0x46e>
    1ada:	21 e0       	ldi	r18, 0x01	; 1
    1adc:	2a a3       	std	Y+34, r18	; 0x22
    1ade:	8b a1       	ldd	r24, Y+35	; 0x23
    1ae0:	3a a1       	ldd	r19, Y+34	; 0x22
    1ae2:	83 23       	and	r24, r19
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	2c a1       	ldd	r18, Y+36	; 0x24
    1aea:	3d a1       	ldd	r19, Y+37	; 0x25
    1aec:	82 2b       	or	r24, r18
    1aee:	93 2b       	or	r25, r19
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <main+0x486>
    1af4:	0c ce       	rjmp	.-1000   	; 0x170e <main+0x9e>
    1af6:	1d 8a       	std	Y+21, r1	; 0x15
    1af8:	0a ce       	rjmp	.-1004   	; 0x170e <main+0x9e>
		break;

    // DISPLAY DEVICE1 TIMER AND WAIT FOR EVENT
	case display_dev1:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1afa:	69 85       	ldd	r22, Y+9	; 0x09
    1afc:	7a 85       	ldd	r23, Y+10	; 0x0a
    1afe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b00:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b02:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8c 01       	movw	r16, r24
    1b0c:	6d 81       	ldd	r22, Y+5	; 0x05
    1b0e:	7e 81       	ldd	r23, Y+6	; 0x06
    1b10:	8f 81       	ldd	r24, Y+7	; 0x07
    1b12:	98 85       	ldd	r25, Y+8	; 0x08
    1b14:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9c 01       	movw	r18, r24
    1b1e:	c8 01       	movw	r24, r16
    1b20:	b9 01       	movw	r22, r18
    1b22:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("1 0010")
    1b26:	80 e2       	ldi	r24, 0x20	; 32
    1b28:	91 e0       	ldi	r25, 0x01	; 1
    1b2a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1b2e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_dev1;
    1b32:	83 e0       	ldi	r24, 0x03	; 3
    1b34:	8d 8b       	std	Y+21, r24	; 0x15
    1b36:	eb cd       	rjmp	.-1066   	; 0x170e <main+0x9e>
		break;
	case state_dev1:
		ON_JOYSTICK_LEFT   c = display_dev2;
    1b38:	ec e2       	ldi	r30, 0x2C	; 44
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	88 2f       	mov	r24, r24
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	84 70       	andi	r24, 0x04	; 4
    1b44:	90 70       	andi	r25, 0x00	; 0
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	11 f4       	brne	.+4      	; 0x1b4e <main+0x4de>
    1b4a:	84 e0       	ldi	r24, 0x04	; 4
    1b4c:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_time;
    1b4e:	ec e2       	ldi	r30, 0x2C	; 44
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	88 70       	andi	r24, 0x08	; 8
    1b5a:	90 70       	andi	r25, 0x00	; 0
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <main+0x4f2>
    1b60:	1d 8a       	std	Y+21, r1	; 0x15
		ON_JOYSTICK_UP     {} //function turning on device 1
    1b62:	e3 e2       	ldi	r30, 0x23	; 35
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	30 81       	ld	r19, Z
		ON_JOYSTICK_DOWN   {} //function turning off device 1
    1b68:	e3 e2       	ldi	r30, 0x23	; 35
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
		ON_JOYSTICK_CENTER c = state_d1_center_pressed;
    1b6e:	e3 e2       	ldi	r30, 0x23	; 35
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	88 2f       	mov	r24, r24
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	80 71       	andi	r24, 0x10	; 16
    1b7a:	90 70       	andi	r25, 0x00	; 0
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <main+0x512>
    1b80:	c6 cd       	rjmp	.-1140   	; 0x170e <main+0x9e>
    1b82:	89 e0       	ldi	r24, 0x09	; 9
    1b84:	8d 8b       	std	Y+21, r24	; 0x15
    1b86:	c3 cd       	rjmp	.-1146   	; 0x170e <main+0x9e>
		//if (now - start_timer > 1min) c = display_dev1;
		break;

    // DISPLAY DEVICE2 TIMER AND WAIT FOR EVENT
	case display_dev2:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1b88:	69 85       	ldd	r22, Y+9	; 0x09
    1b8a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b90:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	8c 01       	movw	r16, r24
    1b9a:	6d 81       	ldd	r22, Y+5	; 0x05
    1b9c:	7e 81       	ldd	r23, Y+6	; 0x06
    1b9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba0:	98 85       	ldd	r25, Y+8	; 0x08
    1ba2:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9c 01       	movw	r18, r24
    1bac:	c8 01       	movw	r24, r16
    1bae:	b9 01       	movw	r22, r18
    1bb0:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("2 0005")
    1bb4:	87 e2       	ldi	r24, 0x27	; 39
    1bb6:	91 e0       	ldi	r25, 0x01	; 1
    1bb8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1bbc:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_dev2;		
    1bc0:	85 e0       	ldi	r24, 0x05	; 5
    1bc2:	8d 8b       	std	Y+21, r24	; 0x15
    1bc4:	a4 cd       	rjmp	.-1208   	; 0x170e <main+0x9e>
		break;
	case state_dev2:
		ON_JOYSTICK_LEFT   c = display_time;
    1bc6:	ec e2       	ldi	r30, 0x2C	; 44
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	88 2f       	mov	r24, r24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	84 70       	andi	r24, 0x04	; 4
    1bd2:	90 70       	andi	r25, 0x00	; 0
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <main+0x56a>
    1bd8:	1d 8a       	std	Y+21, r1	; 0x15
		ON_JOYSTICK_RIGHT  c = display_dev1;
    1bda:	ec e2       	ldi	r30, 0x2C	; 44
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	88 70       	andi	r24, 0x08	; 8
    1be6:	90 70       	andi	r25, 0x00	; 0
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	11 f4       	brne	.+4      	; 0x1bf0 <main+0x580>
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_UP     {} //function turning on device 2
    1bf0:	e3 e2       	ldi	r30, 0x23	; 35
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	90 81       	ld	r25, Z
		ON_JOYSTICK_DOWN   {} //function turning off device 2
    1bf6:	e3 e2       	ldi	r30, 0x23	; 35
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	20 81       	ld	r18, Z
		ON_JOYSTICK_CENTER c = state_d2_center_pressed;
    1bfc:	e3 e2       	ldi	r30, 0x23	; 35
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	88 2f       	mov	r24, r24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	80 71       	andi	r24, 0x10	; 16
    1c08:	90 70       	andi	r25, 0x00	; 0
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <main+0x5a0>
    1c0e:	7f cd       	rjmp	.-1282   	; 0x170e <main+0x9e>
    1c10:	8a e0       	ldi	r24, 0x0A	; 10
    1c12:	8d 8b       	std	Y+21, r24	; 0x15
    1c14:	7c cd       	rjmp	.-1288   	; 0x170e <main+0x9e>
		break;

	// WAIT 5sec to get to set_time
	case state_time_center_pressed:
		//t0 = now;
		c = display_time;
    1c16:	1d 8a       	std	Y+21, r1	; 0x15
		#if DEBUG_MODE
			c = display_set_time;
    1c18:	86 e0       	ldi	r24, 0x06	; 6
    1c1a:	8d 8b       	std	Y+21, r24	; 0x15
    1c1c:	78 cd       	rjmp	.-1296   	; 0x170e <main+0x9e>
		#endif
		break;
	// WAIT 5sec to get to settings_timer1 else start_timer1
	case state_d1_center_pressed:
		//t0 = now;
		c = state_start_timer1;
    1c1e:	8b e0       	ldi	r24, 0x0B	; 11
    1c20:	8d 8b       	std	Y+21, r24	; 0x15
		#if DEBUG_MODE
			c = display_set_timer1;
    1c22:	8f e0       	ldi	r24, 0x0F	; 15
    1c24:	8d 8b       	std	Y+21, r24	; 0x15
    1c26:	73 cd       	rjmp	.-1306   	; 0x170e <main+0x9e>
		#endif
		break;
	// WAIT 5sec to get to settings_timer2 else start_timer2
	case state_d2_center_pressed:
		//t0 = now;
		c = state_start_timer2;
    1c28:	8c e0       	ldi	r24, 0x0C	; 12
    1c2a:	8d 8b       	std	Y+21, r24	; 0x15
		#if DEBUG_MODE
			c = display_set_timer2;
    1c2c:	81 e1       	ldi	r24, 0x11	; 17
    1c2e:	8d 8b       	std	Y+21, r24	; 0x15
    1c30:	6e cd       	rjmp	.-1316   	; 0x170e <main+0x9e>
			//{ if (now - t0 >= 5sec) c = display_set_timer2; }		
		#endif		
		break;
	// DISPLAY SET TIME AND WAIT FOR EVENT
	case display_set_time:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1c32:	69 85       	ldd	r22, Y+9	; 0x09
    1c34:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c36:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c38:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c3a:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8c 01       	movw	r16, r24
    1c44:	6d 81       	ldd	r22, Y+5	; 0x05
    1c46:	7e 81       	ldd	r23, Y+6	; 0x06
    1c48:	8f 81       	ldd	r24, Y+7	; 0x07
    1c4a:	98 85       	ldd	r25, Y+8	; 0x08
    1c4c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9c 01       	movw	r18, r24
    1c56:	c8 01       	movw	r24, r16
    1c58:	b9 01       	movw	r22, r18
    1c5a:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("SET T")
    1c5e:	8e e2       	ldi	r24, 0x2E	; 46
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1c66:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_time;
    1c6a:	87 e0       	ldi	r24, 0x07	; 7
    1c6c:	8d 8b       	std	Y+21, r24	; 0x15
    1c6e:	4f cd       	rjmp	.-1378   	; 0x170e <main+0x9e>
		break;
	case state_set_time:
		ON_JOYSTICK_LEFT   c = display_leave_menu;
    1c70:	ec e2       	ldi	r30, 0x2C	; 44
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	88 2f       	mov	r24, r24
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	84 70       	andi	r24, 0x04	; 4
    1c7c:	90 70       	andi	r25, 0x00	; 0
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	11 f4       	brne	.+4      	; 0x1c86 <main+0x616>
    1c82:	8d e0       	ldi	r24, 0x0D	; 13
    1c84:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_set_sound;
    1c86:	ec e2       	ldi	r30, 0x2C	; 44
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	88 2f       	mov	r24, r24
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	88 70       	andi	r24, 0x08	; 8
    1c92:	90 70       	andi	r25, 0x00	; 0
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	11 f4       	brne	.+4      	; 0x1c9c <main+0x62c>
    1c98:	83 e1       	ldi	r24, 0x13	; 19
    1c9a:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   c = display_set_time_input;
    1c9c:	e3 e2       	ldi	r30, 0x23	; 35
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	88 23       	and	r24, r24
    1ca4:	14 f0       	brlt	.+4      	; 0x1caa <main+0x63a>
    1ca6:	85 e1       	ldi	r24, 0x15	; 21
    1ca8:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = display_set_time_input;
    1caa:	e3 e2       	ldi	r30, 0x23	; 35
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	80 71       	andi	r24, 0x10	; 16
    1cb6:	90 70       	andi	r25, 0x00	; 0
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <main+0x64e>
    1cbc:	28 cd       	rjmp	.-1456   	; 0x170e <main+0x9e>
    1cbe:	85 e1       	ldi	r24, 0x15	; 21
    1cc0:	8d 8b       	std	Y+21, r24	; 0x15
    1cc2:	25 cd       	rjmp	.-1462   	; 0x170e <main+0x9e>
		break;
	case display_set_time_input:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1cc4:	69 85       	ldd	r22, Y+9	; 0x09
    1cc6:	7a 85       	ldd	r23, Y+10	; 0x0a
    1cc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cca:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ccc:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8c 01       	movw	r16, r24
    1cd6:	6d 81       	ldd	r22, Y+5	; 0x05
    1cd8:	7e 81       	ldd	r23, Y+6	; 0x06
    1cda:	8f 81       	ldd	r24, Y+7	; 0x07
    1cdc:	98 85       	ldd	r25, Y+8	; 0x08
    1cde:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9c 01       	movw	r18, r24
    1ce8:	c8 01       	movw	r24, r16
    1cea:	b9 01       	movw	r22, r18
    1cec:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("  8888")
    1cf0:	84 e3       	ldi	r24, 0x34	; 52
    1cf2:	91 e0       	ldi	r25, 0x01	; 1
    1cf4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1cf8:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_time_input;
    1cfc:	86 e1       	ldi	r24, 0x16	; 22
    1cfe:	8d 8b       	std	Y+21, r24	; 0x15
    1d00:	06 cd       	rjmp	.-1524   	; 0x170e <main+0x9e>
		break;
	case state_set_time_input:
		//wait for input
		ON_JOYSTICK_UP     c = display_set_time;
    1d02:	e3 e2       	ldi	r30, 0x23	; 35
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	80 74       	andi	r24, 0x40	; 64
    1d0e:	90 70       	andi	r25, 0x00	; 0
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	11 f4       	brne	.+4      	; 0x1d18 <main+0x6a8>
    1d14:	86 e0       	ldi	r24, 0x06	; 6
    1d16:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   c = display_set_time;
    1d18:	e3 e2       	ldi	r30, 0x23	; 35
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	88 23       	and	r24, r24
    1d20:	14 f0       	brlt	.+4      	; 0x1d26 <main+0x6b6>
    1d22:	86 e0       	ldi	r24, 0x06	; 6
    1d24:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = display_set_time;
    1d26:	e3 e2       	ldi	r30, 0x23	; 35
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	88 2f       	mov	r24, r24
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	80 71       	andi	r24, 0x10	; 16
    1d32:	90 70       	andi	r25, 0x00	; 0
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <main+0x6ca>
    1d38:	ea cc       	rjmp	.-1580   	; 0x170e <main+0x9e>
    1d3a:	86 e0       	ldi	r24, 0x06	; 6
    1d3c:	8d 8b       	std	Y+21, r24	; 0x15
    1d3e:	e7 cc       	rjmp	.-1586   	; 0x170e <main+0x9e>
		break;

	// DISPLAY LEAVE MENU AND WAIT FOR EVENT
	case display_leave_menu:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1d40:	69 85       	ldd	r22, Y+9	; 0x09
    1d42:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d44:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d46:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d48:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	8c 01       	movw	r16, r24
    1d52:	6d 81       	ldd	r22, Y+5	; 0x05
    1d54:	7e 81       	ldd	r23, Y+6	; 0x06
    1d56:	8f 81       	ldd	r24, Y+7	; 0x07
    1d58:	98 85       	ldd	r25, Y+8	; 0x08
    1d5a:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9c 01       	movw	r18, r24
    1d64:	c8 01       	movw	r24, r16
    1d66:	b9 01       	movw	r22, r18
    1d68:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("BACK")
    1d6c:	8b e3       	ldi	r24, 0x3B	; 59
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1d74:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_leave_menu;
    1d78:	8e e0       	ldi	r24, 0x0E	; 14
    1d7a:	8d 8b       	std	Y+21, r24	; 0x15
    1d7c:	c8 cc       	rjmp	.-1648   	; 0x170e <main+0x9e>
		break;
	case state_leave_menu:
		ON_JOYSTICK_LEFT   c = display_set_timer1;
    1d7e:	ec e2       	ldi	r30, 0x2C	; 44
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	84 70       	andi	r24, 0x04	; 4
    1d8a:	90 70       	andi	r25, 0x00	; 0
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	11 f4       	brne	.+4      	; 0x1d94 <main+0x724>
    1d90:	8f e0       	ldi	r24, 0x0F	; 15
    1d92:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_set_time;
    1d94:	ec e2       	ldi	r30, 0x2C	; 44
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	88 70       	andi	r24, 0x08	; 8
    1da0:	90 70       	andi	r25, 0x00	; 0
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	11 f4       	brne	.+4      	; 0x1daa <main+0x73a>
    1da6:	86 e0       	ldi	r24, 0x06	; 6
    1da8:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_UP     c = display_time;
    1daa:	e3 e2       	ldi	r30, 0x23	; 35
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	80 74       	andi	r24, 0x40	; 64
    1db6:	90 70       	andi	r25, 0x00	; 0
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <main+0x74e>
    1dbc:	1d 8a       	std	Y+21, r1	; 0x15
		ON_JOYSTICK_DOWN   c = display_time;
    1dbe:	e3 e2       	ldi	r30, 0x23	; 35
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 23       	and	r24, r24
    1dc6:	0c f0       	brlt	.+2      	; 0x1dca <main+0x75a>
    1dc8:	1d 8a       	std	Y+21, r1	; 0x15
		ON_JOYSTICK_CENTER c = display_time;
    1dca:	e3 e2       	ldi	r30, 0x23	; 35
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	80 71       	andi	r24, 0x10	; 16
    1dd6:	90 70       	andi	r25, 0x00	; 0
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	09 f0       	breq	.+2      	; 0x1dde <main+0x76e>
    1ddc:	98 cc       	rjmp	.-1744   	; 0x170e <main+0x9e>
    1dde:	1d 8a       	std	Y+21, r1	; 0x15
    1de0:	96 cc       	rjmp	.-1748   	; 0x170e <main+0x9e>
		break;

	// DISPLAY SET SOUND AND WAIT FOR EVENT
	case display_set_sound:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1de2:	69 85       	ldd	r22, Y+9	; 0x09
    1de4:	7a 85       	ldd	r23, Y+10	; 0x0a
    1de6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1de8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dea:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	8c 01       	movw	r16, r24
    1df4:	6d 81       	ldd	r22, Y+5	; 0x05
    1df6:	7e 81       	ldd	r23, Y+6	; 0x06
    1df8:	8f 81       	ldd	r24, Y+7	; 0x07
    1dfa:	98 85       	ldd	r25, Y+8	; 0x08
    1dfc:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	9c 01       	movw	r18, r24
    1e06:	c8 01       	movw	r24, r16
    1e08:	b9 01       	movw	r22, r18
    1e0a:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("SOUND")
    1e0e:	80 e4       	ldi	r24, 0x40	; 64
    1e10:	91 e0       	ldi	r25, 0x01	; 1
    1e12:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1e16:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_sound;
    1e1a:	84 e1       	ldi	r24, 0x14	; 20
    1e1c:	8d 8b       	std	Y+21, r24	; 0x15
    1e1e:	77 cc       	rjmp	.-1810   	; 0x170e <main+0x9e>
		break;
	case state_set_sound:
		ON_JOYSTICK_LEFT   c = display_set_time;
    1e20:	ec e2       	ldi	r30, 0x2C	; 44
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	88 2f       	mov	r24, r24
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	84 70       	andi	r24, 0x04	; 4
    1e2c:	90 70       	andi	r25, 0x00	; 0
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	11 f4       	brne	.+4      	; 0x1e36 <main+0x7c6>
    1e32:	86 e0       	ldi	r24, 0x06	; 6
    1e34:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_set_timer2;
    1e36:	ec e2       	ldi	r30, 0x2C	; 44
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	88 2f       	mov	r24, r24
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	88 70       	andi	r24, 0x08	; 8
    1e42:	90 70       	andi	r25, 0x00	; 0
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	11 f4       	brne	.+4      	; 0x1e4c <main+0x7dc>
    1e48:	81 e1       	ldi	r24, 0x11	; 17
    1e4a:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_UP     c = display_sound_volume;
    1e4c:	e3 e2       	ldi	r30, 0x23	; 35
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	88 2f       	mov	r24, r24
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	80 74       	andi	r24, 0x40	; 64
    1e58:	90 70       	andi	r25, 0x00	; 0
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	11 f4       	brne	.+4      	; 0x1e62 <main+0x7f2>
    1e5e:	87 e1       	ldi	r24, 0x17	; 23
    1e60:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   c = display_sound_volume;
    1e62:	e3 e2       	ldi	r30, 0x23	; 35
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	88 23       	and	r24, r24
    1e6a:	14 f0       	brlt	.+4      	; 0x1e70 <main+0x800>
    1e6c:	87 e1       	ldi	r24, 0x17	; 23
    1e6e:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = display_sound_volume;
    1e70:	e3 e2       	ldi	r30, 0x23	; 35
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	80 71       	andi	r24, 0x10	; 16
    1e7c:	90 70       	andi	r25, 0x00	; 0
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <main+0x814>
    1e82:	45 cc       	rjmp	.-1910   	; 0x170e <main+0x9e>
    1e84:	87 e1       	ldi	r24, 0x17	; 23
    1e86:	8d 8b       	std	Y+21, r24	; 0x15
    1e88:	42 cc       	rjmp	.-1916   	; 0x170e <main+0x9e>
		break;

	case display_sound_volume:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1e8a:	69 85       	ldd	r22, Y+9	; 0x09
    1e8c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e90:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e92:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	8c 01       	movw	r16, r24
    1e9c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e9e:	7e 81       	ldd	r23, Y+6	; 0x06
    1ea0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea2:	98 85       	ldd	r25, Y+8	; 0x08
    1ea4:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9c 01       	movw	r18, r24
    1eae:	c8 01       	movw	r24, r16
    1eb0:	b9 01       	movw	r22, r18
    1eb2:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("VOLUME")
    1eb6:	86 e4       	ldi	r24, 0x46	; 70
    1eb8:	91 e0       	ldi	r25, 0x01	; 1
    1eba:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1ebe:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_sound_volume;
    1ec2:	88 e1       	ldi	r24, 0x18	; 24
    1ec4:	8d 8b       	std	Y+21, r24	; 0x15
    1ec6:	23 cc       	rjmp	.-1978   	; 0x170e <main+0x9e>
		break;
	case state_sound_volume:
		ON_JOYSTICK_UP     c = display_set_sound;
    1ec8:	e3 e2       	ldi	r30, 0x23	; 35
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 2f       	mov	r24, r24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	80 74       	andi	r24, 0x40	; 64
    1ed4:	90 70       	andi	r25, 0x00	; 0
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	11 f4       	brne	.+4      	; 0x1ede <main+0x86e>
    1eda:	83 e1       	ldi	r24, 0x13	; 19
    1edc:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   c = display_set_volume;
    1ede:	e3 e2       	ldi	r30, 0x23	; 35
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	88 23       	and	r24, r24
    1ee6:	14 f0       	brlt	.+4      	; 0x1eec <main+0x87c>
    1ee8:	8a e1       	ldi	r24, 0x1A	; 26
    1eea:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = display_set_volume;
    1eec:	e3 e2       	ldi	r30, 0x23	; 35
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	80 71       	andi	r24, 0x10	; 16
    1ef8:	90 70       	andi	r25, 0x00	; 0
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <main+0x890>
    1efe:	07 cc       	rjmp	.-2034   	; 0x170e <main+0x9e>
    1f00:	8a e1       	ldi	r24, 0x1A	; 26
    1f02:	8d 8b       	std	Y+21, r24	; 0x15
    1f04:	04 cc       	rjmp	.-2040   	; 0x170e <main+0x9e>
		break;
	case display_set_volume:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1f06:	69 85       	ldd	r22, Y+9	; 0x09
    1f08:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f0e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	8c 01       	movw	r16, r24
    1f18:	6d 81       	ldd	r22, Y+5	; 0x05
    1f1a:	7e 81       	ldd	r23, Y+6	; 0x06
    1f1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f1e:	98 85       	ldd	r25, Y+8	; 0x08
    1f20:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9c 01       	movw	r18, r24
    1f2a:	c8 01       	movw	r24, r16
    1f2c:	b9 01       	movw	r22, r18
    1f2e:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_D_NUMBER(volume,3,0)
    1f32:	8e 89       	ldd	r24, Y+22	; 0x16
    1f34:	9f 89       	ldd	r25, Y+23	; 0x17
    1f36:	aa 27       	eor	r26, r26
    1f38:	97 fd       	sbrc	r25, 7
    1f3a:	a0 95       	com	r26
    1f3c:	ba 2f       	mov	r27, r26
    1f3e:	bc 01       	movw	r22, r24
    1f40:	cd 01       	movw	r24, r26
    1f42:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__floatsisf>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	ed e3       	ldi	r30, 0x3D	; 61
    1f4c:	f3 e0       	ldi	r31, 0x03	; 3
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	43 e0       	ldi	r20, 0x03	; 3
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	8f 01       	movw	r16, r30
    1f58:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <dtostrf>
    1f5c:	8d e3       	ldi	r24, 0x3D	; 61
    1f5e:	93 e0       	ldi	r25, 0x03	; 3
    1f60:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1f64:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_volume;
    1f68:	8b e1       	ldi	r24, 0x1B	; 27
    1f6a:	8d 8b       	std	Y+21, r24	; 0x15
    1f6c:	d0 cb       	rjmp	.-2144   	; 0x170e <main+0x9e>
		break;
	case state_set_volume:
		//wait for input
		ON_JOYSTICK_UP     c = display_sound_volume;
    1f6e:	e3 e2       	ldi	r30, 0x23	; 35
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	88 2f       	mov	r24, r24
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	80 74       	andi	r24, 0x40	; 64
    1f7a:	90 70       	andi	r25, 0x00	; 0
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	11 f4       	brne	.+4      	; 0x1f84 <main+0x914>
    1f80:	87 e1       	ldi	r24, 0x17	; 23
    1f82:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   c = display_sound_volume;
    1f84:	e3 e2       	ldi	r30, 0x23	; 35
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	88 23       	and	r24, r24
    1f8c:	14 f0       	brlt	.+4      	; 0x1f92 <main+0x922>
    1f8e:	87 e1       	ldi	r24, 0x17	; 23
    1f90:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = display_sound_volume;
    1f92:	e3 e2       	ldi	r30, 0x23	; 35
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	88 2f       	mov	r24, r24
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	80 71       	andi	r24, 0x10	; 16
    1f9e:	90 70       	andi	r25, 0x00	; 0
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	11 f4       	brne	.+4      	; 0x1fa8 <main+0x938>
    1fa4:	87 e1       	ldi	r24, 0x17	; 23
    1fa6:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_LEFT   set_volume(-1, v);
    1fa8:	ec e2       	ldi	r30, 0x2C	; 44
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	88 2f       	mov	r24, r24
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	84 70       	andi	r24, 0x04	; 4
    1fb4:	90 70       	andi	r25, 0x00	; 0
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	39 f4       	brne	.+14     	; 0x1fc8 <main+0x958>
    1fba:	2b 89       	ldd	r18, Y+19	; 0x13
    1fbc:	3c 89       	ldd	r19, Y+20	; 0x14
    1fbe:	8f ef       	ldi	r24, 0xFF	; 255
    1fc0:	9f ef       	ldi	r25, 0xFF	; 255
    1fc2:	b9 01       	movw	r22, r18
    1fc4:	0e 94 11 0a 	call	0x1422	; 0x1422 <set_volume>
		ON_JOYSTICK_RIGHT  set_volume(+1, v);
    1fc8:	ec e2       	ldi	r30, 0x2C	; 44
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	88 2f       	mov	r24, r24
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	88 70       	andi	r24, 0x08	; 8
    1fd4:	90 70       	andi	r25, 0x00	; 0
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <main+0x96c>
    1fda:	99 cb       	rjmp	.-2254   	; 0x170e <main+0x9e>
    1fdc:	2b 89       	ldd	r18, Y+19	; 0x13
    1fde:	3c 89       	ldd	r19, Y+20	; 0x14
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	b9 01       	movw	r22, r18
    1fe6:	0e 94 11 0a 	call	0x1422	; 0x1422 <set_volume>
    1fea:	91 cb       	rjmp	.-2270   	; 0x170e <main+0x9e>
		break;

	// DISPLAY SET TIMER1 AND WAIT FOR EVENT
	case display_set_timer1:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    1fec:	69 85       	ldd	r22, Y+9	; 0x09
    1fee:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ff0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ff2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ff4:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	8c 01       	movw	r16, r24
    1ffe:	6d 81       	ldd	r22, Y+5	; 0x05
    2000:	7e 81       	ldd	r23, Y+6	; 0x06
    2002:	8f 81       	ldd	r24, Y+7	; 0x07
    2004:	98 85       	ldd	r25, Y+8	; 0x08
    2006:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	9c 01       	movw	r18, r24
    2010:	c8 01       	movw	r24, r16
    2012:	b9 01       	movw	r22, r18
    2014:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("SET T1")
    2018:	8d e4       	ldi	r24, 0x4D	; 77
    201a:	91 e0       	ldi	r25, 0x01	; 1
    201c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    2020:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer1;
    2024:	80 e1       	ldi	r24, 0x10	; 16
    2026:	8d 8b       	std	Y+21, r24	; 0x15
    2028:	72 cb       	rjmp	.-2332   	; 0x170e <main+0x9e>
		break;
	case state_set_timer1:
		ON_JOYSTICK_LEFT   c = display_set_timer2;
    202a:	ec e2       	ldi	r30, 0x2C	; 44
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	84 70       	andi	r24, 0x04	; 4
    2036:	90 70       	andi	r25, 0x00	; 0
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	11 f4       	brne	.+4      	; 0x2040 <main+0x9d0>
    203c:	81 e1       	ldi	r24, 0x11	; 17
    203e:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_leave_menu;
    2040:	ec e2       	ldi	r30, 0x2C	; 44
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	88 70       	andi	r24, 0x08	; 8
    204c:	90 70       	andi	r25, 0x00	; 0
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	11 f4       	brne	.+4      	; 0x2056 <main+0x9e6>
    2052:	8d e0       	ldi	r24, 0x0D	; 13
    2054:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_UP     c = display_set_timer1_on_off;
    2056:	e3 e2       	ldi	r30, 0x23	; 35
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	88 2f       	mov	r24, r24
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	80 74       	andi	r24, 0x40	; 64
    2062:	90 70       	andi	r25, 0x00	; 0
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	11 f4       	brne	.+4      	; 0x206c <main+0x9fc>
    2068:	8c e1       	ldi	r24, 0x1C	; 28
    206a:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   c = display_set_timer1_on_off;
    206c:	e3 e2       	ldi	r30, 0x23	; 35
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	88 23       	and	r24, r24
    2074:	14 f0       	brlt	.+4      	; 0x207a <main+0xa0a>
    2076:	8c e1       	ldi	r24, 0x1C	; 28
    2078:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = display_set_timer1_on_off;
    207a:	e3 e2       	ldi	r30, 0x23	; 35
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	88 2f       	mov	r24, r24
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	80 71       	andi	r24, 0x10	; 16
    2086:	90 70       	andi	r25, 0x00	; 0
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	09 f0       	breq	.+2      	; 0x208e <main+0xa1e>
    208c:	40 cb       	rjmp	.-2432   	; 0x170e <main+0x9e>
    208e:	8c e1       	ldi	r24, 0x1C	; 28
    2090:	8d 8b       	std	Y+21, r24	; 0x15
    2092:	3d cb       	rjmp	.-2438   	; 0x170e <main+0x9e>
		break;

	// DISPLAY SET TIMER2 AND WAIT FOR EVENT
	case display_set_timer2:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    2094:	69 85       	ldd	r22, Y+9	; 0x09
    2096:	7a 85       	ldd	r23, Y+10	; 0x0a
    2098:	8b 85       	ldd	r24, Y+11	; 0x0b
    209a:	9c 85       	ldd	r25, Y+12	; 0x0c
    209c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	8c 01       	movw	r16, r24
    20a6:	6d 81       	ldd	r22, Y+5	; 0x05
    20a8:	7e 81       	ldd	r23, Y+6	; 0x06
    20aa:	8f 81       	ldd	r24, Y+7	; 0x07
    20ac:	98 85       	ldd	r25, Y+8	; 0x08
    20ae:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9c 01       	movw	r18, r24
    20b8:	c8 01       	movw	r24, r16
    20ba:	b9 01       	movw	r22, r18
    20bc:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("SET T2")
    20c0:	84 e5       	ldi	r24, 0x54	; 84
    20c2:	91 e0       	ldi	r25, 0x01	; 1
    20c4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    20c8:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer2;
    20cc:	82 e1       	ldi	r24, 0x12	; 18
    20ce:	8d 8b       	std	Y+21, r24	; 0x15
    20d0:	1e cb       	rjmp	.-2500   	; 0x170e <main+0x9e>
		break;
	case state_set_timer2:
		ON_JOYSTICK_LEFT   c = display_set_sound;
    20d2:	ec e2       	ldi	r30, 0x2C	; 44
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	88 2f       	mov	r24, r24
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	84 70       	andi	r24, 0x04	; 4
    20de:	90 70       	andi	r25, 0x00	; 0
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	11 f4       	brne	.+4      	; 0x20e8 <main+0xa78>
    20e4:	83 e1       	ldi	r24, 0x13	; 19
    20e6:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_set_timer1;
    20e8:	ec e2       	ldi	r30, 0x2C	; 44
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	88 2f       	mov	r24, r24
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	88 70       	andi	r24, 0x08	; 8
    20f4:	90 70       	andi	r25, 0x00	; 0
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	11 f4       	brne	.+4      	; 0x20fe <main+0xa8e>
    20fa:	8f e0       	ldi	r24, 0x0F	; 15
    20fc:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_UP     c = display_set_timer2_on_off;
    20fe:	e3 e2       	ldi	r30, 0x23	; 35
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	80 74       	andi	r24, 0x40	; 64
    210a:	90 70       	andi	r25, 0x00	; 0
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	11 f4       	brne	.+4      	; 0x2114 <main+0xaa4>
    2110:	8e e1       	ldi	r24, 0x1E	; 30
    2112:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   c = display_set_timer2_on_off;
    2114:	e3 e2       	ldi	r30, 0x23	; 35
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	88 23       	and	r24, r24
    211c:	14 f0       	brlt	.+4      	; 0x2122 <main+0xab2>
    211e:	8e e1       	ldi	r24, 0x1E	; 30
    2120:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = display_set_timer2_on_off;
    2122:	e3 e2       	ldi	r30, 0x23	; 35
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	88 2f       	mov	r24, r24
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	80 71       	andi	r24, 0x10	; 16
    212e:	90 70       	andi	r25, 0x00	; 0
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	09 f0       	breq	.+2      	; 0x2136 <main+0xac6>
    2134:	ec ca       	rjmp	.-2600   	; 0x170e <main+0x9e>
    2136:	8e e1       	ldi	r24, 0x1E	; 30
    2138:	8d 8b       	std	Y+21, r24	; 0x15
    213a:	e9 ca       	rjmp	.-2606   	; 0x170e <main+0x9e>
		break;
	
	// DISPLAY SET TIMER1 ON/OFF AND WAIT FOR EVENT
	case display_set_timer1_on_off:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    213c:	69 85       	ldd	r22, Y+9	; 0x09
    213e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2140:	8b 85       	ldd	r24, Y+11	; 0x0b
    2142:	9c 85       	ldd	r25, Y+12	; 0x0c
    2144:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	8c 01       	movw	r16, r24
    214e:	6d 81       	ldd	r22, Y+5	; 0x05
    2150:	7e 81       	ldd	r23, Y+6	; 0x06
    2152:	8f 81       	ldd	r24, Y+7	; 0x07
    2154:	98 85       	ldd	r25, Y+8	; 0x08
    2156:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9c 01       	movw	r18, r24
    2160:	c8 01       	movw	r24, r16
    2162:	b9 01       	movw	r22, r18
    2164:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("ON/OFF")
    2168:	8b e5       	ldi	r24, 0x5B	; 91
    216a:	91 e0       	ldi	r25, 0x01	; 1
    216c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    2170:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer1_on_off;
    2174:	8d e1       	ldi	r24, 0x1D	; 29
    2176:	8d 8b       	std	Y+21, r24	; 0x15
    2178:	ca ca       	rjmp	.-2668   	; 0x170e <main+0x9e>
		break;
	case state_set_timer1_on_off:
		ON_JOYSTICK_LEFT   c = display_set_timer1_countdown;
    217a:	ec e2       	ldi	r30, 0x2C	; 44
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	84 70       	andi	r24, 0x04	; 4
    2186:	90 70       	andi	r25, 0x00	; 0
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	11 f4       	brne	.+4      	; 0x2190 <main+0xb20>
    218c:	8a e2       	ldi	r24, 0x2A	; 42
    218e:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_set_timer1_countdown;
    2190:	ec e2       	ldi	r30, 0x2C	; 44
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	88 70       	andi	r24, 0x08	; 8
    219c:	90 70       	andi	r25, 0x00	; 0
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	11 f4       	brne	.+4      	; 0x21a6 <main+0xb36>
    21a2:	8a e2       	ldi	r24, 0x2A	; 42
    21a4:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_UP     c = display_set_timer1;
    21a6:	e3 e2       	ldi	r30, 0x23	; 35
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	88 2f       	mov	r24, r24
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	80 74       	andi	r24, 0x40	; 64
    21b2:	90 70       	andi	r25, 0x00	; 0
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	11 f4       	brne	.+4      	; 0x21bc <main+0xb4c>
    21b8:	8f e0       	ldi	r24, 0x0F	; 15
    21ba:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   c = get_timer1_on_off;
    21bc:	e3 e2       	ldi	r30, 0x23	; 35
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	88 23       	and	r24, r24
    21c4:	14 f0       	brlt	.+4      	; 0x21ca <main+0xb5a>
    21c6:	80 e2       	ldi	r24, 0x20	; 32
    21c8:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = get_timer1_on_off;
    21ca:	e3 e2       	ldi	r30, 0x23	; 35
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	88 2f       	mov	r24, r24
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	80 71       	andi	r24, 0x10	; 16
    21d6:	90 70       	andi	r25, 0x00	; 0
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	09 f0       	breq	.+2      	; 0x21de <main+0xb6e>
    21dc:	98 ca       	rjmp	.-2768   	; 0x170e <main+0x9e>
    21de:	80 e2       	ldi	r24, 0x20	; 32
    21e0:	8d 8b       	std	Y+21, r24	; 0x15
    21e2:	95 ca       	rjmp	.-2774   	; 0x170e <main+0x9e>
		break;

	// ASK IF TIMER1 IS ACTUAL ON OR OFF --> GO IN THE STATE
	case get_timer1_on_off:
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    21e4:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		//if ( timer1_is_on ) c = display_timer1_on; //function get_timer1_on_off_settings
		//else c = display_timer1_off;
		#if DEBUG_MODE
			c = display_timer1_on;
    21e8:	81 e2       	ldi	r24, 0x21	; 33
    21ea:	8d 8b       	std	Y+21, r24	; 0x15
    21ec:	90 ca       	rjmp	.-2784   	; 0x170e <main+0x9e>
		#endif
		break;
	case display_timer1_on:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    21ee:	69 85       	ldd	r22, Y+9	; 0x09
    21f0:	7a 85       	ldd	r23, Y+10	; 0x0a
    21f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    21f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    21f6:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	8c 01       	movw	r16, r24
    2200:	6d 81       	ldd	r22, Y+5	; 0x05
    2202:	7e 81       	ldd	r23, Y+6	; 0x06
    2204:	8f 81       	ldd	r24, Y+7	; 0x07
    2206:	98 85       	ldd	r25, Y+8	; 0x08
    2208:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9c 01       	movw	r18, r24
    2212:	c8 01       	movw	r24, r16
    2214:	b9 01       	movw	r22, r18
    2216:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("ON")
    221a:	82 e6       	ldi	r24, 0x62	; 98
    221c:	91 e0       	ldi	r25, 0x01	; 1
    221e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    2222:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer1_on;
    2226:	82 e2       	ldi	r24, 0x22	; 34
    2228:	8d 8b       	std	Y+21, r24	; 0x15
    222a:	71 ca       	rjmp	.-2846   	; 0x170e <main+0x9e>
		break;
	case state_timer1_on:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    222c:	69 85       	ldd	r22, Y+9	; 0x09
    222e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2230:	8b 85       	ldd	r24, Y+11	; 0x0b
    2232:	9c 85       	ldd	r25, Y+12	; 0x0c
    2234:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	8c 01       	movw	r16, r24
    223e:	6d 81       	ldd	r22, Y+5	; 0x05
    2240:	7e 81       	ldd	r23, Y+6	; 0x06
    2242:	8f 81       	ldd	r24, Y+7	; 0x07
    2244:	98 85       	ldd	r25, Y+8	; 0x08
    2246:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9c 01       	movw	r18, r24
    2250:	c8 01       	movw	r24, r16
    2252:	b9 01       	movw	r22, r18
    2254:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		ON_JOYSTICK_LEFT   c = display_timer1_off;
    2258:	ec e2       	ldi	r30, 0x2C	; 44
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	88 2f       	mov	r24, r24
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	84 70       	andi	r24, 0x04	; 4
    2264:	90 70       	andi	r25, 0x00	; 0
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	11 f4       	brne	.+4      	; 0x226e <main+0xbfe>
    226a:	83 e2       	ldi	r24, 0x23	; 35
    226c:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_timer1_off;
    226e:	ec e2       	ldi	r30, 0x2C	; 44
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	88 2f       	mov	r24, r24
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	88 70       	andi	r24, 0x08	; 8
    227a:	90 70       	andi	r25, 0x00	; 0
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	11 f4       	brne	.+4      	; 0x2284 <main+0xc14>
    2280:	83 e2       	ldi	r24, 0x23	; 35
    2282:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_UP     { c = display_set_timer1_on_off; } //function set_timer2_on_off_settings
    2284:	e3 e2       	ldi	r30, 0x23	; 35
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	88 2f       	mov	r24, r24
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	80 74       	andi	r24, 0x40	; 64
    2290:	90 70       	andi	r25, 0x00	; 0
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	11 f4       	brne	.+4      	; 0x229a <main+0xc2a>
    2296:	8c e1       	ldi	r24, 0x1C	; 28
    2298:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   { c = display_set_timer1_on_off; } //function set_timer2_on_off_settings
    229a:	e3 e2       	ldi	r30, 0x23	; 35
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	88 23       	and	r24, r24
    22a2:	14 f0       	brlt	.+4      	; 0x22a8 <main+0xc38>
    22a4:	8c e1       	ldi	r24, 0x1C	; 28
    22a6:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER { c = display_set_timer1_on_off; } //function set_timer2_on_off_settings
    22a8:	e3 e2       	ldi	r30, 0x23	; 35
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	88 2f       	mov	r24, r24
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	80 71       	andi	r24, 0x10	; 16
    22b4:	90 70       	andi	r25, 0x00	; 0
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	09 f0       	breq	.+2      	; 0x22bc <main+0xc4c>
    22ba:	29 ca       	rjmp	.-2990   	; 0x170e <main+0x9e>
    22bc:	8c e1       	ldi	r24, 0x1C	; 28
    22be:	8d 8b       	std	Y+21, r24	; 0x15
    22c0:	26 ca       	rjmp	.-2996   	; 0x170e <main+0x9e>
		break;
	case display_timer1_off:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    22c2:	69 85       	ldd	r22, Y+9	; 0x09
    22c4:	7a 85       	ldd	r23, Y+10	; 0x0a
    22c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    22c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    22ca:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	8c 01       	movw	r16, r24
    22d4:	6d 81       	ldd	r22, Y+5	; 0x05
    22d6:	7e 81       	ldd	r23, Y+6	; 0x06
    22d8:	8f 81       	ldd	r24, Y+7	; 0x07
    22da:	98 85       	ldd	r25, Y+8	; 0x08
    22dc:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9c 01       	movw	r18, r24
    22e6:	c8 01       	movw	r24, r16
    22e8:	b9 01       	movw	r22, r18
    22ea:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("OFF")
    22ee:	85 e6       	ldi	r24, 0x65	; 101
    22f0:	91 e0       	ldi	r25, 0x01	; 1
    22f2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    22f6:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer1_off;
    22fa:	84 e2       	ldi	r24, 0x24	; 36
    22fc:	8d 8b       	std	Y+21, r24	; 0x15
    22fe:	07 ca       	rjmp	.-3058   	; 0x170e <main+0x9e>
		break;
	case state_timer1_off:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    2300:	69 85       	ldd	r22, Y+9	; 0x09
    2302:	7a 85       	ldd	r23, Y+10	; 0x0a
    2304:	8b 85       	ldd	r24, Y+11	; 0x0b
    2306:	9c 85       	ldd	r25, Y+12	; 0x0c
    2308:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8c 01       	movw	r16, r24
    2312:	6d 81       	ldd	r22, Y+5	; 0x05
    2314:	7e 81       	ldd	r23, Y+6	; 0x06
    2316:	8f 81       	ldd	r24, Y+7	; 0x07
    2318:	98 85       	ldd	r25, Y+8	; 0x08
    231a:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9c 01       	movw	r18, r24
    2324:	c8 01       	movw	r24, r16
    2326:	b9 01       	movw	r22, r18
    2328:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		ON_JOYSTICK_LEFT   c = display_timer1_on;
    232c:	ec e2       	ldi	r30, 0x2C	; 44
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	88 2f       	mov	r24, r24
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	84 70       	andi	r24, 0x04	; 4
    2338:	90 70       	andi	r25, 0x00	; 0
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	11 f4       	brne	.+4      	; 0x2342 <main+0xcd2>
    233e:	81 e2       	ldi	r24, 0x21	; 33
    2340:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_timer1_on;
    2342:	ec e2       	ldi	r30, 0x2C	; 44
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	88 70       	andi	r24, 0x08	; 8
    234e:	90 70       	andi	r25, 0x00	; 0
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	11 f4       	brne	.+4      	; 0x2358 <main+0xce8>
    2354:	81 e2       	ldi	r24, 0x21	; 33
    2356:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_UP     { c = display_set_timer1_on_off; } //function set_timer2_on_off_settings
    2358:	e3 e2       	ldi	r30, 0x23	; 35
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	88 2f       	mov	r24, r24
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	80 74       	andi	r24, 0x40	; 64
    2364:	90 70       	andi	r25, 0x00	; 0
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	11 f4       	brne	.+4      	; 0x236e <main+0xcfe>
    236a:	8c e1       	ldi	r24, 0x1C	; 28
    236c:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   { c = display_set_timer1_on_off; } //function set_timer2_on_off_settings
    236e:	e3 e2       	ldi	r30, 0x23	; 35
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	88 23       	and	r24, r24
    2376:	14 f0       	brlt	.+4      	; 0x237c <main+0xd0c>
    2378:	8c e1       	ldi	r24, 0x1C	; 28
    237a:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER { c = display_set_timer1_on_off; } //function set_timer2_on_off_settings
    237c:	e3 e2       	ldi	r30, 0x23	; 35
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	88 2f       	mov	r24, r24
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	80 71       	andi	r24, 0x10	; 16
    2388:	90 70       	andi	r25, 0x00	; 0
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	09 f0       	breq	.+2      	; 0x2390 <main+0xd20>
    238e:	bf c9       	rjmp	.-3202   	; 0x170e <main+0x9e>
    2390:	8c e1       	ldi	r24, 0x1C	; 28
    2392:	8d 8b       	std	Y+21, r24	; 0x15
    2394:	bc c9       	rjmp	.-3208   	; 0x170e <main+0x9e>
		break;

	// DISPLAY SET TIMER2 ON/OFF AND WAIT FOR EVENT
	case display_set_timer2_on_off:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    2396:	69 85       	ldd	r22, Y+9	; 0x09
    2398:	7a 85       	ldd	r23, Y+10	; 0x0a
    239a:	8b 85       	ldd	r24, Y+11	; 0x0b
    239c:	9c 85       	ldd	r25, Y+12	; 0x0c
    239e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	8c 01       	movw	r16, r24
    23a8:	6d 81       	ldd	r22, Y+5	; 0x05
    23aa:	7e 81       	ldd	r23, Y+6	; 0x06
    23ac:	8f 81       	ldd	r24, Y+7	; 0x07
    23ae:	98 85       	ldd	r25, Y+8	; 0x08
    23b0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9c 01       	movw	r18, r24
    23ba:	c8 01       	movw	r24, r16
    23bc:	b9 01       	movw	r22, r18
    23be:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("ON/OFF")
    23c2:	8b e5       	ldi	r24, 0x5B	; 91
    23c4:	91 e0       	ldi	r25, 0x01	; 1
    23c6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    23ca:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer2_on_off;
    23ce:	8f e1       	ldi	r24, 0x1F	; 31
    23d0:	8d 8b       	std	Y+21, r24	; 0x15
    23d2:	9d c9       	rjmp	.-3270   	; 0x170e <main+0x9e>
		break;
	case state_set_timer2_on_off:
		ON_JOYSTICK_LEFT   c = display_set_timer2_countdown;
    23d4:	ec e2       	ldi	r30, 0x2C	; 44
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	84 70       	andi	r24, 0x04	; 4
    23e0:	90 70       	andi	r25, 0x00	; 0
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	11 f4       	brne	.+4      	; 0x23ea <main+0xd7a>
    23e6:	8c e2       	ldi	r24, 0x2C	; 44
    23e8:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_set_timer2_countdown;
    23ea:	ec e2       	ldi	r30, 0x2C	; 44
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	88 70       	andi	r24, 0x08	; 8
    23f6:	90 70       	andi	r25, 0x00	; 0
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	11 f4       	brne	.+4      	; 0x2400 <main+0xd90>
    23fc:	8c e2       	ldi	r24, 0x2C	; 44
    23fe:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_UP     c = display_set_timer2;
    2400:	e3 e2       	ldi	r30, 0x23	; 35
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	80 74       	andi	r24, 0x40	; 64
    240c:	90 70       	andi	r25, 0x00	; 0
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	11 f4       	brne	.+4      	; 0x2416 <main+0xda6>
    2412:	81 e1       	ldi	r24, 0x11	; 17
    2414:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   c = get_timer2_on_off;
    2416:	e3 e2       	ldi	r30, 0x23	; 35
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	88 23       	and	r24, r24
    241e:	14 f0       	brlt	.+4      	; 0x2424 <main+0xdb4>
    2420:	85 e2       	ldi	r24, 0x25	; 37
    2422:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = get_timer2_on_off;
    2424:	e3 e2       	ldi	r30, 0x23	; 35
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	88 2f       	mov	r24, r24
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	80 71       	andi	r24, 0x10	; 16
    2430:	90 70       	andi	r25, 0x00	; 0
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	09 f0       	breq	.+2      	; 0x2438 <main+0xdc8>
    2436:	6b c9       	rjmp	.-3370   	; 0x170e <main+0x9e>
    2438:	85 e2       	ldi	r24, 0x25	; 37
    243a:	8d 8b       	std	Y+21, r24	; 0x15
    243c:	68 c9       	rjmp	.-3376   	; 0x170e <main+0x9e>
		break;

	// ASK IF TIMER2 IS ACTUAL ON OR OFF --> GO IN THE STATE
	case get_timer2_on_off:
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    243e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		//if ( timer2_is_on ) c = display_timer2_on; //function get_timer2_on_off_settings
		//else c = display_timer2_off;
		#if DEBUG_MODE
			c = display_timer2_on;
    2442:	86 e2       	ldi	r24, 0x26	; 38
    2444:	8d 8b       	std	Y+21, r24	; 0x15
    2446:	63 c9       	rjmp	.-3386   	; 0x170e <main+0x9e>
		#endif
		break;
	case display_timer2_on:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    2448:	69 85       	ldd	r22, Y+9	; 0x09
    244a:	7a 85       	ldd	r23, Y+10	; 0x0a
    244c:	8b 85       	ldd	r24, Y+11	; 0x0b
    244e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2450:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	8c 01       	movw	r16, r24
    245a:	6d 81       	ldd	r22, Y+5	; 0x05
    245c:	7e 81       	ldd	r23, Y+6	; 0x06
    245e:	8f 81       	ldd	r24, Y+7	; 0x07
    2460:	98 85       	ldd	r25, Y+8	; 0x08
    2462:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9c 01       	movw	r18, r24
    246c:	c8 01       	movw	r24, r16
    246e:	b9 01       	movw	r22, r18
    2470:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("ON")
    2474:	82 e6       	ldi	r24, 0x62	; 98
    2476:	91 e0       	ldi	r25, 0x01	; 1
    2478:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    247c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer2_on;
    2480:	87 e2       	ldi	r24, 0x27	; 39
    2482:	8d 8b       	std	Y+21, r24	; 0x15
    2484:	44 c9       	rjmp	.-3448   	; 0x170e <main+0x9e>
		break;
	case state_timer2_on:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    2486:	69 85       	ldd	r22, Y+9	; 0x09
    2488:	7a 85       	ldd	r23, Y+10	; 0x0a
    248a:	8b 85       	ldd	r24, Y+11	; 0x0b
    248c:	9c 85       	ldd	r25, Y+12	; 0x0c
    248e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	8c 01       	movw	r16, r24
    2498:	6d 81       	ldd	r22, Y+5	; 0x05
    249a:	7e 81       	ldd	r23, Y+6	; 0x06
    249c:	8f 81       	ldd	r24, Y+7	; 0x07
    249e:	98 85       	ldd	r25, Y+8	; 0x08
    24a0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9c 01       	movw	r18, r24
    24aa:	c8 01       	movw	r24, r16
    24ac:	b9 01       	movw	r22, r18
    24ae:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		ON_JOYSTICK_LEFT   c = display_timer2_off;
    24b2:	ec e2       	ldi	r30, 0x2C	; 44
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	84 70       	andi	r24, 0x04	; 4
    24be:	90 70       	andi	r25, 0x00	; 0
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	11 f4       	brne	.+4      	; 0x24c8 <main+0xe58>
    24c4:	88 e2       	ldi	r24, 0x28	; 40
    24c6:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_timer2_off;
    24c8:	ec e2       	ldi	r30, 0x2C	; 44
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	88 70       	andi	r24, 0x08	; 8
    24d4:	90 70       	andi	r25, 0x00	; 0
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	11 f4       	brne	.+4      	; 0x24de <main+0xe6e>
    24da:	88 e2       	ldi	r24, 0x28	; 40
    24dc:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_UP     { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    24de:	e3 e2       	ldi	r30, 0x23	; 35
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	80 74       	andi	r24, 0x40	; 64
    24ea:	90 70       	andi	r25, 0x00	; 0
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	11 f4       	brne	.+4      	; 0x24f4 <main+0xe84>
    24f0:	8e e1       	ldi	r24, 0x1E	; 30
    24f2:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    24f4:	e3 e2       	ldi	r30, 0x23	; 35
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	88 23       	and	r24, r24
    24fc:	14 f0       	brlt	.+4      	; 0x2502 <main+0xe92>
    24fe:	8e e1       	ldi	r24, 0x1E	; 30
    2500:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    2502:	e3 e2       	ldi	r30, 0x23	; 35
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	88 2f       	mov	r24, r24
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	80 71       	andi	r24, 0x10	; 16
    250e:	90 70       	andi	r25, 0x00	; 0
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	09 f0       	breq	.+2      	; 0x2516 <main+0xea6>
    2514:	fc c8       	rjmp	.-3592   	; 0x170e <main+0x9e>
    2516:	8e e1       	ldi	r24, 0x1E	; 30
    2518:	8d 8b       	std	Y+21, r24	; 0x15
    251a:	f9 c8       	rjmp	.-3598   	; 0x170e <main+0x9e>
		break;
	case display_timer2_off:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    251c:	69 85       	ldd	r22, Y+9	; 0x09
    251e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2520:	8b 85       	ldd	r24, Y+11	; 0x0b
    2522:	9c 85       	ldd	r25, Y+12	; 0x0c
    2524:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	8c 01       	movw	r16, r24
    252e:	6d 81       	ldd	r22, Y+5	; 0x05
    2530:	7e 81       	ldd	r23, Y+6	; 0x06
    2532:	8f 81       	ldd	r24, Y+7	; 0x07
    2534:	98 85       	ldd	r25, Y+8	; 0x08
    2536:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9c 01       	movw	r18, r24
    2540:	c8 01       	movw	r24, r16
    2542:	b9 01       	movw	r22, r18
    2544:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("OFF")
    2548:	85 e6       	ldi	r24, 0x65	; 101
    254a:	91 e0       	ldi	r25, 0x01	; 1
    254c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    2550:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer2_off;
    2554:	89 e2       	ldi	r24, 0x29	; 41
    2556:	8d 8b       	std	Y+21, r24	; 0x15
    2558:	da c8       	rjmp	.-3660   	; 0x170e <main+0x9e>
		break;
	case state_timer2_off:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    255a:	69 85       	ldd	r22, Y+9	; 0x09
    255c:	7a 85       	ldd	r23, Y+10	; 0x0a
    255e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2560:	9c 85       	ldd	r25, Y+12	; 0x0c
    2562:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	8c 01       	movw	r16, r24
    256c:	6d 81       	ldd	r22, Y+5	; 0x05
    256e:	7e 81       	ldd	r23, Y+6	; 0x06
    2570:	8f 81       	ldd	r24, Y+7	; 0x07
    2572:	98 85       	ldd	r25, Y+8	; 0x08
    2574:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9c 01       	movw	r18, r24
    257e:	c8 01       	movw	r24, r16
    2580:	b9 01       	movw	r22, r18
    2582:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		ON_JOYSTICK_LEFT   c = display_timer2_on;
    2586:	ec e2       	ldi	r30, 0x2C	; 44
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	84 70       	andi	r24, 0x04	; 4
    2592:	90 70       	andi	r25, 0x00	; 0
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	11 f4       	brne	.+4      	; 0x259c <main+0xf2c>
    2598:	86 e2       	ldi	r24, 0x26	; 38
    259a:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_timer2_on;
    259c:	ec e2       	ldi	r30, 0x2C	; 44
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	88 2f       	mov	r24, r24
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	88 70       	andi	r24, 0x08	; 8
    25a8:	90 70       	andi	r25, 0x00	; 0
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	11 f4       	brne	.+4      	; 0x25b2 <main+0xf42>
    25ae:	86 e2       	ldi	r24, 0x26	; 38
    25b0:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_UP     { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    25b2:	e3 e2       	ldi	r30, 0x23	; 35
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	88 2f       	mov	r24, r24
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	80 74       	andi	r24, 0x40	; 64
    25be:	90 70       	andi	r25, 0x00	; 0
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	11 f4       	brne	.+4      	; 0x25c8 <main+0xf58>
    25c4:	8e e1       	ldi	r24, 0x1E	; 30
    25c6:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    25c8:	e3 e2       	ldi	r30, 0x23	; 35
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	88 23       	and	r24, r24
    25d0:	14 f0       	brlt	.+4      	; 0x25d6 <main+0xf66>
    25d2:	8e e1       	ldi	r24, 0x1E	; 30
    25d4:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    25d6:	e3 e2       	ldi	r30, 0x23	; 35
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	88 2f       	mov	r24, r24
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	80 71       	andi	r24, 0x10	; 16
    25e2:	90 70       	andi	r25, 0x00	; 0
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	09 f0       	breq	.+2      	; 0x25ea <main+0xf7a>
    25e8:	92 c8       	rjmp	.-3804   	; 0x170e <main+0x9e>
    25ea:	8e e1       	ldi	r24, 0x1E	; 30
    25ec:	8d 8b       	std	Y+21, r24	; 0x15
    25ee:	8f c8       	rjmp	.-3810   	; 0x170e <main+0x9e>
		break;

	// DISPLAY SET TIMER1 COUNTDOWN AND WAIT FOR EVENT
	case display_set_timer1_countdown:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    25f0:	69 85       	ldd	r22, Y+9	; 0x09
    25f2:	7a 85       	ldd	r23, Y+10	; 0x0a
    25f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    25f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    25f8:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	8c 01       	movw	r16, r24
    2602:	6d 81       	ldd	r22, Y+5	; 0x05
    2604:	7e 81       	ldd	r23, Y+6	; 0x06
    2606:	8f 81       	ldd	r24, Y+7	; 0x07
    2608:	98 85       	ldd	r25, Y+8	; 0x08
    260a:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9c 01       	movw	r18, r24
    2614:	c8 01       	movw	r24, r16
    2616:	b9 01       	movw	r22, r18
    2618:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("CNTDW1")
    261c:	89 e6       	ldi	r24, 0x69	; 105
    261e:	91 e0       	ldi	r25, 0x01	; 1
    2620:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    2624:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer1_countdown;
    2628:	8b e2       	ldi	r24, 0x2B	; 43
    262a:	8d 8b       	std	Y+21, r24	; 0x15
    262c:	70 c8       	rjmp	.-3872   	; 0x170e <main+0x9e>
		break;
	case state_set_timer1_countdown:
		ON_JOYSTICK_LEFT   c = display_set_timer1_on_off;
    262e:	ec e2       	ldi	r30, 0x2C	; 44
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	88 2f       	mov	r24, r24
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	84 70       	andi	r24, 0x04	; 4
    263a:	90 70       	andi	r25, 0x00	; 0
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	11 f4       	brne	.+4      	; 0x2644 <main+0xfd4>
    2640:	8c e1       	ldi	r24, 0x1C	; 28
    2642:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_set_timer1_on_off;
    2644:	ec e2       	ldi	r30, 0x2C	; 44
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	88 2f       	mov	r24, r24
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	88 70       	andi	r24, 0x08	; 8
    2650:	90 70       	andi	r25, 0x00	; 0
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	11 f4       	brne	.+4      	; 0x265a <main+0xfea>
    2656:	8c e1       	ldi	r24, 0x1C	; 28
    2658:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_UP     c = display_set_timer1;
    265a:	e3 e2       	ldi	r30, 0x23	; 35
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	88 2f       	mov	r24, r24
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	80 74       	andi	r24, 0x40	; 64
    2666:	90 70       	andi	r25, 0x00	; 0
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	11 f4       	brne	.+4      	; 0x2670 <main+0x1000>
    266c:	8f e0       	ldi	r24, 0x0F	; 15
    266e:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   c = display_timer1_input;
    2670:	e3 e2       	ldi	r30, 0x23	; 35
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	88 23       	and	r24, r24
    2678:	14 f0       	brlt	.+4      	; 0x267e <main+0x100e>
    267a:	8e e2       	ldi	r24, 0x2E	; 46
    267c:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = display_timer1_input;
    267e:	e3 e2       	ldi	r30, 0x23	; 35
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	88 2f       	mov	r24, r24
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	80 71       	andi	r24, 0x10	; 16
    268a:	90 70       	andi	r25, 0x00	; 0
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	09 f0       	breq	.+2      	; 0x2692 <main+0x1022>
    2690:	3e c8       	rjmp	.-3972   	; 0x170e <main+0x9e>
    2692:	8e e2       	ldi	r24, 0x2E	; 46
    2694:	8d 8b       	std	Y+21, r24	; 0x15
    2696:	3b c8       	rjmp	.-3978   	; 0x170e <main+0x9e>
		break;
	case display_timer1_input:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    2698:	69 85       	ldd	r22, Y+9	; 0x09
    269a:	7a 85       	ldd	r23, Y+10	; 0x0a
    269c:	8b 85       	ldd	r24, Y+11	; 0x0b
    269e:	9c 85       	ldd	r25, Y+12	; 0x0c
    26a0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	8c 01       	movw	r16, r24
    26aa:	6d 81       	ldd	r22, Y+5	; 0x05
    26ac:	7e 81       	ldd	r23, Y+6	; 0x06
    26ae:	8f 81       	ldd	r24, Y+7	; 0x07
    26b0:	98 85       	ldd	r25, Y+8	; 0x08
    26b2:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	9c 01       	movw	r18, r24
    26bc:	c8 01       	movw	r24, r16
    26be:	b9 01       	movw	r22, r18
    26c0:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("  0010")
    26c4:	80 e7       	ldi	r24, 0x70	; 112
    26c6:	91 e0       	ldi	r25, 0x01	; 1
    26c8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    26cc:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer1_input;
    26d0:	8f e2       	ldi	r24, 0x2F	; 47
    26d2:	8d 8b       	std	Y+21, r24	; 0x15
    26d4:	1c c8       	rjmp	.-4040   	; 0x170e <main+0x9e>
		break;
	case state_timer1_input:
		ON_JOYSTICK_UP     c = display_set_timer1_countdown;
    26d6:	e3 e2       	ldi	r30, 0x23	; 35
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	80 74       	andi	r24, 0x40	; 64
    26e2:	90 70       	andi	r25, 0x00	; 0
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	11 f4       	brne	.+4      	; 0x26ec <main+0x107c>
    26e8:	8a e2       	ldi	r24, 0x2A	; 42
    26ea:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   c = display_set_timer1_countdown;
    26ec:	e3 e2       	ldi	r30, 0x23	; 35
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	88 23       	and	r24, r24
    26f4:	14 f0       	brlt	.+4      	; 0x26fa <main+0x108a>
    26f6:	8a e2       	ldi	r24, 0x2A	; 42
    26f8:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = display_set_timer1_countdown;
    26fa:	e3 e2       	ldi	r30, 0x23	; 35
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	88 2f       	mov	r24, r24
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	80 71       	andi	r24, 0x10	; 16
    2706:	90 70       	andi	r25, 0x00	; 0
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	11 f0       	breq	.+4      	; 0x2710 <main+0x10a0>
    270c:	0c 94 87 0b 	jmp	0x170e	; 0x170e <main+0x9e>
    2710:	8a e2       	ldi	r24, 0x2A	; 42
    2712:	8d 8b       	std	Y+21, r24	; 0x15
    2714:	0c 94 87 0b 	jmp	0x170e	; 0x170e <main+0x9e>
		break;

	// DISPLAY SET TIMER2 COUNTDOWN AND WAIT FOR EVENT
	case display_set_timer2_countdown:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    2718:	69 85       	ldd	r22, Y+9	; 0x09
    271a:	7a 85       	ldd	r23, Y+10	; 0x0a
    271c:	8b 85       	ldd	r24, Y+11	; 0x0b
    271e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2720:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	8c 01       	movw	r16, r24
    272a:	6d 81       	ldd	r22, Y+5	; 0x05
    272c:	7e 81       	ldd	r23, Y+6	; 0x06
    272e:	8f 81       	ldd	r24, Y+7	; 0x07
    2730:	98 85       	ldd	r25, Y+8	; 0x08
    2732:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9c 01       	movw	r18, r24
    273c:	c8 01       	movw	r24, r16
    273e:	b9 01       	movw	r22, r18
    2740:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("CNTDW2")
    2744:	87 e7       	ldi	r24, 0x77	; 119
    2746:	91 e0       	ldi	r25, 0x01	; 1
    2748:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    274c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer2_countdown;
    2750:	8d e2       	ldi	r24, 0x2D	; 45
    2752:	8d 8b       	std	Y+21, r24	; 0x15
    2754:	0c 94 87 0b 	jmp	0x170e	; 0x170e <main+0x9e>
		break;
	case state_set_timer2_countdown:
		ON_JOYSTICK_LEFT   c = display_set_timer2_on_off;
    2758:	ec e2       	ldi	r30, 0x2C	; 44
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	88 2f       	mov	r24, r24
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	84 70       	andi	r24, 0x04	; 4
    2764:	90 70       	andi	r25, 0x00	; 0
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	11 f4       	brne	.+4      	; 0x276e <main+0x10fe>
    276a:	8e e1       	ldi	r24, 0x1E	; 30
    276c:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_RIGHT  c = display_set_timer2_on_off;
    276e:	ec e2       	ldi	r30, 0x2C	; 44
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	88 70       	andi	r24, 0x08	; 8
    277a:	90 70       	andi	r25, 0x00	; 0
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	11 f4       	brne	.+4      	; 0x2784 <main+0x1114>
    2780:	8e e1       	ldi	r24, 0x1E	; 30
    2782:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_UP     c = display_set_timer2;
    2784:	e3 e2       	ldi	r30, 0x23	; 35
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	88 2f       	mov	r24, r24
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	80 74       	andi	r24, 0x40	; 64
    2790:	90 70       	andi	r25, 0x00	; 0
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	11 f4       	brne	.+4      	; 0x279a <main+0x112a>
    2796:	81 e1       	ldi	r24, 0x11	; 17
    2798:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   c = display_timer2_input;
    279a:	e3 e2       	ldi	r30, 0x23	; 35
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	88 23       	and	r24, r24
    27a2:	14 f0       	brlt	.+4      	; 0x27a8 <main+0x1138>
    27a4:	80 e3       	ldi	r24, 0x30	; 48
    27a6:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = display_timer2_input;
    27a8:	e3 e2       	ldi	r30, 0x23	; 35
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	88 2f       	mov	r24, r24
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	80 71       	andi	r24, 0x10	; 16
    27b4:	90 70       	andi	r25, 0x00	; 0
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	11 f0       	breq	.+4      	; 0x27be <main+0x114e>
    27ba:	0c 94 87 0b 	jmp	0x170e	; 0x170e <main+0x9e>
    27be:	80 e3       	ldi	r24, 0x30	; 48
    27c0:	8d 8b       	std	Y+21, r24	; 0x15
    27c2:	0c 94 87 0b 	jmp	0x170e	; 0x170e <main+0x9e>
		break;
	case display_timer2_input:
		BEEP(beep_frequency, beep_time) //beep with frequency 1046.5 --> tone c''' for 0.25sec
    27c6:	69 85       	ldd	r22, Y+9	; 0x09
    27c8:	7a 85       	ldd	r23, Y+10	; 0x0a
    27ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    27cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    27ce:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	8c 01       	movw	r16, r24
    27d8:	6d 81       	ldd	r22, Y+5	; 0x05
    27da:	7e 81       	ldd	r23, Y+6	; 0x06
    27dc:	8f 81       	ldd	r24, Y+7	; 0x07
    27de:	98 85       	ldd	r25, Y+8	; 0x08
    27e0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__fixsfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	9c 01       	movw	r18, r24
    27ea:	c8 01       	movw	r24, r16
    27ec:	b9 01       	movw	r22, r18
    27ee:	0e 94 cc 01 	call	0x398	; 0x398 <InitBuzzer>
		LCD_TEXT("  0005")
    27f2:	8e e7       	ldi	r24, 0x7E	; 126
    27f4:	91 e0       	ldi	r25, 0x01	; 1
    27f6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    27fa:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer2_input;
    27fe:	81 e3       	ldi	r24, 0x31	; 49
    2800:	8d 8b       	std	Y+21, r24	; 0x15
    2802:	0c 94 87 0b 	jmp	0x170e	; 0x170e <main+0x9e>
		break;
	case state_timer2_input:
		ON_JOYSTICK_UP     c = display_set_timer2_countdown;
    2806:	e3 e2       	ldi	r30, 0x23	; 35
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	88 2f       	mov	r24, r24
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	80 74       	andi	r24, 0x40	; 64
    2812:	90 70       	andi	r25, 0x00	; 0
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	11 f4       	brne	.+4      	; 0x281c <main+0x11ac>
    2818:	8c e2       	ldi	r24, 0x2C	; 44
    281a:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_DOWN   c = display_set_timer2_countdown;
    281c:	e3 e2       	ldi	r30, 0x23	; 35
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	88 23       	and	r24, r24
    2824:	14 f0       	brlt	.+4      	; 0x282a <main+0x11ba>
    2826:	8c e2       	ldi	r24, 0x2C	; 44
    2828:	8d 8b       	std	Y+21, r24	; 0x15
		ON_JOYSTICK_CENTER c = display_set_timer2_countdown;
    282a:	e3 e2       	ldi	r30, 0x23	; 35
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	88 2f       	mov	r24, r24
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	80 71       	andi	r24, 0x10	; 16
    2836:	90 70       	andi	r25, 0x00	; 0
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	11 f0       	breq	.+4      	; 0x2840 <main+0x11d0>
    283c:	0c 94 87 0b 	jmp	0x170e	; 0x170e <main+0x9e>
    2840:	8c e2       	ldi	r24, 0x2C	; 44
    2842:	8d 8b       	std	Y+21, r24	; 0x15
    2844:	0c 94 87 0b 	jmp	0x170e	; 0x170e <main+0x9e>
		break;


	// If we are somehow in an undefined state go back to time again
    default:
		c = display_time;
    2848:	1d 8a       	std	Y+21, r1	; 0x15
    284a:	0c 94 87 0b 	jmp	0x170e	; 0x170e <main+0x9e>

0000284e <CHAR2BCD2>:
*                   The result is byte where the high and low nibbles
*                   contain the tens and ones of the input.
*
*****************************************************************************/
char CHAR2BCD2(char input)
{
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	00 d0       	rcall	.+0      	; 0x2854 <CHAR2BCD2+0x6>
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	8a 83       	std	Y+2, r24	; 0x02
    char high = 0;
    285a:	19 82       	std	Y+1, r1	; 0x01
    285c:	06 c0       	rjmp	.+12     	; 0x286a <CHAR2BCD2+0x1c>
    
    
    while (input >= 10)                 // Count tens
    {
        high++;
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	8f 5f       	subi	r24, 0xFF	; 255
    2862:	89 83       	std	Y+1, r24	; 0x01
        input -= 10;
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	8a 50       	subi	r24, 0x0A	; 10
    2868:	8a 83       	std	Y+2, r24	; 0x02
char CHAR2BCD2(char input)
{
    char high = 0;
    
    
    while (input >= 10)                 // Count tens
    286a:	8a 81       	ldd	r24, Y+2	; 0x02
    286c:	8a 30       	cpi	r24, 0x0A	; 10
    286e:	b8 f7       	brcc	.-18     	; 0x285e <CHAR2BCD2+0x10>
    {
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	88 2f       	mov	r24, r24
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	82 95       	swap	r24
    2878:	92 95       	swap	r25
    287a:	90 7f       	andi	r25, 0xF0	; 240
    287c:	98 27       	eor	r25, r24
    287e:	80 7f       	andi	r24, 0xF0	; 240
    2880:	98 27       	eor	r25, r24
    2882:	98 2f       	mov	r25, r24
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	89 2b       	or	r24, r25
}
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <CHAR2BCD3>:
*                   The result is an integer where the three lowest nibbles
*                   contain the ones, tens and hundreds of the input.
*
*****************************************************************************/
unsigned int CHAR2BCD3(char input)
{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <CHAR2BCD3+0x6>
    2898:	0f 92       	push	r0
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	8b 83       	std	Y+3, r24	; 0x03
    int high = 0;
    28a0:	1a 82       	std	Y+2, r1	; 0x02
    28a2:	19 82       	std	Y+1, r1	; 0x01
    28a4:	08 c0       	rjmp	.+16     	; 0x28b6 <CHAR2BCD3+0x24>
        
    while (input >= 100)                // Count hundreds
    {
        high++;
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	9a 81       	ldd	r25, Y+2	; 0x02
    28aa:	01 96       	adiw	r24, 0x01	; 1
    28ac:	9a 83       	std	Y+2, r25	; 0x02
    28ae:	89 83       	std	Y+1, r24	; 0x01
        input -= 100;
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	84 56       	subi	r24, 0x64	; 100
    28b4:	8b 83       	std	Y+3, r24	; 0x03
*****************************************************************************/
unsigned int CHAR2BCD3(char input)
{
    int high = 0;
        
    while (input >= 100)                // Count hundreds
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	84 36       	cpi	r24, 0x64	; 100
    28ba:	a8 f7       	brcc	.-22     	; 0x28a6 <CHAR2BCD3+0x14>
    {
        high++;
        input -= 100;
    }

    high <<= 4;
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	82 95       	swap	r24
    28c2:	92 95       	swap	r25
    28c4:	90 7f       	andi	r25, 0xF0	; 240
    28c6:	98 27       	eor	r25, r24
    28c8:	80 7f       	andi	r24, 0xF0	; 240
    28ca:	98 27       	eor	r25, r24
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	08 c0       	rjmp	.+16     	; 0x28e2 <CHAR2BCD3+0x50>
    
    while (input >= 10)                 // Count tens
    {
        high++;
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	9a 81       	ldd	r25, Y+2	; 0x02
    28d6:	01 96       	adiw	r24, 0x01	; 1
    28d8:	9a 83       	std	Y+2, r25	; 0x02
    28da:	89 83       	std	Y+1, r24	; 0x01
        input -= 10;
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	8a 50       	subi	r24, 0x0A	; 10
    28e0:	8b 83       	std	Y+3, r24	; 0x03
        input -= 100;
    }

    high <<= 4;
    
    while (input >= 10)                 // Count tens
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	8a 30       	cpi	r24, 0x0A	; 10
    28e6:	a8 f7       	brcc	.-22     	; 0x28d2 <CHAR2BCD3+0x40>
    {
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	9a 81       	ldd	r25, Y+2	; 0x02
    28ec:	9c 01       	movw	r18, r24
    28ee:	22 95       	swap	r18
    28f0:	32 95       	swap	r19
    28f2:	30 7f       	andi	r19, 0xF0	; 240
    28f4:	32 27       	eor	r19, r18
    28f6:	20 7f       	andi	r18, 0xF0	; 240
    28f8:	32 27       	eor	r19, r18
    28fa:	8b 81       	ldd	r24, Y+3	; 0x03
    28fc:	88 2f       	mov	r24, r24
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	82 2b       	or	r24, r18
    2902:	93 2b       	or	r25, r19
}
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <Delay>:
*
*   Purpose :       Delay-loop
*
*****************************************************************************/
void Delay(unsigned int millisec)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	00 d0       	rcall	.+0      	; 0x2916 <Delay+0x6>
    2916:	00 d0       	rcall	.+0      	; 0x2918 <Delay+0x8>
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	9b 83       	std	Y+3, r25	; 0x03
    291e:	8a 83       	std	Y+2, r24	; 0x02
    2920:	09 c0       	rjmp	.+18     	; 0x2934 <Delay+0x24>
	// mt, int i did not work in the simulator:  int i; 
	uint8_t i;

	while (millisec--) {
		for (i=0; i<125; i++) {
    2922:	19 82       	std	Y+1, r1	; 0x01
    2924:	04 c0       	rjmp	.+8      	; 0x292e <Delay+0x1e>
			asm volatile ("nop"::);
    2926:	00 00       	nop
{
	// mt, int i did not work in the simulator:  int i; 
	uint8_t i;

	while (millisec--) {
		for (i=0; i<125; i++) {
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	8f 5f       	subi	r24, 0xFF	; 255
    292c:	89 83       	std	Y+1, r24	; 0x01
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	8d 37       	cpi	r24, 0x7D	; 125
    2932:	c8 f3       	brcs	.-14     	; 0x2926 <Delay+0x16>
void Delay(unsigned int millisec)
{
	// mt, int i did not work in the simulator:  int i; 
	uint8_t i;

	while (millisec--) {
    2934:	1c 82       	std	Y+4, r1	; 0x04
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	9b 81       	ldd	r25, Y+3	; 0x03
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	11 f0       	breq	.+4      	; 0x2942 <Delay+0x32>
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	8c 83       	std	Y+4, r24	; 0x04
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	9b 81       	ldd	r25, Y+3	; 0x03
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	9b 83       	std	Y+3, r25	; 0x03
    294a:	8a 83       	std	Y+2, r24	; 0x02
    294c:	8c 81       	ldd	r24, Y+4	; 0x04
    294e:	88 23       	and	r24, r24
    2950:	41 f7       	brne	.-48     	; 0x2922 <Delay+0x12>
		for (i=0; i<125; i++) {
			asm volatile ("nop"::);
		}
	}
}
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <RTC_init>:
*
*******************************************************************************/


void RTC_init(void)
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    Delay(1000);            // wait for 1 sec to let the Xtal stabilize after a power-on,
    2968:	88 ee       	ldi	r24, 0xE8	; 232
    296a:	93 e0       	ldi	r25, 0x03	; 3
    296c:	0e 94 88 14 	call	0x2910	; 0x2910 <Delay>

    cli(); // mt __disable_interrupt();  // disabel global interrupt
    2970:	f8 94       	cli

    cbiBF(TIMSK2, TOIE2);             // disable OCIE2A and TOIE2
    2972:	a0 e7       	ldi	r26, 0x70	; 112
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	e0 e7       	ldi	r30, 0x70	; 112
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	8e 7f       	andi	r24, 0xFE	; 254
    297e:	8c 93       	st	X, r24

    ASSR = (1<<AS2);        // select asynchronous operation of Timer2
    2980:	e6 eb       	ldi	r30, 0xB6	; 182
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	88 e0       	ldi	r24, 0x08	; 8
    2986:	80 83       	st	Z, r24

    TCNT2 = 0;              // clear TCNT2A
    2988:	e2 eb       	ldi	r30, 0xB2	; 178
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	10 82       	st	Z, r1
    TCCR2A |= (1<<CS22) | (1<<CS20);             // select precaler: 32.768 kHz / 128 = 1 sec between each overflow
    298e:	a0 eb       	ldi	r26, 0xB0	; 176
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e0 eb       	ldi	r30, 0xB0	; 176
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	85 60       	ori	r24, 0x05	; 5
    299a:	8c 93       	st	X, r24

    while((ASSR & 0x01) | (ASSR & 0x04));       // wait for TCN2UB and TCR2UB to be cleared
    299c:	e6 eb       	ldi	r30, 0xB6	; 182
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	88 2f       	mov	r24, r24
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	9c 01       	movw	r18, r24
    29a8:	21 70       	andi	r18, 0x01	; 1
    29aa:	30 70       	andi	r19, 0x00	; 0
    29ac:	e6 eb       	ldi	r30, 0xB6	; 182
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	88 2f       	mov	r24, r24
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	84 70       	andi	r24, 0x04	; 4
    29b8:	90 70       	andi	r25, 0x00	; 0
    29ba:	82 2b       	or	r24, r18
    29bc:	93 2b       	or	r25, r19
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	69 f7       	brne	.-38     	; 0x299c <RTC_init+0x3c>

    TIFR2 = 0xFF;           // clear interrupt-flags
    29c2:	e7 e3       	ldi	r30, 0x37	; 55
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	8f ef       	ldi	r24, 0xFF	; 255
    29c8:	80 83       	st	Z, r24
    sbiBF(TIMSK2, TOIE2);     // enable Timer2 overflow interrupt
    29ca:	a0 e7       	ldi	r26, 0x70	; 112
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e0 e7       	ldi	r30, 0x70	; 112
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	81 60       	ori	r24, 0x01	; 1
    29d6:	8c 93       	st	X, r24

    sei(); // mt __enable_interrupt();                 // enable global interrupt
    29d8:	78 94       	sei

    // initial time and date setting
    gSECOND  = 0;
    29da:	10 92 a3 03 	sts	0x03A3, r1
    gMINUTE  = 0;
    29de:	10 92 a8 03 	sts	0x03A8, r1
    gHOUR    = 12;
    29e2:	8c e0       	ldi	r24, 0x0C	; 12
    29e4:	80 93 a2 03 	sts	0x03A2, r24
    // mt release timestamp
    gDAY     = 12;
    29e8:	8c e0       	ldi	r24, 0x0C	; 12
    29ea:	80 93 a4 03 	sts	0x03A4, r24
    gMONTH   = 3;
    29ee:	83 e0       	ldi	r24, 0x03	; 3
    29f0:	80 93 a7 03 	sts	0x03A7, r24
    gYEAR    = 9;
    29f4:	89 e0       	ldi	r24, 0x09	; 9
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	90 93 a6 03 	sts	0x03A6, r25
    29fc:	80 93 a5 03 	sts	0x03A5, r24
}
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <ShowClock>:
*
*   Purpose :       Shows the clock on the LCD
*
*****************************************************************************/
void ShowClock()
{
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	00 d0       	rcall	.+0      	; 0x2a0c <ShowClock+0x6>
    2a0c:	00 d0       	rcall	.+0      	; 0x2a0e <ShowClock+0x8>
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <ShowClock+0xa>
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    //char HH, HL, MH, ML, SH, SL;
    uint8_t HH, HL, MH, ML, SH, SL;


    HH = CHAR2BCD2(gHOUR);
    2a14:	80 91 a2 03 	lds	r24, 0x03A2
    2a18:	0e 94 27 14 	call	0x284e	; 0x284e <CHAR2BCD2>
    2a1c:	8e 83       	std	Y+6, r24	; 0x06
        
    HL = (HH & 0x0F) + '0';
    2a1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a20:	8f 70       	andi	r24, 0x0F	; 15
    2a22:	80 5d       	subi	r24, 0xD0	; 208
    2a24:	8d 83       	std	Y+5, r24	; 0x05
    HH = (HH >> 4) + '0';
    2a26:	8e 81       	ldd	r24, Y+6	; 0x06
    2a28:	82 95       	swap	r24
    2a2a:	8f 70       	andi	r24, 0x0F	; 15
    2a2c:	80 5d       	subi	r24, 0xD0	; 208
    2a2e:	8e 83       	std	Y+6, r24	; 0x06

    MH = CHAR2BCD2(gMINUTE);
    2a30:	80 91 a8 03 	lds	r24, 0x03A8
    2a34:	0e 94 27 14 	call	0x284e	; 0x284e <CHAR2BCD2>
    2a38:	8c 83       	std	Y+4, r24	; 0x04
    ML = (MH & 0x0F) + '0';
    2a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3c:	8f 70       	andi	r24, 0x0F	; 15
    2a3e:	80 5d       	subi	r24, 0xD0	; 208
    2a40:	8b 83       	std	Y+3, r24	; 0x03
    MH = (MH >> 4) + '0';
    2a42:	8c 81       	ldd	r24, Y+4	; 0x04
    2a44:	82 95       	swap	r24
    2a46:	8f 70       	andi	r24, 0x0F	; 15
    2a48:	80 5d       	subi	r24, 0xD0	; 208
    2a4a:	8c 83       	std	Y+4, r24	; 0x04

    SH = CHAR2BCD2(gSECOND);
    2a4c:	80 91 a3 03 	lds	r24, 0x03A3
    2a50:	0e 94 27 14 	call	0x284e	; 0x284e <CHAR2BCD2>
    2a54:	8a 83       	std	Y+2, r24	; 0x02
    SL = (SH & 0x0F) + '0';
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	8f 70       	andi	r24, 0x0F	; 15
    2a5a:	80 5d       	subi	r24, 0xD0	; 208
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    SH = (SH >> 4) + '0';
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	82 95       	swap	r24
    2a62:	8f 70       	andi	r24, 0x0F	; 15
    2a64:	80 5d       	subi	r24, 0xD0	; 208
    2a66:	8a 83       	std	Y+2, r24	; 0x02

    LCD_putc(0, HH);
    2a68:	8e 81       	ldd	r24, Y+6	; 0x06
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	b9 01       	movw	r22, r18
    2a74:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>
    LCD_putc(1, HL);
    2a78:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	b9 01       	movw	r22, r18
    2a84:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>
    LCD_putc(2, MH);
    2a88:	8c 81       	ldd	r24, Y+4	; 0x04
    2a8a:	28 2f       	mov	r18, r24
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	82 e0       	ldi	r24, 0x02	; 2
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	b9 01       	movw	r22, r18
    2a94:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>
    LCD_putc(3, ML);
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	83 e0       	ldi	r24, 0x03	; 3
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	b9 01       	movw	r22, r18
    2aa4:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>
    LCD_putc(4, SH);
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	28 2f       	mov	r18, r24
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	84 e0       	ldi	r24, 0x04	; 4
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	b9 01       	movw	r22, r18
    2ab4:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>
    LCD_putc(5, SL);
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	28 2f       	mov	r18, r24
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	85 e0       	ldi	r24, 0x05	; 5
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	b9 01       	movw	r22, r18
    2ac4:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>
    LCD_putc(6, '\0');
    2ac8:	86 e0       	ldi	r24, 0x06	; 6
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	70 e0       	ldi	r23, 0x00	; 0
    2ad0:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>

    LCD_Colon(1);
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCD_Colon>

    LCD_UpdateRequired(TRUE, 0);
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	60 e0       	ldi	r22, 0x00	; 0
    2ae2:	70 e0       	ldi	r23, 0x00	; 0
    2ae4:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_UpdateRequired>
 
    return;
}
    2ae8:	26 96       	adiw	r28, 0x06	; 6
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	f8 94       	cli
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	cd bf       	out	0x3d, r28	; 61
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	08 95       	ret

00002afa <get_second>:
#define HOUR       0
#define MINUTE     1
#define SECOND     2

int get_second()
{
    2afa:	df 93       	push	r29
    2afc:	cf 93       	push	r28
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
	return gSECOND;
    2b02:	80 91 a3 03 	lds	r24, 0x03A3
    2b06:	88 2f       	mov	r24, r24
    2b08:	90 e0       	ldi	r25, 0x00	; 0
}
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	08 95       	ret

00002b10 <get_minute>:

int get_minute()
{
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
	return gMINUTE;
    2b18:	80 91 a8 03 	lds	r24, 0x03A8
    2b1c:	88 2f       	mov	r24, r24
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
}
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <get_hour>:

int get_hour()
{
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
	return gHOUR;
    2b2e:	80 91 a2 03 	lds	r24, 0x03A2
    2b32:	88 2f       	mov	r24, r24
    2b34:	90 e0       	ldi	r25, 0x00	; 0
}	
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <SetClock>:
*
*   Purpose :       Adjusts the clock
*
*****************************************************************************/
void SetClock()
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	6e 97       	sbiw	r28, 0x1e	; 30
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    static uint8_t time[3];
    static uint8_t mode = HOUR;
    uint8_t HH, HL, MH, ML, SH, SL;
    // mtE

    if (enter_function)
    2b50:	80 91 85 01 	lds	r24, 0x0185
    2b54:	88 23       	and	r24, r24
    2b56:	61 f0       	breq	.+24     	; 0x2b70 <SetClock+0x34>
    {
        time[HOUR] = gHOUR;
    2b58:	80 91 a2 03 	lds	r24, 0x03A2
    2b5c:	80 93 36 03 	sts	0x0336, r24
        time[MINUTE] = gMINUTE;
    2b60:	80 91 a8 03 	lds	r24, 0x03A8
    2b64:	80 93 37 03 	sts	0x0337, r24
        time[SECOND] = gSECOND;
    2b68:	80 91 a3 03 	lds	r24, 0x03A3
    2b6c:	80 93 38 03 	sts	0x0338, r24
    }

    HH = CHAR2BCD2(time[HOUR]);
    2b70:	80 91 36 03 	lds	r24, 0x0336
    2b74:	0e 94 27 14 	call	0x284e	; 0x284e <CHAR2BCD2>
    2b78:	8e 83       	std	Y+6, r24	; 0x06
        
    HL = (HH & 0x0F) + '0';
    2b7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b7c:	8f 70       	andi	r24, 0x0F	; 15
    2b7e:	80 5d       	subi	r24, 0xD0	; 208
    2b80:	8d 83       	std	Y+5, r24	; 0x05
    HH = (HH >> 4) + '0';
    2b82:	8e 81       	ldd	r24, Y+6	; 0x06
    2b84:	82 95       	swap	r24
    2b86:	8f 70       	andi	r24, 0x0F	; 15
    2b88:	80 5d       	subi	r24, 0xD0	; 208
    2b8a:	8e 83       	std	Y+6, r24	; 0x06

    MH = CHAR2BCD2(time[MINUTE]);
    2b8c:	80 91 37 03 	lds	r24, 0x0337
    2b90:	0e 94 27 14 	call	0x284e	; 0x284e <CHAR2BCD2>
    2b94:	8c 83       	std	Y+4, r24	; 0x04
    ML = (MH & 0x0F) + '0';
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	8f 70       	andi	r24, 0x0F	; 15
    2b9a:	80 5d       	subi	r24, 0xD0	; 208
    2b9c:	8b 83       	std	Y+3, r24	; 0x03
    MH = (MH >> 4) + '0';
    2b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba0:	82 95       	swap	r24
    2ba2:	8f 70       	andi	r24, 0x0F	; 15
    2ba4:	80 5d       	subi	r24, 0xD0	; 208
    2ba6:	8c 83       	std	Y+4, r24	; 0x04

    SH = CHAR2BCD2(time[SECOND]);
    2ba8:	80 91 38 03 	lds	r24, 0x0338
    2bac:	0e 94 27 14 	call	0x284e	; 0x284e <CHAR2BCD2>
    2bb0:	8a 83       	std	Y+2, r24	; 0x02
    SL = (SH & 0x0F) + '0';
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	8f 70       	andi	r24, 0x0F	; 15
    2bb6:	80 5d       	subi	r24, 0xD0	; 208
    2bb8:	89 83       	std	Y+1, r24	; 0x01
    SH = (SH >> 4) + '0';
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	82 95       	swap	r24
    2bbe:	8f 70       	andi	r24, 0x0F	; 15
    2bc0:	80 5d       	subi	r24, 0xD0	; 208
    2bc2:	8a 83       	std	Y+2, r24	; 0x02

    LCD_putc(0, HH | ((mode == HOUR) ? 0x80 : 0x00));
    2bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	3e 8f       	std	Y+30, r19	; 0x1e
    2bcc:	2d 8f       	std	Y+29, r18	; 0x1d
    2bce:	80 91 35 03 	lds	r24, 0x0335
    2bd2:	88 23       	and	r24, r24
    2bd4:	29 f4       	brne	.+10     	; 0x2be0 <SetClock+0xa4>
    2bd6:	80 e8       	ldi	r24, 0x80	; 128
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	9c 8f       	std	Y+28, r25	; 0x1c
    2bdc:	8b 8f       	std	Y+27, r24	; 0x1b
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <SetClock+0xa8>
    2be0:	1c 8e       	std	Y+28, r1	; 0x1c
    2be2:	1b 8e       	std	Y+27, r1	; 0x1b
    2be4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2be6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2be8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bec:	28 2b       	or	r18, r24
    2bee:	39 2b       	or	r19, r25
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	b9 01       	movw	r22, r18
    2bf6:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>
    LCD_putc(1, HL | ((mode == HOUR) ? 0x80 : 0x00));
    2bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	3a 8f       	std	Y+26, r19	; 0x1a
    2c02:	29 8f       	std	Y+25, r18	; 0x19
    2c04:	80 91 35 03 	lds	r24, 0x0335
    2c08:	88 23       	and	r24, r24
    2c0a:	29 f4       	brne	.+10     	; 0x2c16 <SetClock+0xda>
    2c0c:	80 e8       	ldi	r24, 0x80	; 128
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	98 8f       	std	Y+24, r25	; 0x18
    2c12:	8f 8b       	std	Y+23, r24	; 0x17
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <SetClock+0xde>
    2c16:	18 8e       	std	Y+24, r1	; 0x18
    2c18:	1f 8a       	std	Y+23, r1	; 0x17
    2c1a:	29 8d       	ldd	r18, Y+25	; 0x19
    2c1c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c20:	98 8d       	ldd	r25, Y+24	; 0x18
    2c22:	28 2b       	or	r18, r24
    2c24:	39 2b       	or	r19, r25
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	b9 01       	movw	r22, r18
    2c2c:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>
    LCD_putc(2, MH | ((mode == MINUTE) ? 0x80 : 0x00));
    2c30:	8c 81       	ldd	r24, Y+4	; 0x04
    2c32:	28 2f       	mov	r18, r24
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	3e 8b       	std	Y+22, r19	; 0x16
    2c38:	2d 8b       	std	Y+21, r18	; 0x15
    2c3a:	80 91 35 03 	lds	r24, 0x0335
    2c3e:	81 30       	cpi	r24, 0x01	; 1
    2c40:	29 f4       	brne	.+10     	; 0x2c4c <SetClock+0x110>
    2c42:	80 e8       	ldi	r24, 0x80	; 128
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	9c 8b       	std	Y+20, r25	; 0x14
    2c48:	8b 8b       	std	Y+19, r24	; 0x13
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <SetClock+0x114>
    2c4c:	1c 8a       	std	Y+20, r1	; 0x14
    2c4e:	1b 8a       	std	Y+19, r1	; 0x13
    2c50:	2d 89       	ldd	r18, Y+21	; 0x15
    2c52:	3e 89       	ldd	r19, Y+22	; 0x16
    2c54:	8b 89       	ldd	r24, Y+19	; 0x13
    2c56:	9c 89       	ldd	r25, Y+20	; 0x14
    2c58:	28 2b       	or	r18, r24
    2c5a:	39 2b       	or	r19, r25
    2c5c:	82 e0       	ldi	r24, 0x02	; 2
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	b9 01       	movw	r22, r18
    2c62:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>
    LCD_putc(3, ML | ((mode == MINUTE) ? 0x80 : 0x00));
    2c66:	8b 81       	ldd	r24, Y+3	; 0x03
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	3a 8b       	std	Y+18, r19	; 0x12
    2c6e:	29 8b       	std	Y+17, r18	; 0x11
    2c70:	80 91 35 03 	lds	r24, 0x0335
    2c74:	81 30       	cpi	r24, 0x01	; 1
    2c76:	29 f4       	brne	.+10     	; 0x2c82 <SetClock+0x146>
    2c78:	80 e8       	ldi	r24, 0x80	; 128
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	98 8b       	std	Y+16, r25	; 0x10
    2c7e:	8f 87       	std	Y+15, r24	; 0x0f
    2c80:	02 c0       	rjmp	.+4      	; 0x2c86 <SetClock+0x14a>
    2c82:	18 8a       	std	Y+16, r1	; 0x10
    2c84:	1f 86       	std	Y+15, r1	; 0x0f
    2c86:	29 89       	ldd	r18, Y+17	; 0x11
    2c88:	3a 89       	ldd	r19, Y+18	; 0x12
    2c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c8c:	98 89       	ldd	r25, Y+16	; 0x10
    2c8e:	28 2b       	or	r18, r24
    2c90:	39 2b       	or	r19, r25
    2c92:	83 e0       	ldi	r24, 0x03	; 3
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	b9 01       	movw	r22, r18
    2c98:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>
    LCD_putc(4, SH | ((mode == SECOND) ? 0x80 : 0x00));
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	28 2f       	mov	r18, r24
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	3e 87       	std	Y+14, r19	; 0x0e
    2ca4:	2d 87       	std	Y+13, r18	; 0x0d
    2ca6:	80 91 35 03 	lds	r24, 0x0335
    2caa:	82 30       	cpi	r24, 0x02	; 2
    2cac:	29 f4       	brne	.+10     	; 0x2cb8 <SetClock+0x17c>
    2cae:	80 e8       	ldi	r24, 0x80	; 128
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	9c 87       	std	Y+12, r25	; 0x0c
    2cb4:	8b 87       	std	Y+11, r24	; 0x0b
    2cb6:	02 c0       	rjmp	.+4      	; 0x2cbc <SetClock+0x180>
    2cb8:	1c 86       	std	Y+12, r1	; 0x0c
    2cba:	1b 86       	std	Y+11, r1	; 0x0b
    2cbc:	2d 85       	ldd	r18, Y+13	; 0x0d
    2cbe:	3e 85       	ldd	r19, Y+14	; 0x0e
    2cc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cc4:	28 2b       	or	r18, r24
    2cc6:	39 2b       	or	r19, r25
    2cc8:	84 e0       	ldi	r24, 0x04	; 4
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	b9 01       	movw	r22, r18
    2cce:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>
    LCD_putc(5, SL | ((mode == SECOND) ? 0x80 : 0x00));
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	28 2f       	mov	r18, r24
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	3a 87       	std	Y+10, r19	; 0x0a
    2cda:	29 87       	std	Y+9, r18	; 0x09
    2cdc:	80 91 35 03 	lds	r24, 0x0335
    2ce0:	82 30       	cpi	r24, 0x02	; 2
    2ce2:	29 f4       	brne	.+10     	; 0x2cee <SetClock+0x1b2>
    2ce4:	80 e8       	ldi	r24, 0x80	; 128
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	98 87       	std	Y+8, r25	; 0x08
    2cea:	8f 83       	std	Y+7, r24	; 0x07
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <SetClock+0x1b6>
    2cee:	18 86       	std	Y+8, r1	; 0x08
    2cf0:	1f 82       	std	Y+7, r1	; 0x07
    2cf2:	29 85       	ldd	r18, Y+9	; 0x09
    2cf4:	3a 85       	ldd	r19, Y+10	; 0x0a
    2cf6:	8f 81       	ldd	r24, Y+7	; 0x07
    2cf8:	98 85       	ldd	r25, Y+8	; 0x08
    2cfa:	28 2b       	or	r18, r24
    2cfc:	39 2b       	or	r19, r25
    2cfe:	85 e0       	ldi	r24, 0x05	; 5
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	b9 01       	movw	r22, r18
    2d04:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>
    LCD_putc(6, '\0');
    2d08:	86 e0       	ldi	r24, 0x06	; 6
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	60 e0       	ldi	r22, 0x00	; 0
    2d0e:	70 e0       	ldi	r23, 0x00	; 0
    2d10:	0e 94 90 05 	call	0xb20	; 0xb20 <LCD_putc>

    LCD_Colon(1);
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCD_Colon>

    if ((PINB & (1 << 4)))
    2d1c:	e3 e2       	ldi	r30, 0x23	; 35
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	88 2f       	mov	r24, r24
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	80 71       	andi	r24, 0x10	; 16
    2d28:	90 70       	andi	r25, 0x00	; 0
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	11 f0       	breq	.+4      	; 0x2d32 <SetClock+0x1f6>
        LCD_FlashReset();
    2d2e:	0e 94 d3 05 	call	0xba6	; 0xba6 <LCD_FlashReset>

    LCD_UpdateRequired(TRUE, 0);
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	70 e0       	ldi	r23, 0x00	; 0
    2d3a:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_UpdateRequired>
    
    enter_function = 1;
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	80 93 85 01 	sts	0x0185, r24

    // Increment/decrement hours, minutes or seconds
    if (!(PINB & (1 << 6)))
    2d44:	e3 e2       	ldi	r30, 0x23	; 35
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	88 2f       	mov	r24, r24
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	80 74       	andi	r24, 0x40	; 64
    2d50:	90 70       	andi	r25, 0x00	; 0
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	71 f4       	brne	.+28     	; 0x2d72 <SetClock+0x236>
        time[mode]++;
    2d56:	80 91 35 03 	lds	r24, 0x0335
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	f9 01       	movw	r30, r18
    2d60:	ea 5c       	subi	r30, 0xCA	; 202
    2d62:	fc 4f       	sbci	r31, 0xFC	; 252
    2d64:	80 81       	ld	r24, Z
    2d66:	8f 5f       	subi	r24, 0xFF	; 255
    2d68:	f9 01       	movw	r30, r18
    2d6a:	ea 5c       	subi	r30, 0xCA	; 202
    2d6c:	fc 4f       	sbci	r31, 0xFC	; 252
    2d6e:	80 83       	st	Z, r24
    2d70:	5a c0       	rjmp	.+180    	; 0x2e26 <SetClock+0x2ea>
    else if (!(PINB & (1 << 7)))
    2d72:	e3 e2       	ldi	r30, 0x23	; 35
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	88 23       	and	r24, r24
    2d7a:	74 f0       	brlt	.+28     	; 0x2d98 <SetClock+0x25c>
        time[mode]--;
    2d7c:	80 91 35 03 	lds	r24, 0x0335
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	f9 01       	movw	r30, r18
    2d86:	ea 5c       	subi	r30, 0xCA	; 202
    2d88:	fc 4f       	sbci	r31, 0xFC	; 252
    2d8a:	80 81       	ld	r24, Z
    2d8c:	81 50       	subi	r24, 0x01	; 1
    2d8e:	f9 01       	movw	r30, r18
    2d90:	ea 5c       	subi	r30, 0xCA	; 202
    2d92:	fc 4f       	sbci	r31, 0xFC	; 252
    2d94:	80 83       	st	Z, r24
    2d96:	47 c0       	rjmp	.+142    	; 0x2e26 <SetClock+0x2ea>
    else if (!(PINE & (1 << 2)))
    2d98:	ec e2       	ldi	r30, 0x2C	; 44
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	88 2f       	mov	r24, r24
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	84 70       	andi	r24, 0x04	; 4
    2da4:	90 70       	andi	r25, 0x00	; 0
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	71 f4       	brne	.+28     	; 0x2dc6 <SetClock+0x28a>
    {
        if (mode == HOUR)
    2daa:	80 91 35 03 	lds	r24, 0x0335
    2dae:	88 23       	and	r24, r24
    2db0:	21 f4       	brne	.+8      	; 0x2dba <SetClock+0x27e>
            mode = SECOND;
    2db2:	82 e0       	ldi	r24, 0x02	; 2
    2db4:	80 93 35 03 	sts	0x0335, r24
    2db8:	36 c0       	rjmp	.+108    	; 0x2e26 <SetClock+0x2ea>
        else
            mode--;
    2dba:	80 91 35 03 	lds	r24, 0x0335
    2dbe:	81 50       	subi	r24, 0x01	; 1
    2dc0:	80 93 35 03 	sts	0x0335, r24
    2dc4:	30 c0       	rjmp	.+96     	; 0x2e26 <SetClock+0x2ea>
    }
    else if (!(PINE & (1 << 3)))
    2dc6:	ec e2       	ldi	r30, 0x2C	; 44
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	88 2f       	mov	r24, r24
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	88 70       	andi	r24, 0x08	; 8
    2dd2:	90 70       	andi	r25, 0x00	; 0
    2dd4:	00 97       	sbiw	r24, 0x00	; 0
    2dd6:	69 f4       	brne	.+26     	; 0x2df2 <SetClock+0x2b6>
    {
        if (mode == SECOND)
    2dd8:	80 91 35 03 	lds	r24, 0x0335
    2ddc:	82 30       	cpi	r24, 0x02	; 2
    2dde:	19 f4       	brne	.+6      	; 0x2de6 <SetClock+0x2aa>
            mode = HOUR;
    2de0:	10 92 35 03 	sts	0x0335, r1
    2de4:	20 c0       	rjmp	.+64     	; 0x2e26 <SetClock+0x2ea>
        else
            mode++;
    2de6:	80 91 35 03 	lds	r24, 0x0335
    2dea:	8f 5f       	subi	r24, 0xFF	; 255
    2dec:	80 93 35 03 	sts	0x0335, r24
    2df0:	1a c0       	rjmp	.+52     	; 0x2e26 <SetClock+0x2ea>
    }
    else if (!(PINB & (1 << 4)))
    2df2:	e3 e2       	ldi	r30, 0x23	; 35
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	80 71       	andi	r24, 0x10	; 16
    2dfe:	90 70       	andi	r25, 0x00	; 0
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	89 f4       	brne	.+34     	; 0x2e26 <SetClock+0x2ea>
    {
        // store the temporary adjusted values to the global variables
        cli(); // mt __disable_interrupt();
    2e04:	f8 94       	cli
        gHOUR = time[HOUR];
    2e06:	80 91 36 03 	lds	r24, 0x0336
    2e0a:	80 93 a2 03 	sts	0x03A2, r24
        gMINUTE = time[MINUTE];
    2e0e:	80 91 37 03 	lds	r24, 0x0337
    2e12:	80 93 a8 03 	sts	0x03A8, r24
        gSECOND = time[SECOND];
    2e16:	80 91 38 03 	lds	r24, 0x0338
    2e1a:	80 93 a3 03 	sts	0x03A3, r24
        sei(); // mt __enable_interrupt();
    2e1e:	78 94       	sei
        mode = HOUR;
    2e20:	10 92 35 03 	sts	0x0335, r1
    2e24:	29 c0       	rjmp	.+82     	; 0x2e78 <SetClock+0x33c>
        return;
    }

    /* OPTIMIZE: Can be solved by using a modulo operation */
    if (time[HOUR] == 255)
    2e26:	80 91 36 03 	lds	r24, 0x0336
    2e2a:	8f 3f       	cpi	r24, 0xFF	; 255
    2e2c:	19 f4       	brne	.+6      	; 0x2e34 <SetClock+0x2f8>
        time[HOUR] = 23;
    2e2e:	87 e1       	ldi	r24, 0x17	; 23
    2e30:	80 93 36 03 	sts	0x0336, r24
    if (time[HOUR] > 23)
    2e34:	80 91 36 03 	lds	r24, 0x0336
    2e38:	88 31       	cpi	r24, 0x18	; 24
    2e3a:	10 f0       	brcs	.+4      	; 0x2e40 <SetClock+0x304>
        time[HOUR] = 0;
    2e3c:	10 92 36 03 	sts	0x0336, r1

    if (time[MINUTE] == 255)
    2e40:	80 91 37 03 	lds	r24, 0x0337
    2e44:	8f 3f       	cpi	r24, 0xFF	; 255
    2e46:	19 f4       	brne	.+6      	; 0x2e4e <SetClock+0x312>
        time[MINUTE] = 59;
    2e48:	8b e3       	ldi	r24, 0x3B	; 59
    2e4a:	80 93 37 03 	sts	0x0337, r24
    if (time[MINUTE] > 59)
    2e4e:	80 91 37 03 	lds	r24, 0x0337
    2e52:	8c 33       	cpi	r24, 0x3C	; 60
    2e54:	10 f0       	brcs	.+4      	; 0x2e5a <SetClock+0x31e>
        time[MINUTE] = 0;
    2e56:	10 92 37 03 	sts	0x0337, r1

    if (time[SECOND] == 255)
    2e5a:	80 91 38 03 	lds	r24, 0x0338
    2e5e:	8f 3f       	cpi	r24, 0xFF	; 255
    2e60:	19 f4       	brne	.+6      	; 0x2e68 <SetClock+0x32c>
        time[SECOND] = 59;
    2e62:	8b e3       	ldi	r24, 0x3B	; 59
    2e64:	80 93 38 03 	sts	0x0338, r24
    if (time[SECOND] > 59)
    2e68:	80 91 38 03 	lds	r24, 0x0338
    2e6c:	8c 33       	cpi	r24, 0x3C	; 60
    2e6e:	10 f0       	brcs	.+4      	; 0x2e74 <SetClock+0x338>
        time[SECOND] = 0;
    2e70:	10 92 38 03 	sts	0x0338, r1

    enter_function = 0;
    2e74:	10 92 85 01 	sts	0x0185, r1
    return;
}
    2e78:	6e 96       	adiw	r28, 0x1e	; 30
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
    2e84:	cf 91       	pop	r28
    2e86:	df 91       	pop	r29
    2e88:	08 95       	ret

00002e8a <__vector_5>:
// #pragma vector = TIMER2_OVF_vect
// __interrupt void TIMER2_OVF_interrupt(void)
// SIGNAL(SIG_OVERFLOW2)
ISR(TIMER2_OVF_vect)
// mtE
{
    2e8a:	1f 92       	push	r1
    2e8c:	0f 92       	push	r0
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	0f 92       	push	r0
    2e92:	11 24       	eor	r1, r1
    2e94:	8f 93       	push	r24
    2e96:	df 93       	push	r29
    2e98:	cf 93       	push	r28
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62

    gSECOND++;               // increment second
    2e9e:	80 91 a3 03 	lds	r24, 0x03A3
    2ea2:	8f 5f       	subi	r24, 0xFF	; 255
    2ea4:	80 93 a3 03 	sts	0x03A3, r24

    if (gSECOND == 60)
    2ea8:	80 91 a3 03 	lds	r24, 0x03A3
    2eac:	8c 33       	cpi	r24, 0x3C	; 60
    2eae:	11 f5       	brne	.+68     	; 0x2ef4 <__vector_5+0x6a>
    {
        gSECOND = 0;
    2eb0:	10 92 a3 03 	sts	0x03A3, r1
        gMINUTE++;
    2eb4:	80 91 a8 03 	lds	r24, 0x03A8
    2eb8:	8f 5f       	subi	r24, 0xFF	; 255
    2eba:	80 93 a8 03 	sts	0x03A8, r24
        
        gPowerSaveTimer++;
    2ebe:	80 91 34 03 	lds	r24, 0x0334
    2ec2:	8f 5f       	subi	r24, 0xFF	; 255
    2ec4:	80 93 34 03 	sts	0x0334, r24
        
        if (gMINUTE > 59)
    2ec8:	80 91 a8 03 	lds	r24, 0x03A8
    2ecc:	8c 33       	cpi	r24, 0x3C	; 60
    2ece:	90 f0       	brcs	.+36     	; 0x2ef4 <__vector_5+0x6a>
        {
            gMINUTE = 0;
    2ed0:	10 92 a8 03 	sts	0x03A8, r1
            gHOUR++;
    2ed4:	80 91 a2 03 	lds	r24, 0x03A2
    2ed8:	8f 5f       	subi	r24, 0xFF	; 255
    2eda:	80 93 a2 03 	sts	0x03A2, r24
            
            if (gHOUR > 23)
    2ede:	80 91 a2 03 	lds	r24, 0x03A2
    2ee2:	88 31       	cpi	r24, 0x18	; 24
    2ee4:	38 f0       	brcs	.+14     	; 0x2ef4 <__vector_5+0x6a>
            {
                
                gHOUR = 0;
    2ee6:	10 92 a2 03 	sts	0x03A2, r1
                gDAY++;
    2eea:	80 91 a4 03 	lds	r24, 0x03A4
    2eee:	8f 5f       	subi	r24, 0xFF	; 255
    2ef0:	80 93 a4 03 	sts	0x03A4, r24
            }
        }
    }
}
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	8f 91       	pop	r24
    2efa:	0f 90       	pop	r0
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	0f 90       	pop	r0
    2f00:	1f 90       	pop	r1
    2f02:	18 95       	reti

00002f04 <__floatsisf>:
    2f04:	a8 e0       	ldi	r26, 0x08	; 8
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	e8 e8       	ldi	r30, 0x88	; 136
    2f0a:	f7 e1       	ldi	r31, 0x17	; 23
    2f0c:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__prologue_saves__+0x12>
    2f10:	9b 01       	movw	r18, r22
    2f12:	ac 01       	movw	r20, r24
    2f14:	83 e0       	ldi	r24, 0x03	; 3
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	da 01       	movw	r26, r20
    2f1a:	c9 01       	movw	r24, r18
    2f1c:	88 27       	eor	r24, r24
    2f1e:	b7 fd       	sbrc	r27, 7
    2f20:	83 95       	inc	r24
    2f22:	99 27       	eor	r25, r25
    2f24:	aa 27       	eor	r26, r26
    2f26:	bb 27       	eor	r27, r27
    2f28:	b8 2e       	mov	r11, r24
    2f2a:	21 15       	cp	r18, r1
    2f2c:	31 05       	cpc	r19, r1
    2f2e:	41 05       	cpc	r20, r1
    2f30:	51 05       	cpc	r21, r1
    2f32:	19 f4       	brne	.+6      	; 0x2f3a <__floatsisf+0x36>
    2f34:	82 e0       	ldi	r24, 0x02	; 2
    2f36:	89 83       	std	Y+1, r24	; 0x01
    2f38:	3a c0       	rjmp	.+116    	; 0x2fae <__floatsisf+0xaa>
    2f3a:	88 23       	and	r24, r24
    2f3c:	a9 f0       	breq	.+42     	; 0x2f68 <__floatsisf+0x64>
    2f3e:	20 30       	cpi	r18, 0x00	; 0
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	38 07       	cpc	r19, r24
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	48 07       	cpc	r20, r24
    2f48:	80 e8       	ldi	r24, 0x80	; 128
    2f4a:	58 07       	cpc	r21, r24
    2f4c:	29 f4       	brne	.+10     	; 0x2f58 <__floatsisf+0x54>
    2f4e:	60 e0       	ldi	r22, 0x00	; 0
    2f50:	70 e0       	ldi	r23, 0x00	; 0
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	9f ec       	ldi	r25, 0xCF	; 207
    2f56:	30 c0       	rjmp	.+96     	; 0x2fb8 <__floatsisf+0xb4>
    2f58:	ee 24       	eor	r14, r14
    2f5a:	ff 24       	eor	r15, r15
    2f5c:	87 01       	movw	r16, r14
    2f5e:	e2 1a       	sub	r14, r18
    2f60:	f3 0a       	sbc	r15, r19
    2f62:	04 0b       	sbc	r16, r20
    2f64:	15 0b       	sbc	r17, r21
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <__floatsisf+0x68>
    2f68:	79 01       	movw	r14, r18
    2f6a:	8a 01       	movw	r16, r20
    2f6c:	8e e1       	ldi	r24, 0x1E	; 30
    2f6e:	c8 2e       	mov	r12, r24
    2f70:	d1 2c       	mov	r13, r1
    2f72:	dc 82       	std	Y+4, r13	; 0x04
    2f74:	cb 82       	std	Y+3, r12	; 0x03
    2f76:	ed 82       	std	Y+5, r14	; 0x05
    2f78:	fe 82       	std	Y+6, r15	; 0x06
    2f7a:	0f 83       	std	Y+7, r16	; 0x07
    2f7c:	18 87       	std	Y+8, r17	; 0x08
    2f7e:	c8 01       	movw	r24, r16
    2f80:	b7 01       	movw	r22, r14
    2f82:	0e 94 34 18 	call	0x3068	; 0x3068 <__clzsi2>
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	18 16       	cp	r1, r24
    2f8a:	19 06       	cpc	r1, r25
    2f8c:	84 f4       	brge	.+32     	; 0x2fae <__floatsisf+0xaa>
    2f8e:	08 2e       	mov	r0, r24
    2f90:	04 c0       	rjmp	.+8      	; 0x2f9a <__floatsisf+0x96>
    2f92:	ee 0c       	add	r14, r14
    2f94:	ff 1c       	adc	r15, r15
    2f96:	00 1f       	adc	r16, r16
    2f98:	11 1f       	adc	r17, r17
    2f9a:	0a 94       	dec	r0
    2f9c:	d2 f7       	brpl	.-12     	; 0x2f92 <__floatsisf+0x8e>
    2f9e:	ed 82       	std	Y+5, r14	; 0x05
    2fa0:	fe 82       	std	Y+6, r15	; 0x06
    2fa2:	0f 83       	std	Y+7, r16	; 0x07
    2fa4:	18 87       	std	Y+8, r17	; 0x08
    2fa6:	c8 1a       	sub	r12, r24
    2fa8:	d9 0a       	sbc	r13, r25
    2faa:	dc 82       	std	Y+4, r13	; 0x04
    2fac:	cb 82       	std	Y+3, r12	; 0x03
    2fae:	ba 82       	std	Y+2, r11	; 0x02
    2fb0:	ce 01       	movw	r24, r28
    2fb2:	01 96       	adiw	r24, 0x01	; 1
    2fb4:	0e 94 83 18 	call	0x3106	; 0x3106 <__pack_f>
    2fb8:	28 96       	adiw	r28, 0x08	; 8
    2fba:	e9 e0       	ldi	r30, 0x09	; 9
    2fbc:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <__epilogue_restores__+0x12>

00002fc0 <__fixsfsi>:
    2fc0:	ac e0       	ldi	r26, 0x0C	; 12
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	e6 ee       	ldi	r30, 0xE6	; 230
    2fc6:	f7 e1       	ldi	r31, 0x17	; 23
    2fc8:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <__prologue_saves__+0x20>
    2fcc:	69 83       	std	Y+1, r22	; 0x01
    2fce:	7a 83       	std	Y+2, r23	; 0x02
    2fd0:	8b 83       	std	Y+3, r24	; 0x03
    2fd2:	9c 83       	std	Y+4, r25	; 0x04
    2fd4:	ce 01       	movw	r24, r28
    2fd6:	01 96       	adiw	r24, 0x01	; 1
    2fd8:	be 01       	movw	r22, r28
    2fda:	6b 5f       	subi	r22, 0xFB	; 251
    2fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fde:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__unpack_f>
    2fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe4:	82 30       	cpi	r24, 0x02	; 2
    2fe6:	61 f1       	breq	.+88     	; 0x3040 <__fixsfsi+0x80>
    2fe8:	82 30       	cpi	r24, 0x02	; 2
    2fea:	50 f1       	brcs	.+84     	; 0x3040 <__fixsfsi+0x80>
    2fec:	84 30       	cpi	r24, 0x04	; 4
    2fee:	21 f4       	brne	.+8      	; 0x2ff8 <__fixsfsi+0x38>
    2ff0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ff2:	88 23       	and	r24, r24
    2ff4:	51 f1       	breq	.+84     	; 0x304a <__fixsfsi+0x8a>
    2ff6:	2e c0       	rjmp	.+92     	; 0x3054 <__fixsfsi+0x94>
    2ff8:	2f 81       	ldd	r18, Y+7	; 0x07
    2ffa:	38 85       	ldd	r19, Y+8	; 0x08
    2ffc:	37 fd       	sbrc	r19, 7
    2ffe:	20 c0       	rjmp	.+64     	; 0x3040 <__fixsfsi+0x80>
    3000:	6e 81       	ldd	r22, Y+6	; 0x06
    3002:	2f 31       	cpi	r18, 0x1F	; 31
    3004:	31 05       	cpc	r19, r1
    3006:	1c f0       	brlt	.+6      	; 0x300e <__fixsfsi+0x4e>
    3008:	66 23       	and	r22, r22
    300a:	f9 f0       	breq	.+62     	; 0x304a <__fixsfsi+0x8a>
    300c:	23 c0       	rjmp	.+70     	; 0x3054 <__fixsfsi+0x94>
    300e:	8e e1       	ldi	r24, 0x1E	; 30
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	82 1b       	sub	r24, r18
    3014:	93 0b       	sbc	r25, r19
    3016:	29 85       	ldd	r18, Y+9	; 0x09
    3018:	3a 85       	ldd	r19, Y+10	; 0x0a
    301a:	4b 85       	ldd	r20, Y+11	; 0x0b
    301c:	5c 85       	ldd	r21, Y+12	; 0x0c
    301e:	04 c0       	rjmp	.+8      	; 0x3028 <__fixsfsi+0x68>
    3020:	56 95       	lsr	r21
    3022:	47 95       	ror	r20
    3024:	37 95       	ror	r19
    3026:	27 95       	ror	r18
    3028:	8a 95       	dec	r24
    302a:	d2 f7       	brpl	.-12     	; 0x3020 <__fixsfsi+0x60>
    302c:	66 23       	and	r22, r22
    302e:	b1 f0       	breq	.+44     	; 0x305c <__fixsfsi+0x9c>
    3030:	50 95       	com	r21
    3032:	40 95       	com	r20
    3034:	30 95       	com	r19
    3036:	21 95       	neg	r18
    3038:	3f 4f       	sbci	r19, 0xFF	; 255
    303a:	4f 4f       	sbci	r20, 0xFF	; 255
    303c:	5f 4f       	sbci	r21, 0xFF	; 255
    303e:	0e c0       	rjmp	.+28     	; 0x305c <__fixsfsi+0x9c>
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e0       	ldi	r20, 0x00	; 0
    3046:	50 e0       	ldi	r21, 0x00	; 0
    3048:	09 c0       	rjmp	.+18     	; 0x305c <__fixsfsi+0x9c>
    304a:	2f ef       	ldi	r18, 0xFF	; 255
    304c:	3f ef       	ldi	r19, 0xFF	; 255
    304e:	4f ef       	ldi	r20, 0xFF	; 255
    3050:	5f e7       	ldi	r21, 0x7F	; 127
    3052:	04 c0       	rjmp	.+8      	; 0x305c <__fixsfsi+0x9c>
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e0       	ldi	r20, 0x00	; 0
    305a:	50 e8       	ldi	r21, 0x80	; 128
    305c:	b9 01       	movw	r22, r18
    305e:	ca 01       	movw	r24, r20
    3060:	2c 96       	adiw	r28, 0x0c	; 12
    3062:	e2 e0       	ldi	r30, 0x02	; 2
    3064:	0c 94 14 1d 	jmp	0x3a28	; 0x3a28 <__epilogue_restores__+0x20>

00003068 <__clzsi2>:
    3068:	ef 92       	push	r14
    306a:	ff 92       	push	r15
    306c:	0f 93       	push	r16
    306e:	1f 93       	push	r17
    3070:	7b 01       	movw	r14, r22
    3072:	8c 01       	movw	r16, r24
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	e8 16       	cp	r14, r24
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	f8 06       	cpc	r15, r24
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	08 07       	cpc	r16, r24
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	18 07       	cpc	r17, r24
    3084:	88 f4       	brcc	.+34     	; 0x30a8 <__clzsi2+0x40>
    3086:	8f ef       	ldi	r24, 0xFF	; 255
    3088:	e8 16       	cp	r14, r24
    308a:	f1 04       	cpc	r15, r1
    308c:	01 05       	cpc	r16, r1
    308e:	11 05       	cpc	r17, r1
    3090:	31 f0       	breq	.+12     	; 0x309e <__clzsi2+0x36>
    3092:	28 f0       	brcs	.+10     	; 0x309e <__clzsi2+0x36>
    3094:	88 e0       	ldi	r24, 0x08	; 8
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	a0 e0       	ldi	r26, 0x00	; 0
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	17 c0       	rjmp	.+46     	; 0x30cc <__clzsi2+0x64>
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	a0 e0       	ldi	r26, 0x00	; 0
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	12 c0       	rjmp	.+36     	; 0x30cc <__clzsi2+0x64>
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	e8 16       	cp	r14, r24
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	f8 06       	cpc	r15, r24
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	08 07       	cpc	r16, r24
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	18 07       	cpc	r17, r24
    30b8:	28 f0       	brcs	.+10     	; 0x30c4 <__clzsi2+0x5c>
    30ba:	88 e1       	ldi	r24, 0x18	; 24
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	a0 e0       	ldi	r26, 0x00	; 0
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	04 c0       	rjmp	.+8      	; 0x30cc <__clzsi2+0x64>
    30c4:	80 e1       	ldi	r24, 0x10	; 16
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	a0 e0       	ldi	r26, 0x00	; 0
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	20 e2       	ldi	r18, 0x20	; 32
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	50 e0       	ldi	r21, 0x00	; 0
    30d4:	28 1b       	sub	r18, r24
    30d6:	39 0b       	sbc	r19, r25
    30d8:	4a 0b       	sbc	r20, r26
    30da:	5b 0b       	sbc	r21, r27
    30dc:	04 c0       	rjmp	.+8      	; 0x30e6 <__clzsi2+0x7e>
    30de:	16 95       	lsr	r17
    30e0:	07 95       	ror	r16
    30e2:	f7 94       	ror	r15
    30e4:	e7 94       	ror	r14
    30e6:	8a 95       	dec	r24
    30e8:	d2 f7       	brpl	.-12     	; 0x30de <__clzsi2+0x76>
    30ea:	f7 01       	movw	r30, r14
    30ec:	ea 57       	subi	r30, 0x7A	; 122
    30ee:	fe 4f       	sbci	r31, 0xFE	; 254
    30f0:	80 81       	ld	r24, Z
    30f2:	28 1b       	sub	r18, r24
    30f4:	31 09       	sbc	r19, r1
    30f6:	41 09       	sbc	r20, r1
    30f8:	51 09       	sbc	r21, r1
    30fa:	c9 01       	movw	r24, r18
    30fc:	1f 91       	pop	r17
    30fe:	0f 91       	pop	r16
    3100:	ff 90       	pop	r15
    3102:	ef 90       	pop	r14
    3104:	08 95       	ret

00003106 <__pack_f>:
    3106:	df 92       	push	r13
    3108:	ef 92       	push	r14
    310a:	ff 92       	push	r15
    310c:	0f 93       	push	r16
    310e:	1f 93       	push	r17
    3110:	fc 01       	movw	r30, r24
    3112:	e4 80       	ldd	r14, Z+4	; 0x04
    3114:	f5 80       	ldd	r15, Z+5	; 0x05
    3116:	06 81       	ldd	r16, Z+6	; 0x06
    3118:	17 81       	ldd	r17, Z+7	; 0x07
    311a:	d1 80       	ldd	r13, Z+1	; 0x01
    311c:	80 81       	ld	r24, Z
    311e:	82 30       	cpi	r24, 0x02	; 2
    3120:	48 f4       	brcc	.+18     	; 0x3134 <__pack_f+0x2e>
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	a0 e1       	ldi	r26, 0x10	; 16
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	e8 2a       	or	r14, r24
    312c:	f9 2a       	or	r15, r25
    312e:	0a 2b       	or	r16, r26
    3130:	1b 2b       	or	r17, r27
    3132:	a5 c0       	rjmp	.+330    	; 0x327e <__pack_f+0x178>
    3134:	84 30       	cpi	r24, 0x04	; 4
    3136:	09 f4       	brne	.+2      	; 0x313a <__pack_f+0x34>
    3138:	9f c0       	rjmp	.+318    	; 0x3278 <__pack_f+0x172>
    313a:	82 30       	cpi	r24, 0x02	; 2
    313c:	21 f4       	brne	.+8      	; 0x3146 <__pack_f+0x40>
    313e:	ee 24       	eor	r14, r14
    3140:	ff 24       	eor	r15, r15
    3142:	87 01       	movw	r16, r14
    3144:	05 c0       	rjmp	.+10     	; 0x3150 <__pack_f+0x4a>
    3146:	e1 14       	cp	r14, r1
    3148:	f1 04       	cpc	r15, r1
    314a:	01 05       	cpc	r16, r1
    314c:	11 05       	cpc	r17, r1
    314e:	19 f4       	brne	.+6      	; 0x3156 <__pack_f+0x50>
    3150:	e0 e0       	ldi	r30, 0x00	; 0
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	96 c0       	rjmp	.+300    	; 0x3282 <__pack_f+0x17c>
    3156:	62 81       	ldd	r22, Z+2	; 0x02
    3158:	73 81       	ldd	r23, Z+3	; 0x03
    315a:	9f ef       	ldi	r25, 0xFF	; 255
    315c:	62 38       	cpi	r22, 0x82	; 130
    315e:	79 07       	cpc	r23, r25
    3160:	0c f0       	brlt	.+2      	; 0x3164 <__pack_f+0x5e>
    3162:	5b c0       	rjmp	.+182    	; 0x321a <__pack_f+0x114>
    3164:	22 e8       	ldi	r18, 0x82	; 130
    3166:	3f ef       	ldi	r19, 0xFF	; 255
    3168:	26 1b       	sub	r18, r22
    316a:	37 0b       	sbc	r19, r23
    316c:	2a 31       	cpi	r18, 0x1A	; 26
    316e:	31 05       	cpc	r19, r1
    3170:	2c f0       	brlt	.+10     	; 0x317c <__pack_f+0x76>
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e0       	ldi	r20, 0x00	; 0
    3178:	50 e0       	ldi	r21, 0x00	; 0
    317a:	2a c0       	rjmp	.+84     	; 0x31d0 <__pack_f+0xca>
    317c:	b8 01       	movw	r22, r16
    317e:	a7 01       	movw	r20, r14
    3180:	02 2e       	mov	r0, r18
    3182:	04 c0       	rjmp	.+8      	; 0x318c <__pack_f+0x86>
    3184:	76 95       	lsr	r23
    3186:	67 95       	ror	r22
    3188:	57 95       	ror	r21
    318a:	47 95       	ror	r20
    318c:	0a 94       	dec	r0
    318e:	d2 f7       	brpl	.-12     	; 0x3184 <__pack_f+0x7e>
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	a0 e0       	ldi	r26, 0x00	; 0
    3196:	b0 e0       	ldi	r27, 0x00	; 0
    3198:	04 c0       	rjmp	.+8      	; 0x31a2 <__pack_f+0x9c>
    319a:	88 0f       	add	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	aa 1f       	adc	r26, r26
    31a0:	bb 1f       	adc	r27, r27
    31a2:	2a 95       	dec	r18
    31a4:	d2 f7       	brpl	.-12     	; 0x319a <__pack_f+0x94>
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	a1 09       	sbc	r26, r1
    31aa:	b1 09       	sbc	r27, r1
    31ac:	8e 21       	and	r24, r14
    31ae:	9f 21       	and	r25, r15
    31b0:	a0 23       	and	r26, r16
    31b2:	b1 23       	and	r27, r17
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	a1 05       	cpc	r26, r1
    31b8:	b1 05       	cpc	r27, r1
    31ba:	21 f0       	breq	.+8      	; 0x31c4 <__pack_f+0xbe>
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	a0 e0       	ldi	r26, 0x00	; 0
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	9a 01       	movw	r18, r20
    31c6:	ab 01       	movw	r20, r22
    31c8:	28 2b       	or	r18, r24
    31ca:	39 2b       	or	r19, r25
    31cc:	4a 2b       	or	r20, r26
    31ce:	5b 2b       	or	r21, r27
    31d0:	da 01       	movw	r26, r20
    31d2:	c9 01       	movw	r24, r18
    31d4:	8f 77       	andi	r24, 0x7F	; 127
    31d6:	90 70       	andi	r25, 0x00	; 0
    31d8:	a0 70       	andi	r26, 0x00	; 0
    31da:	b0 70       	andi	r27, 0x00	; 0
    31dc:	80 34       	cpi	r24, 0x40	; 64
    31de:	91 05       	cpc	r25, r1
    31e0:	a1 05       	cpc	r26, r1
    31e2:	b1 05       	cpc	r27, r1
    31e4:	39 f4       	brne	.+14     	; 0x31f4 <__pack_f+0xee>
    31e6:	27 ff       	sbrs	r18, 7
    31e8:	09 c0       	rjmp	.+18     	; 0x31fc <__pack_f+0xf6>
    31ea:	20 5c       	subi	r18, 0xC0	; 192
    31ec:	3f 4f       	sbci	r19, 0xFF	; 255
    31ee:	4f 4f       	sbci	r20, 0xFF	; 255
    31f0:	5f 4f       	sbci	r21, 0xFF	; 255
    31f2:	04 c0       	rjmp	.+8      	; 0x31fc <__pack_f+0xf6>
    31f4:	21 5c       	subi	r18, 0xC1	; 193
    31f6:	3f 4f       	sbci	r19, 0xFF	; 255
    31f8:	4f 4f       	sbci	r20, 0xFF	; 255
    31fa:	5f 4f       	sbci	r21, 0xFF	; 255
    31fc:	e0 e0       	ldi	r30, 0x00	; 0
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	20 30       	cpi	r18, 0x00	; 0
    3202:	a0 e0       	ldi	r26, 0x00	; 0
    3204:	3a 07       	cpc	r19, r26
    3206:	a0 e0       	ldi	r26, 0x00	; 0
    3208:	4a 07       	cpc	r20, r26
    320a:	a0 e4       	ldi	r26, 0x40	; 64
    320c:	5a 07       	cpc	r21, r26
    320e:	10 f0       	brcs	.+4      	; 0x3214 <__pack_f+0x10e>
    3210:	e1 e0       	ldi	r30, 0x01	; 1
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	79 01       	movw	r14, r18
    3216:	8a 01       	movw	r16, r20
    3218:	27 c0       	rjmp	.+78     	; 0x3268 <__pack_f+0x162>
    321a:	60 38       	cpi	r22, 0x80	; 128
    321c:	71 05       	cpc	r23, r1
    321e:	64 f5       	brge	.+88     	; 0x3278 <__pack_f+0x172>
    3220:	fb 01       	movw	r30, r22
    3222:	e1 58       	subi	r30, 0x81	; 129
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	d8 01       	movw	r26, r16
    3228:	c7 01       	movw	r24, r14
    322a:	8f 77       	andi	r24, 0x7F	; 127
    322c:	90 70       	andi	r25, 0x00	; 0
    322e:	a0 70       	andi	r26, 0x00	; 0
    3230:	b0 70       	andi	r27, 0x00	; 0
    3232:	80 34       	cpi	r24, 0x40	; 64
    3234:	91 05       	cpc	r25, r1
    3236:	a1 05       	cpc	r26, r1
    3238:	b1 05       	cpc	r27, r1
    323a:	39 f4       	brne	.+14     	; 0x324a <__pack_f+0x144>
    323c:	e7 fe       	sbrs	r14, 7
    323e:	0d c0       	rjmp	.+26     	; 0x325a <__pack_f+0x154>
    3240:	80 e4       	ldi	r24, 0x40	; 64
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	a0 e0       	ldi	r26, 0x00	; 0
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	04 c0       	rjmp	.+8      	; 0x3252 <__pack_f+0x14c>
    324a:	8f e3       	ldi	r24, 0x3F	; 63
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	a0 e0       	ldi	r26, 0x00	; 0
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	e8 0e       	add	r14, r24
    3254:	f9 1e       	adc	r15, r25
    3256:	0a 1f       	adc	r16, r26
    3258:	1b 1f       	adc	r17, r27
    325a:	17 ff       	sbrs	r17, 7
    325c:	05 c0       	rjmp	.+10     	; 0x3268 <__pack_f+0x162>
    325e:	16 95       	lsr	r17
    3260:	07 95       	ror	r16
    3262:	f7 94       	ror	r15
    3264:	e7 94       	ror	r14
    3266:	31 96       	adiw	r30, 0x01	; 1
    3268:	87 e0       	ldi	r24, 0x07	; 7
    326a:	16 95       	lsr	r17
    326c:	07 95       	ror	r16
    326e:	f7 94       	ror	r15
    3270:	e7 94       	ror	r14
    3272:	8a 95       	dec	r24
    3274:	d1 f7       	brne	.-12     	; 0x326a <__pack_f+0x164>
    3276:	05 c0       	rjmp	.+10     	; 0x3282 <__pack_f+0x17c>
    3278:	ee 24       	eor	r14, r14
    327a:	ff 24       	eor	r15, r15
    327c:	87 01       	movw	r16, r14
    327e:	ef ef       	ldi	r30, 0xFF	; 255
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	6e 2f       	mov	r22, r30
    3284:	67 95       	ror	r22
    3286:	66 27       	eor	r22, r22
    3288:	67 95       	ror	r22
    328a:	90 2f       	mov	r25, r16
    328c:	9f 77       	andi	r25, 0x7F	; 127
    328e:	d7 94       	ror	r13
    3290:	dd 24       	eor	r13, r13
    3292:	d7 94       	ror	r13
    3294:	8e 2f       	mov	r24, r30
    3296:	86 95       	lsr	r24
    3298:	49 2f       	mov	r20, r25
    329a:	46 2b       	or	r20, r22
    329c:	58 2f       	mov	r21, r24
    329e:	5d 29       	or	r21, r13
    32a0:	b7 01       	movw	r22, r14
    32a2:	ca 01       	movw	r24, r20
    32a4:	1f 91       	pop	r17
    32a6:	0f 91       	pop	r16
    32a8:	ff 90       	pop	r15
    32aa:	ef 90       	pop	r14
    32ac:	df 90       	pop	r13
    32ae:	08 95       	ret

000032b0 <__unpack_f>:
    32b0:	fc 01       	movw	r30, r24
    32b2:	db 01       	movw	r26, r22
    32b4:	40 81       	ld	r20, Z
    32b6:	51 81       	ldd	r21, Z+1	; 0x01
    32b8:	22 81       	ldd	r18, Z+2	; 0x02
    32ba:	62 2f       	mov	r22, r18
    32bc:	6f 77       	andi	r22, 0x7F	; 127
    32be:	70 e0       	ldi	r23, 0x00	; 0
    32c0:	22 1f       	adc	r18, r18
    32c2:	22 27       	eor	r18, r18
    32c4:	22 1f       	adc	r18, r18
    32c6:	93 81       	ldd	r25, Z+3	; 0x03
    32c8:	89 2f       	mov	r24, r25
    32ca:	88 0f       	add	r24, r24
    32cc:	82 2b       	or	r24, r18
    32ce:	28 2f       	mov	r18, r24
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	99 1f       	adc	r25, r25
    32d4:	99 27       	eor	r25, r25
    32d6:	99 1f       	adc	r25, r25
    32d8:	11 96       	adiw	r26, 0x01	; 1
    32da:	9c 93       	st	X, r25
    32dc:	11 97       	sbiw	r26, 0x01	; 1
    32de:	21 15       	cp	r18, r1
    32e0:	31 05       	cpc	r19, r1
    32e2:	a9 f5       	brne	.+106    	; 0x334e <__unpack_f+0x9e>
    32e4:	41 15       	cp	r20, r1
    32e6:	51 05       	cpc	r21, r1
    32e8:	61 05       	cpc	r22, r1
    32ea:	71 05       	cpc	r23, r1
    32ec:	11 f4       	brne	.+4      	; 0x32f2 <__unpack_f+0x42>
    32ee:	82 e0       	ldi	r24, 0x02	; 2
    32f0:	37 c0       	rjmp	.+110    	; 0x3360 <__unpack_f+0xb0>
    32f2:	82 e8       	ldi	r24, 0x82	; 130
    32f4:	9f ef       	ldi	r25, 0xFF	; 255
    32f6:	13 96       	adiw	r26, 0x03	; 3
    32f8:	9c 93       	st	X, r25
    32fa:	8e 93       	st	-X, r24
    32fc:	12 97       	sbiw	r26, 0x02	; 2
    32fe:	9a 01       	movw	r18, r20
    3300:	ab 01       	movw	r20, r22
    3302:	67 e0       	ldi	r22, 0x07	; 7
    3304:	22 0f       	add	r18, r18
    3306:	33 1f       	adc	r19, r19
    3308:	44 1f       	adc	r20, r20
    330a:	55 1f       	adc	r21, r21
    330c:	6a 95       	dec	r22
    330e:	d1 f7       	brne	.-12     	; 0x3304 <__unpack_f+0x54>
    3310:	83 e0       	ldi	r24, 0x03	; 3
    3312:	8c 93       	st	X, r24
    3314:	0d c0       	rjmp	.+26     	; 0x3330 <__unpack_f+0x80>
    3316:	22 0f       	add	r18, r18
    3318:	33 1f       	adc	r19, r19
    331a:	44 1f       	adc	r20, r20
    331c:	55 1f       	adc	r21, r21
    331e:	12 96       	adiw	r26, 0x02	; 2
    3320:	8d 91       	ld	r24, X+
    3322:	9c 91       	ld	r25, X
    3324:	13 97       	sbiw	r26, 0x03	; 3
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	13 96       	adiw	r26, 0x03	; 3
    332a:	9c 93       	st	X, r25
    332c:	8e 93       	st	-X, r24
    332e:	12 97       	sbiw	r26, 0x02	; 2
    3330:	20 30       	cpi	r18, 0x00	; 0
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	38 07       	cpc	r19, r24
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	48 07       	cpc	r20, r24
    333a:	80 e4       	ldi	r24, 0x40	; 64
    333c:	58 07       	cpc	r21, r24
    333e:	58 f3       	brcs	.-42     	; 0x3316 <__unpack_f+0x66>
    3340:	14 96       	adiw	r26, 0x04	; 4
    3342:	2d 93       	st	X+, r18
    3344:	3d 93       	st	X+, r19
    3346:	4d 93       	st	X+, r20
    3348:	5c 93       	st	X, r21
    334a:	17 97       	sbiw	r26, 0x07	; 7
    334c:	08 95       	ret
    334e:	2f 3f       	cpi	r18, 0xFF	; 255
    3350:	31 05       	cpc	r19, r1
    3352:	79 f4       	brne	.+30     	; 0x3372 <__unpack_f+0xc2>
    3354:	41 15       	cp	r20, r1
    3356:	51 05       	cpc	r21, r1
    3358:	61 05       	cpc	r22, r1
    335a:	71 05       	cpc	r23, r1
    335c:	19 f4       	brne	.+6      	; 0x3364 <__unpack_f+0xb4>
    335e:	84 e0       	ldi	r24, 0x04	; 4
    3360:	8c 93       	st	X, r24
    3362:	08 95       	ret
    3364:	64 ff       	sbrs	r22, 4
    3366:	03 c0       	rjmp	.+6      	; 0x336e <__unpack_f+0xbe>
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	8c 93       	st	X, r24
    336c:	12 c0       	rjmp	.+36     	; 0x3392 <__unpack_f+0xe2>
    336e:	1c 92       	st	X, r1
    3370:	10 c0       	rjmp	.+32     	; 0x3392 <__unpack_f+0xe2>
    3372:	2f 57       	subi	r18, 0x7F	; 127
    3374:	30 40       	sbci	r19, 0x00	; 0
    3376:	13 96       	adiw	r26, 0x03	; 3
    3378:	3c 93       	st	X, r19
    337a:	2e 93       	st	-X, r18
    337c:	12 97       	sbiw	r26, 0x02	; 2
    337e:	83 e0       	ldi	r24, 0x03	; 3
    3380:	8c 93       	st	X, r24
    3382:	87 e0       	ldi	r24, 0x07	; 7
    3384:	44 0f       	add	r20, r20
    3386:	55 1f       	adc	r21, r21
    3388:	66 1f       	adc	r22, r22
    338a:	77 1f       	adc	r23, r23
    338c:	8a 95       	dec	r24
    338e:	d1 f7       	brne	.-12     	; 0x3384 <__unpack_f+0xd4>
    3390:	70 64       	ori	r23, 0x40	; 64
    3392:	14 96       	adiw	r26, 0x04	; 4
    3394:	4d 93       	st	X+, r20
    3396:	5d 93       	st	X+, r21
    3398:	6d 93       	st	X+, r22
    339a:	7c 93       	st	X, r23
    339c:	17 97       	sbiw	r26, 0x07	; 7
    339e:	08 95       	ret

000033a0 <dtostrf>:
    33a0:	ef 92       	push	r14
    33a2:	ff 92       	push	r15
    33a4:	0f 93       	push	r16
    33a6:	1f 93       	push	r17
    33a8:	f2 2f       	mov	r31, r18
    33aa:	f0 2e       	mov	r15, r16
    33ac:	47 fd       	sbrc	r20, 7
    33ae:	02 c0       	rjmp	.+4      	; 0x33b4 <dtostrf+0x14>
    33b0:	e4 e0       	ldi	r30, 0x04	; 4
    33b2:	01 c0       	rjmp	.+2      	; 0x33b6 <dtostrf+0x16>
    33b4:	e4 e1       	ldi	r30, 0x14	; 20
    33b6:	24 2f       	mov	r18, r20
    33b8:	33 27       	eor	r19, r19
    33ba:	27 fd       	sbrc	r18, 7
    33bc:	30 95       	com	r19
    33be:	37 ff       	sbrs	r19, 7
    33c0:	03 c0       	rjmp	.+6      	; 0x33c8 <dtostrf+0x28>
    33c2:	30 95       	com	r19
    33c4:	21 95       	neg	r18
    33c6:	3f 4f       	sbci	r19, 0xFF	; 255
    33c8:	4f 2d       	mov	r20, r15
    33ca:	51 2f       	mov	r21, r17
    33cc:	0f 2f       	mov	r16, r31
    33ce:	ee 2e       	mov	r14, r30
    33d0:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <dtoa_prf>
    33d4:	8f 2d       	mov	r24, r15
    33d6:	91 2f       	mov	r25, r17
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	ff 90       	pop	r15
    33de:	ef 90       	pop	r14
    33e0:	08 95       	ret

000033e2 <do_random>:
    33e2:	a0 e0       	ldi	r26, 0x00	; 0
    33e4:	b0 e0       	ldi	r27, 0x00	; 0
    33e6:	e7 ef       	ldi	r30, 0xF7	; 247
    33e8:	f9 e1       	ldi	r31, 0x19	; 25
    33ea:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__prologue_saves__+0x10>
    33ee:	ec 01       	movw	r28, r24
    33f0:	a8 80       	ld	r10, Y
    33f2:	b9 80       	ldd	r11, Y+1	; 0x01
    33f4:	ca 80       	ldd	r12, Y+2	; 0x02
    33f6:	db 80       	ldd	r13, Y+3	; 0x03
    33f8:	a1 14       	cp	r10, r1
    33fa:	b1 04       	cpc	r11, r1
    33fc:	c1 04       	cpc	r12, r1
    33fe:	d1 04       	cpc	r13, r1
    3400:	41 f4       	brne	.+16     	; 0x3412 <do_random+0x30>
    3402:	84 e2       	ldi	r24, 0x24	; 36
    3404:	a8 2e       	mov	r10, r24
    3406:	89 ed       	ldi	r24, 0xD9	; 217
    3408:	b8 2e       	mov	r11, r24
    340a:	8b e5       	ldi	r24, 0x5B	; 91
    340c:	c8 2e       	mov	r12, r24
    340e:	87 e0       	ldi	r24, 0x07	; 7
    3410:	d8 2e       	mov	r13, r24
    3412:	c6 01       	movw	r24, r12
    3414:	b5 01       	movw	r22, r10
    3416:	2d e1       	ldi	r18, 0x1D	; 29
    3418:	33 ef       	ldi	r19, 0xF3	; 243
    341a:	41 e0       	ldi	r20, 0x01	; 1
    341c:	50 e0       	ldi	r21, 0x00	; 0
    341e:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__divmodsi4>
    3422:	27 ea       	ldi	r18, 0xA7	; 167
    3424:	31 e4       	ldi	r19, 0x41	; 65
    3426:	40 e0       	ldi	r20, 0x00	; 0
    3428:	50 e0       	ldi	r21, 0x00	; 0
    342a:	0e 94 8c 1c 	call	0x3918	; 0x3918 <__mulsi3>
    342e:	7b 01       	movw	r14, r22
    3430:	8c 01       	movw	r16, r24
    3432:	c6 01       	movw	r24, r12
    3434:	b5 01       	movw	r22, r10
    3436:	2d e1       	ldi	r18, 0x1D	; 29
    3438:	33 ef       	ldi	r19, 0xF3	; 243
    343a:	41 e0       	ldi	r20, 0x01	; 1
    343c:	50 e0       	ldi	r21, 0x00	; 0
    343e:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__divmodsi4>
    3442:	ca 01       	movw	r24, r20
    3444:	b9 01       	movw	r22, r18
    3446:	2c ee       	ldi	r18, 0xEC	; 236
    3448:	34 ef       	ldi	r19, 0xF4	; 244
    344a:	4f ef       	ldi	r20, 0xFF	; 255
    344c:	5f ef       	ldi	r21, 0xFF	; 255
    344e:	0e 94 8c 1c 	call	0x3918	; 0x3918 <__mulsi3>
    3452:	6e 0d       	add	r22, r14
    3454:	7f 1d       	adc	r23, r15
    3456:	80 1f       	adc	r24, r16
    3458:	91 1f       	adc	r25, r17
    345a:	97 ff       	sbrs	r25, 7
    345c:	04 c0       	rjmp	.+8      	; 0x3466 <do_random+0x84>
    345e:	61 50       	subi	r22, 0x01	; 1
    3460:	70 40       	sbci	r23, 0x00	; 0
    3462:	80 40       	sbci	r24, 0x00	; 0
    3464:	90 48       	sbci	r25, 0x80	; 128
    3466:	68 83       	st	Y, r22
    3468:	79 83       	std	Y+1, r23	; 0x01
    346a:	8a 83       	std	Y+2, r24	; 0x02
    346c:	9b 83       	std	Y+3, r25	; 0x03
    346e:	9b 01       	movw	r18, r22
    3470:	ac 01       	movw	r20, r24
    3472:	5f 77       	andi	r21, 0x7F	; 127
    3474:	b9 01       	movw	r22, r18
    3476:	ca 01       	movw	r24, r20
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
    347c:	ea e0       	ldi	r30, 0x0A	; 10
    347e:	0c 94 0c 1d 	jmp	0x3a18	; 0x3a18 <__epilogue_restores__+0x10>

00003482 <random_r>:
    3482:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <do_random>
    3486:	08 95       	ret

00003488 <random>:
    3488:	86 e8       	ldi	r24, 0x86	; 134
    348a:	92 e0       	ldi	r25, 0x02	; 2
    348c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <do_random>
    3490:	08 95       	ret

00003492 <srandom>:
    3492:	60 93 86 02 	sts	0x0286, r22
    3496:	70 93 87 02 	sts	0x0287, r23
    349a:	80 93 88 02 	sts	0x0288, r24
    349e:	90 93 89 02 	sts	0x0289, r25
    34a2:	08 95       	ret

000034a4 <dtoa_prf>:
    34a4:	a9 e0       	ldi	r26, 0x09	; 9
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	e8 e5       	ldi	r30, 0x58	; 88
    34aa:	fa e1       	ldi	r31, 0x1A	; 26
    34ac:	0c 94 ec 1c 	jmp	0x39d8	; 0x39d8 <__prologue_saves__+0x8>
    34b0:	6a 01       	movw	r12, r20
    34b2:	12 2f       	mov	r17, r18
    34b4:	a0 2e       	mov	r10, r16
    34b6:	be 2c       	mov	r11, r14
    34b8:	2b e3       	ldi	r18, 0x3B	; 59
    34ba:	20 17       	cp	r18, r16
    34bc:	18 f4       	brcc	.+6      	; 0x34c4 <dtoa_prf+0x20>
    34be:	2c e3       	ldi	r18, 0x3C	; 60
    34c0:	92 2e       	mov	r9, r18
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <dtoa_prf+0x24>
    34c4:	90 2e       	mov	r9, r16
    34c6:	93 94       	inc	r9
    34c8:	ae 01       	movw	r20, r28
    34ca:	4f 5f       	subi	r20, 0xFF	; 255
    34cc:	5f 4f       	sbci	r21, 0xFF	; 255
    34ce:	27 e0       	ldi	r18, 0x07	; 7
    34d0:	09 2d       	mov	r16, r9
    34d2:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__ftoa_engine>
    34d6:	bc 01       	movw	r22, r24
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	e8 2e       	mov	r14, r24
    34dc:	ff 24       	eor	r15, r15
    34de:	c7 01       	movw	r24, r14
    34e0:	89 70       	andi	r24, 0x09	; 9
    34e2:	90 70       	andi	r25, 0x00	; 0
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	11 f4       	brne	.+4      	; 0x34ec <dtoa_prf+0x48>
    34e8:	ad e2       	ldi	r26, 0x2D	; 45
    34ea:	09 c0       	rjmp	.+18     	; 0x34fe <dtoa_prf+0x5a>
    34ec:	b1 fe       	sbrs	r11, 1
    34ee:	02 c0       	rjmp	.+4      	; 0x34f4 <dtoa_prf+0x50>
    34f0:	ab e2       	ldi	r26, 0x2B	; 43
    34f2:	05 c0       	rjmp	.+10     	; 0x34fe <dtoa_prf+0x5a>
    34f4:	b0 fc       	sbrc	r11, 0
    34f6:	02 c0       	rjmp	.+4      	; 0x34fc <dtoa_prf+0x58>
    34f8:	a0 e0       	ldi	r26, 0x00	; 0
    34fa:	01 c0       	rjmp	.+2      	; 0x34fe <dtoa_prf+0x5a>
    34fc:	a0 e2       	ldi	r26, 0x20	; 32
    34fe:	e3 fe       	sbrs	r14, 3
    3500:	3b c0       	rjmp	.+118    	; 0x3578 <dtoa_prf+0xd4>
    3502:	aa 23       	and	r26, r26
    3504:	11 f4       	brne	.+4      	; 0x350a <dtoa_prf+0x66>
    3506:	23 e0       	ldi	r18, 0x03	; 3
    3508:	01 c0       	rjmp	.+2      	; 0x350c <dtoa_prf+0x68>
    350a:	24 e0       	ldi	r18, 0x04	; 4
    350c:	21 17       	cp	r18, r17
    350e:	10 f0       	brcs	.+4      	; 0x3514 <dtoa_prf+0x70>
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	02 c0       	rjmp	.+4      	; 0x3518 <dtoa_prf+0x74>
    3514:	12 1b       	sub	r17, r18
    3516:	21 2f       	mov	r18, r17
    3518:	eb 2c       	mov	r14, r11
    351a:	b4 fe       	sbrs	r11, 4
    351c:	02 c0       	rjmp	.+4      	; 0x3522 <dtoa_prf+0x7e>
    351e:	32 2f       	mov	r19, r18
    3520:	0a c0       	rjmp	.+20     	; 0x3536 <dtoa_prf+0x92>
    3522:	f6 01       	movw	r30, r12
    3524:	32 2f       	mov	r19, r18
    3526:	80 e2       	ldi	r24, 0x20	; 32
    3528:	02 c0       	rjmp	.+4      	; 0x352e <dtoa_prf+0x8a>
    352a:	81 93       	st	Z+, r24
    352c:	31 50       	subi	r19, 0x01	; 1
    352e:	33 23       	and	r19, r19
    3530:	e1 f7       	brne	.-8      	; 0x352a <dtoa_prf+0x86>
    3532:	c2 0e       	add	r12, r18
    3534:	d1 1c       	adc	r13, r1
    3536:	aa 23       	and	r26, r26
    3538:	19 f0       	breq	.+6      	; 0x3540 <dtoa_prf+0x9c>
    353a:	f6 01       	movw	r30, r12
    353c:	a1 93       	st	Z+, r26
    353e:	6f 01       	movw	r12, r30
    3540:	f6 01       	movw	r30, r12
    3542:	31 96       	adiw	r30, 0x01	; 1
    3544:	e2 fe       	sbrs	r14, 2
    3546:	05 c0       	rjmp	.+10     	; 0x3552 <dtoa_prf+0xae>
    3548:	9e e4       	ldi	r25, 0x4E	; 78
    354a:	d6 01       	movw	r26, r12
    354c:	9c 93       	st	X, r25
    354e:	81 e4       	ldi	r24, 0x41	; 65
    3550:	04 c0       	rjmp	.+8      	; 0x355a <dtoa_prf+0xb6>
    3552:	9e e6       	ldi	r25, 0x6E	; 110
    3554:	d6 01       	movw	r26, r12
    3556:	9c 93       	st	X, r25
    3558:	81 e6       	ldi	r24, 0x61	; 97
    355a:	11 96       	adiw	r26, 0x01	; 1
    355c:	8c 93       	st	X, r24
    355e:	91 83       	std	Z+1, r25	; 0x01
    3560:	32 96       	adiw	r30, 0x02	; 2
    3562:	df 01       	movw	r26, r30
    3564:	83 2f       	mov	r24, r19
    3566:	90 e2       	ldi	r25, 0x20	; 32
    3568:	02 c0       	rjmp	.+4      	; 0x356e <dtoa_prf+0xca>
    356a:	9d 93       	st	X+, r25
    356c:	81 50       	subi	r24, 0x01	; 1
    356e:	88 23       	and	r24, r24
    3570:	e1 f7       	brne	.-8      	; 0x356a <dtoa_prf+0xc6>
    3572:	e3 0f       	add	r30, r19
    3574:	f1 1d       	adc	r31, r1
    3576:	40 c0       	rjmp	.+128    	; 0x35f8 <dtoa_prf+0x154>
    3578:	e2 fe       	sbrs	r14, 2
    357a:	42 c0       	rjmp	.+132    	; 0x3600 <dtoa_prf+0x15c>
    357c:	aa 23       	and	r26, r26
    357e:	11 f4       	brne	.+4      	; 0x3584 <dtoa_prf+0xe0>
    3580:	23 e0       	ldi	r18, 0x03	; 3
    3582:	01 c0       	rjmp	.+2      	; 0x3586 <dtoa_prf+0xe2>
    3584:	24 e0       	ldi	r18, 0x04	; 4
    3586:	21 17       	cp	r18, r17
    3588:	10 f0       	brcs	.+4      	; 0x358e <dtoa_prf+0xea>
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	02 c0       	rjmp	.+4      	; 0x3592 <dtoa_prf+0xee>
    358e:	12 1b       	sub	r17, r18
    3590:	21 2f       	mov	r18, r17
    3592:	eb 2c       	mov	r14, r11
    3594:	b4 fe       	sbrs	r11, 4
    3596:	02 c0       	rjmp	.+4      	; 0x359c <dtoa_prf+0xf8>
    3598:	92 2f       	mov	r25, r18
    359a:	0a c0       	rjmp	.+20     	; 0x35b0 <dtoa_prf+0x10c>
    359c:	f6 01       	movw	r30, r12
    359e:	92 2f       	mov	r25, r18
    35a0:	80 e2       	ldi	r24, 0x20	; 32
    35a2:	02 c0       	rjmp	.+4      	; 0x35a8 <dtoa_prf+0x104>
    35a4:	81 93       	st	Z+, r24
    35a6:	91 50       	subi	r25, 0x01	; 1
    35a8:	99 23       	and	r25, r25
    35aa:	e1 f7       	brne	.-8      	; 0x35a4 <dtoa_prf+0x100>
    35ac:	c2 0e       	add	r12, r18
    35ae:	d1 1c       	adc	r13, r1
    35b0:	aa 23       	and	r26, r26
    35b2:	19 f0       	breq	.+6      	; 0x35ba <dtoa_prf+0x116>
    35b4:	f6 01       	movw	r30, r12
    35b6:	a1 93       	st	Z+, r26
    35b8:	6f 01       	movw	r12, r30
    35ba:	f6 01       	movw	r30, r12
    35bc:	31 96       	adiw	r30, 0x01	; 1
    35be:	e2 fe       	sbrs	r14, 2
    35c0:	08 c0       	rjmp	.+16     	; 0x35d2 <dtoa_prf+0x12e>
    35c2:	89 e4       	ldi	r24, 0x49	; 73
    35c4:	d6 01       	movw	r26, r12
    35c6:	8c 93       	st	X, r24
    35c8:	8e e4       	ldi	r24, 0x4E	; 78
    35ca:	11 96       	adiw	r26, 0x01	; 1
    35cc:	8c 93       	st	X, r24
    35ce:	86 e4       	ldi	r24, 0x46	; 70
    35d0:	07 c0       	rjmp	.+14     	; 0x35e0 <dtoa_prf+0x13c>
    35d2:	89 e6       	ldi	r24, 0x69	; 105
    35d4:	d6 01       	movw	r26, r12
    35d6:	8c 93       	st	X, r24
    35d8:	8e e6       	ldi	r24, 0x6E	; 110
    35da:	11 96       	adiw	r26, 0x01	; 1
    35dc:	8c 93       	st	X, r24
    35de:	86 e6       	ldi	r24, 0x66	; 102
    35e0:	81 83       	std	Z+1, r24	; 0x01
    35e2:	32 96       	adiw	r30, 0x02	; 2
    35e4:	df 01       	movw	r26, r30
    35e6:	89 2f       	mov	r24, r25
    35e8:	20 e2       	ldi	r18, 0x20	; 32
    35ea:	02 c0       	rjmp	.+4      	; 0x35f0 <dtoa_prf+0x14c>
    35ec:	2d 93       	st	X+, r18
    35ee:	81 50       	subi	r24, 0x01	; 1
    35f0:	88 23       	and	r24, r24
    35f2:	e1 f7       	brne	.-8      	; 0x35ec <dtoa_prf+0x148>
    35f4:	e9 0f       	add	r30, r25
    35f6:	f1 1d       	adc	r31, r1
    35f8:	10 82       	st	Z, r1
    35fa:	2e ef       	ldi	r18, 0xFE	; 254
    35fc:	3f ef       	ldi	r19, 0xFF	; 255
    35fe:	af c0       	rjmp	.+350    	; 0x375e <dtoa_prf+0x2ba>
    3600:	16 16       	cp	r1, r22
    3602:	17 06       	cpc	r1, r23
    3604:	1c f0       	brlt	.+6      	; 0x360c <dtoa_prf+0x168>
    3606:	41 e0       	ldi	r20, 0x01	; 1
    3608:	50 e0       	ldi	r21, 0x00	; 0
    360a:	03 c0       	rjmp	.+6      	; 0x3612 <dtoa_prf+0x16e>
    360c:	ab 01       	movw	r20, r22
    360e:	4f 5f       	subi	r20, 0xFF	; 255
    3610:	5f 4f       	sbci	r21, 0xFF	; 255
    3612:	aa 20       	and	r10, r10
    3614:	19 f4       	brne	.+6      	; 0x361c <dtoa_prf+0x178>
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	03 c0       	rjmp	.+6      	; 0x3622 <dtoa_prf+0x17e>
    361c:	8a 2d       	mov	r24, r10
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	01 96       	adiw	r24, 0x01	; 1
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	aa 23       	and	r26, r26
    3628:	11 f0       	breq	.+4      	; 0x362e <dtoa_prf+0x18a>
    362a:	21 e0       	ldi	r18, 0x01	; 1
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	24 0f       	add	r18, r20
    3630:	35 1f       	adc	r19, r21
    3632:	28 0f       	add	r18, r24
    3634:	39 1f       	adc	r19, r25
    3636:	81 2f       	mov	r24, r17
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	28 17       	cp	r18, r24
    363c:	39 07       	cpc	r19, r25
    363e:	14 f0       	brlt	.+4      	; 0x3644 <dtoa_prf+0x1a0>
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	02 c0       	rjmp	.+4      	; 0x3648 <dtoa_prf+0x1a4>
    3644:	12 1b       	sub	r17, r18
    3646:	21 2f       	mov	r18, r17
    3648:	4b 2d       	mov	r20, r11
    364a:	50 e0       	ldi	r21, 0x00	; 0
    364c:	ca 01       	movw	r24, r20
    364e:	80 71       	andi	r24, 0x10	; 16
    3650:	90 70       	andi	r25, 0x00	; 0
    3652:	b4 fc       	sbrc	r11, 4
    3654:	0d c0       	rjmp	.+26     	; 0x3670 <dtoa_prf+0x1cc>
    3656:	b3 fc       	sbrc	r11, 3
    3658:	0b c0       	rjmp	.+22     	; 0x3670 <dtoa_prf+0x1cc>
    365a:	f6 01       	movw	r30, r12
    365c:	32 2f       	mov	r19, r18
    365e:	40 e2       	ldi	r20, 0x20	; 32
    3660:	02 c0       	rjmp	.+4      	; 0x3666 <dtoa_prf+0x1c2>
    3662:	41 93       	st	Z+, r20
    3664:	31 50       	subi	r19, 0x01	; 1
    3666:	33 23       	and	r19, r19
    3668:	e1 f7       	brne	.-8      	; 0x3662 <dtoa_prf+0x1be>
    366a:	c2 0e       	add	r12, r18
    366c:	d1 1c       	adc	r13, r1
    366e:	01 c0       	rjmp	.+2      	; 0x3672 <dtoa_prf+0x1ce>
    3670:	32 2f       	mov	r19, r18
    3672:	aa 23       	and	r26, r26
    3674:	19 f0       	breq	.+6      	; 0x367c <dtoa_prf+0x1d8>
    3676:	f6 01       	movw	r30, r12
    3678:	a1 93       	st	Z+, r26
    367a:	6f 01       	movw	r12, r30
    367c:	89 2b       	or	r24, r25
    367e:	11 f0       	breq	.+4      	; 0x3684 <dtoa_prf+0x1e0>
    3680:	13 2f       	mov	r17, r19
    3682:	0a c0       	rjmp	.+20     	; 0x3698 <dtoa_prf+0x1f4>
    3684:	f6 01       	movw	r30, r12
    3686:	13 2f       	mov	r17, r19
    3688:	80 e3       	ldi	r24, 0x30	; 48
    368a:	02 c0       	rjmp	.+4      	; 0x3690 <dtoa_prf+0x1ec>
    368c:	81 93       	st	Z+, r24
    368e:	11 50       	subi	r17, 0x01	; 1
    3690:	11 23       	and	r17, r17
    3692:	e1 f7       	brne	.-8      	; 0x368c <dtoa_prf+0x1e8>
    3694:	c3 0e       	add	r12, r19
    3696:	d1 1c       	adc	r13, r1
    3698:	09 2d       	mov	r16, r9
    369a:	06 0f       	add	r16, r22
    369c:	ba 80       	ldd	r11, Y+2	; 0x02
    369e:	90 e1       	ldi	r25, 0x10	; 16
    36a0:	89 2e       	mov	r8, r25
    36a2:	91 2c       	mov	r9, r1
    36a4:	8e 20       	and	r8, r14
    36a6:	9f 20       	and	r9, r15
    36a8:	e4 fe       	sbrs	r14, 4
    36aa:	04 c0       	rjmp	.+8      	; 0x36b4 <dtoa_prf+0x210>
    36ac:	f1 e3       	ldi	r31, 0x31	; 49
    36ae:	bf 16       	cp	r11, r31
    36b0:	09 f4       	brne	.+2      	; 0x36b4 <dtoa_prf+0x210>
    36b2:	01 50       	subi	r16, 0x01	; 1
    36b4:	10 16       	cp	r1, r16
    36b6:	14 f0       	brlt	.+4      	; 0x36bc <dtoa_prf+0x218>
    36b8:	01 e0       	ldi	r16, 0x01	; 1
    36ba:	03 c0       	rjmp	.+6      	; 0x36c2 <dtoa_prf+0x21e>
    36bc:	09 30       	cpi	r16, 0x09	; 9
    36be:	08 f0       	brcs	.+2      	; 0x36c2 <dtoa_prf+0x21e>
    36c0:	08 e0       	ldi	r16, 0x08	; 8
    36c2:	9b 01       	movw	r18, r22
    36c4:	77 ff       	sbrs	r23, 7
    36c6:	02 c0       	rjmp	.+4      	; 0x36cc <dtoa_prf+0x228>
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	cb 01       	movw	r24, r22
    36ce:	01 96       	adiw	r24, 0x01	; 1
    36d0:	82 1b       	sub	r24, r18
    36d2:	93 0b       	sbc	r25, r19
    36d4:	fe 01       	movw	r30, r28
    36d6:	31 96       	adiw	r30, 0x01	; 1
    36d8:	e8 0f       	add	r30, r24
    36da:	f9 1f       	adc	r31, r25
    36dc:	8e e2       	ldi	r24, 0x2E	; 46
    36de:	f8 2e       	mov	r15, r24
    36e0:	3b 01       	movw	r6, r22
    36e2:	60 1a       	sub	r6, r16
    36e4:	71 08       	sbc	r7, r1
    36e6:	8a 2d       	mov	r24, r10
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	44 27       	eor	r20, r20
    36ec:	55 27       	eor	r21, r21
    36ee:	48 1b       	sub	r20, r24
    36f0:	59 0b       	sbc	r21, r25
    36f2:	8f ef       	ldi	r24, 0xFF	; 255
    36f4:	2f 3f       	cpi	r18, 0xFF	; 255
    36f6:	38 07       	cpc	r19, r24
    36f8:	19 f4       	brne	.+6      	; 0x3700 <dtoa_prf+0x25c>
    36fa:	d6 01       	movw	r26, r12
    36fc:	fd 92       	st	X+, r15
    36fe:	6d 01       	movw	r12, r26
    3700:	62 17       	cp	r22, r18
    3702:	73 07       	cpc	r23, r19
    3704:	2c f0       	brlt	.+10     	; 0x3710 <dtoa_prf+0x26c>
    3706:	62 16       	cp	r6, r18
    3708:	73 06       	cpc	r7, r19
    370a:	14 f4       	brge	.+4      	; 0x3710 <dtoa_prf+0x26c>
    370c:	80 81       	ld	r24, Z
    370e:	01 c0       	rjmp	.+2      	; 0x3712 <dtoa_prf+0x26e>
    3710:	80 e3       	ldi	r24, 0x30	; 48
    3712:	21 50       	subi	r18, 0x01	; 1
    3714:	30 40       	sbci	r19, 0x00	; 0
    3716:	31 96       	adiw	r30, 0x01	; 1
    3718:	24 17       	cp	r18, r20
    371a:	35 07       	cpc	r19, r21
    371c:	24 f0       	brlt	.+8      	; 0x3726 <dtoa_prf+0x282>
    371e:	d6 01       	movw	r26, r12
    3720:	8d 93       	st	X+, r24
    3722:	6d 01       	movw	r12, r26
    3724:	e6 cf       	rjmp	.-52     	; 0x36f2 <dtoa_prf+0x24e>
    3726:	26 17       	cp	r18, r22
    3728:	37 07       	cpc	r19, r23
    372a:	49 f4       	brne	.+18     	; 0x373e <dtoa_prf+0x29a>
    372c:	b5 e3       	ldi	r27, 0x35	; 53
    372e:	bb 15       	cp	r27, r11
    3730:	28 f0       	brcs	.+10     	; 0x373c <dtoa_prf+0x298>
    3732:	bb 16       	cp	r11, r27
    3734:	21 f4       	brne	.+8      	; 0x373e <dtoa_prf+0x29a>
    3736:	81 14       	cp	r8, r1
    3738:	91 04       	cpc	r9, r1
    373a:	09 f4       	brne	.+2      	; 0x373e <dtoa_prf+0x29a>
    373c:	81 e3       	ldi	r24, 0x31	; 49
    373e:	f6 01       	movw	r30, r12
    3740:	81 93       	st	Z+, r24
    3742:	d6 01       	movw	r26, r12
    3744:	81 2f       	mov	r24, r17
    3746:	90 e2       	ldi	r25, 0x20	; 32
    3748:	02 c0       	rjmp	.+4      	; 0x374e <dtoa_prf+0x2aa>
    374a:	9c 93       	st	X, r25
    374c:	81 50       	subi	r24, 0x01	; 1
    374e:	11 96       	adiw	r26, 0x01	; 1
    3750:	88 23       	and	r24, r24
    3752:	d9 f7       	brne	.-10     	; 0x374a <dtoa_prf+0x2a6>
    3754:	e1 0f       	add	r30, r17
    3756:	f1 1d       	adc	r31, r1
    3758:	10 82       	st	Z, r1
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	c9 01       	movw	r24, r18
    3760:	29 96       	adiw	r28, 0x09	; 9
    3762:	ee e0       	ldi	r30, 0x0E	; 14
    3764:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__epilogue_restores__+0x8>

00003768 <__ftoa_engine>:
    3768:	28 30       	cpi	r18, 0x08	; 8
    376a:	08 f0       	brcs	.+2      	; 0x376e <__ftoa_engine+0x6>
    376c:	27 e0       	ldi	r18, 0x07	; 7
    376e:	33 27       	eor	r19, r19
    3770:	da 01       	movw	r26, r20
    3772:	99 0f       	add	r25, r25
    3774:	31 1d       	adc	r19, r1
    3776:	87 fd       	sbrc	r24, 7
    3778:	91 60       	ori	r25, 0x01	; 1
    377a:	00 96       	adiw	r24, 0x00	; 0
    377c:	61 05       	cpc	r22, r1
    377e:	71 05       	cpc	r23, r1
    3780:	39 f4       	brne	.+14     	; 0x3790 <__ftoa_engine+0x28>
    3782:	32 60       	ori	r19, 0x02	; 2
    3784:	2e 5f       	subi	r18, 0xFE	; 254
    3786:	3d 93       	st	X+, r19
    3788:	30 e3       	ldi	r19, 0x30	; 48
    378a:	2a 95       	dec	r18
    378c:	e1 f7       	brne	.-8      	; 0x3786 <__ftoa_engine+0x1e>
    378e:	08 95       	ret
    3790:	9f 3f       	cpi	r25, 0xFF	; 255
    3792:	30 f0       	brcs	.+12     	; 0x37a0 <__ftoa_engine+0x38>
    3794:	80 38       	cpi	r24, 0x80	; 128
    3796:	71 05       	cpc	r23, r1
    3798:	61 05       	cpc	r22, r1
    379a:	09 f0       	breq	.+2      	; 0x379e <__ftoa_engine+0x36>
    379c:	3c 5f       	subi	r19, 0xFC	; 252
    379e:	3c 5f       	subi	r19, 0xFC	; 252
    37a0:	3d 93       	st	X+, r19
    37a2:	91 30       	cpi	r25, 0x01	; 1
    37a4:	08 f0       	brcs	.+2      	; 0x37a8 <__ftoa_engine+0x40>
    37a6:	80 68       	ori	r24, 0x80	; 128
    37a8:	91 1d       	adc	r25, r1
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	1f 93       	push	r17
    37b0:	0f 93       	push	r16
    37b2:	ff 92       	push	r15
    37b4:	ef 92       	push	r14
    37b6:	19 2f       	mov	r17, r25
    37b8:	98 7f       	andi	r25, 0xF8	; 248
    37ba:	96 95       	lsr	r25
    37bc:	e9 2f       	mov	r30, r25
    37be:	96 95       	lsr	r25
    37c0:	96 95       	lsr	r25
    37c2:	e9 0f       	add	r30, r25
    37c4:	ff 27       	eor	r31, r31
    37c6:	ec 5d       	subi	r30, 0xDC	; 220
    37c8:	fe 4f       	sbci	r31, 0xFE	; 254
    37ca:	99 27       	eor	r25, r25
    37cc:	33 27       	eor	r19, r19
    37ce:	ee 24       	eor	r14, r14
    37d0:	ff 24       	eor	r15, r15
    37d2:	a7 01       	movw	r20, r14
    37d4:	e7 01       	movw	r28, r14
    37d6:	05 90       	lpm	r0, Z+
    37d8:	08 94       	sec
    37da:	07 94       	ror	r0
    37dc:	28 f4       	brcc	.+10     	; 0x37e8 <__ftoa_engine+0x80>
    37de:	36 0f       	add	r19, r22
    37e0:	e7 1e       	adc	r14, r23
    37e2:	f8 1e       	adc	r15, r24
    37e4:	49 1f       	adc	r20, r25
    37e6:	51 1d       	adc	r21, r1
    37e8:	66 0f       	add	r22, r22
    37ea:	77 1f       	adc	r23, r23
    37ec:	88 1f       	adc	r24, r24
    37ee:	99 1f       	adc	r25, r25
    37f0:	06 94       	lsr	r0
    37f2:	a1 f7       	brne	.-24     	; 0x37dc <__ftoa_engine+0x74>
    37f4:	05 90       	lpm	r0, Z+
    37f6:	07 94       	ror	r0
    37f8:	28 f4       	brcc	.+10     	; 0x3804 <__ftoa_engine+0x9c>
    37fa:	e7 0e       	add	r14, r23
    37fc:	f8 1e       	adc	r15, r24
    37fe:	49 1f       	adc	r20, r25
    3800:	56 1f       	adc	r21, r22
    3802:	c1 1d       	adc	r28, r1
    3804:	77 0f       	add	r23, r23
    3806:	88 1f       	adc	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	66 1f       	adc	r22, r22
    380c:	06 94       	lsr	r0
    380e:	a1 f7       	brne	.-24     	; 0x37f8 <__ftoa_engine+0x90>
    3810:	05 90       	lpm	r0, Z+
    3812:	07 94       	ror	r0
    3814:	28 f4       	brcc	.+10     	; 0x3820 <__ftoa_engine+0xb8>
    3816:	f8 0e       	add	r15, r24
    3818:	49 1f       	adc	r20, r25
    381a:	56 1f       	adc	r21, r22
    381c:	c7 1f       	adc	r28, r23
    381e:	d1 1d       	adc	r29, r1
    3820:	88 0f       	add	r24, r24
    3822:	99 1f       	adc	r25, r25
    3824:	66 1f       	adc	r22, r22
    3826:	77 1f       	adc	r23, r23
    3828:	06 94       	lsr	r0
    382a:	a1 f7       	brne	.-24     	; 0x3814 <__ftoa_engine+0xac>
    382c:	05 90       	lpm	r0, Z+
    382e:	07 94       	ror	r0
    3830:	20 f4       	brcc	.+8      	; 0x383a <__ftoa_engine+0xd2>
    3832:	49 0f       	add	r20, r25
    3834:	56 1f       	adc	r21, r22
    3836:	c7 1f       	adc	r28, r23
    3838:	d8 1f       	adc	r29, r24
    383a:	99 0f       	add	r25, r25
    383c:	66 1f       	adc	r22, r22
    383e:	77 1f       	adc	r23, r23
    3840:	88 1f       	adc	r24, r24
    3842:	06 94       	lsr	r0
    3844:	a9 f7       	brne	.-22     	; 0x3830 <__ftoa_engine+0xc8>
    3846:	84 91       	lpm	r24, Z+
    3848:	10 95       	com	r17
    384a:	17 70       	andi	r17, 0x07	; 7
    384c:	41 f0       	breq	.+16     	; 0x385e <__ftoa_engine+0xf6>
    384e:	d6 95       	lsr	r29
    3850:	c7 95       	ror	r28
    3852:	57 95       	ror	r21
    3854:	47 95       	ror	r20
    3856:	f7 94       	ror	r15
    3858:	e7 94       	ror	r14
    385a:	1a 95       	dec	r17
    385c:	c1 f7       	brne	.-16     	; 0x384e <__ftoa_engine+0xe6>
    385e:	ea ec       	ldi	r30, 0xCA	; 202
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	68 94       	set
    3864:	15 90       	lpm	r1, Z+
    3866:	15 91       	lpm	r17, Z+
    3868:	35 91       	lpm	r19, Z+
    386a:	65 91       	lpm	r22, Z+
    386c:	95 91       	lpm	r25, Z+
    386e:	05 90       	lpm	r0, Z+
    3870:	7f e2       	ldi	r23, 0x2F	; 47
    3872:	73 95       	inc	r23
    3874:	e1 18       	sub	r14, r1
    3876:	f1 0a       	sbc	r15, r17
    3878:	43 0b       	sbc	r20, r19
    387a:	56 0b       	sbc	r21, r22
    387c:	c9 0b       	sbc	r28, r25
    387e:	d0 09       	sbc	r29, r0
    3880:	c0 f7       	brcc	.-16     	; 0x3872 <__ftoa_engine+0x10a>
    3882:	e1 0c       	add	r14, r1
    3884:	f1 1e       	adc	r15, r17
    3886:	43 1f       	adc	r20, r19
    3888:	56 1f       	adc	r21, r22
    388a:	c9 1f       	adc	r28, r25
    388c:	d0 1d       	adc	r29, r0
    388e:	7e f4       	brtc	.+30     	; 0x38ae <__ftoa_engine+0x146>
    3890:	70 33       	cpi	r23, 0x30	; 48
    3892:	11 f4       	brne	.+4      	; 0x3898 <__ftoa_engine+0x130>
    3894:	8a 95       	dec	r24
    3896:	e6 cf       	rjmp	.-52     	; 0x3864 <__ftoa_engine+0xfc>
    3898:	e8 94       	clt
    389a:	01 50       	subi	r16, 0x01	; 1
    389c:	30 f0       	brcs	.+12     	; 0x38aa <__ftoa_engine+0x142>
    389e:	08 0f       	add	r16, r24
    38a0:	0a f4       	brpl	.+2      	; 0x38a4 <__ftoa_engine+0x13c>
    38a2:	00 27       	eor	r16, r16
    38a4:	02 17       	cp	r16, r18
    38a6:	08 f4       	brcc	.+2      	; 0x38aa <__ftoa_engine+0x142>
    38a8:	20 2f       	mov	r18, r16
    38aa:	23 95       	inc	r18
    38ac:	02 2f       	mov	r16, r18
    38ae:	7a 33       	cpi	r23, 0x3A	; 58
    38b0:	28 f0       	brcs	.+10     	; 0x38bc <__ftoa_engine+0x154>
    38b2:	79 e3       	ldi	r23, 0x39	; 57
    38b4:	7d 93       	st	X+, r23
    38b6:	2a 95       	dec	r18
    38b8:	e9 f7       	brne	.-6      	; 0x38b4 <__ftoa_engine+0x14c>
    38ba:	10 c0       	rjmp	.+32     	; 0x38dc <__ftoa_engine+0x174>
    38bc:	7d 93       	st	X+, r23
    38be:	2a 95       	dec	r18
    38c0:	89 f6       	brne	.-94     	; 0x3864 <__ftoa_engine+0xfc>
    38c2:	06 94       	lsr	r0
    38c4:	97 95       	ror	r25
    38c6:	67 95       	ror	r22
    38c8:	37 95       	ror	r19
    38ca:	17 95       	ror	r17
    38cc:	17 94       	ror	r1
    38ce:	e1 18       	sub	r14, r1
    38d0:	f1 0a       	sbc	r15, r17
    38d2:	43 0b       	sbc	r20, r19
    38d4:	56 0b       	sbc	r21, r22
    38d6:	c9 0b       	sbc	r28, r25
    38d8:	d0 09       	sbc	r29, r0
    38da:	98 f0       	brcs	.+38     	; 0x3902 <__ftoa_engine+0x19a>
    38dc:	23 95       	inc	r18
    38de:	7e 91       	ld	r23, -X
    38e0:	73 95       	inc	r23
    38e2:	7a 33       	cpi	r23, 0x3A	; 58
    38e4:	08 f0       	brcs	.+2      	; 0x38e8 <__ftoa_engine+0x180>
    38e6:	70 e3       	ldi	r23, 0x30	; 48
    38e8:	7c 93       	st	X, r23
    38ea:	20 13       	cpse	r18, r16
    38ec:	b8 f7       	brcc	.-18     	; 0x38dc <__ftoa_engine+0x174>
    38ee:	7e 91       	ld	r23, -X
    38f0:	70 61       	ori	r23, 0x10	; 16
    38f2:	7d 93       	st	X+, r23
    38f4:	30 f0       	brcs	.+12     	; 0x3902 <__ftoa_engine+0x19a>
    38f6:	83 95       	inc	r24
    38f8:	71 e3       	ldi	r23, 0x31	; 49
    38fa:	7d 93       	st	X+, r23
    38fc:	70 e3       	ldi	r23, 0x30	; 48
    38fe:	2a 95       	dec	r18
    3900:	e1 f7       	brne	.-8      	; 0x38fa <__ftoa_engine+0x192>
    3902:	11 24       	eor	r1, r1
    3904:	ef 90       	pop	r14
    3906:	ff 90       	pop	r15
    3908:	0f 91       	pop	r16
    390a:	1f 91       	pop	r17
    390c:	cf 91       	pop	r28
    390e:	df 91       	pop	r29
    3910:	99 27       	eor	r25, r25
    3912:	87 fd       	sbrc	r24, 7
    3914:	90 95       	com	r25
    3916:	08 95       	ret

00003918 <__mulsi3>:
    3918:	62 9f       	mul	r22, r18
    391a:	d0 01       	movw	r26, r0
    391c:	73 9f       	mul	r23, r19
    391e:	f0 01       	movw	r30, r0
    3920:	82 9f       	mul	r24, r18
    3922:	e0 0d       	add	r30, r0
    3924:	f1 1d       	adc	r31, r1
    3926:	64 9f       	mul	r22, r20
    3928:	e0 0d       	add	r30, r0
    392a:	f1 1d       	adc	r31, r1
    392c:	92 9f       	mul	r25, r18
    392e:	f0 0d       	add	r31, r0
    3930:	83 9f       	mul	r24, r19
    3932:	f0 0d       	add	r31, r0
    3934:	74 9f       	mul	r23, r20
    3936:	f0 0d       	add	r31, r0
    3938:	65 9f       	mul	r22, r21
    393a:	f0 0d       	add	r31, r0
    393c:	99 27       	eor	r25, r25
    393e:	72 9f       	mul	r23, r18
    3940:	b0 0d       	add	r27, r0
    3942:	e1 1d       	adc	r30, r1
    3944:	f9 1f       	adc	r31, r25
    3946:	63 9f       	mul	r22, r19
    3948:	b0 0d       	add	r27, r0
    394a:	e1 1d       	adc	r30, r1
    394c:	f9 1f       	adc	r31, r25
    394e:	bd 01       	movw	r22, r26
    3950:	cf 01       	movw	r24, r30
    3952:	11 24       	eor	r1, r1
    3954:	08 95       	ret

00003956 <__divmodsi4>:
    3956:	97 fb       	bst	r25, 7
    3958:	09 2e       	mov	r0, r25
    395a:	05 26       	eor	r0, r21
    395c:	0e d0       	rcall	.+28     	; 0x397a <__divmodsi4_neg1>
    395e:	57 fd       	sbrc	r21, 7
    3960:	04 d0       	rcall	.+8      	; 0x396a <__divmodsi4_neg2>
    3962:	14 d0       	rcall	.+40     	; 0x398c <__udivmodsi4>
    3964:	0a d0       	rcall	.+20     	; 0x397a <__divmodsi4_neg1>
    3966:	00 1c       	adc	r0, r0
    3968:	38 f4       	brcc	.+14     	; 0x3978 <__divmodsi4_exit>

0000396a <__divmodsi4_neg2>:
    396a:	50 95       	com	r21
    396c:	40 95       	com	r20
    396e:	30 95       	com	r19
    3970:	21 95       	neg	r18
    3972:	3f 4f       	sbci	r19, 0xFF	; 255
    3974:	4f 4f       	sbci	r20, 0xFF	; 255
    3976:	5f 4f       	sbci	r21, 0xFF	; 255

00003978 <__divmodsi4_exit>:
    3978:	08 95       	ret

0000397a <__divmodsi4_neg1>:
    397a:	f6 f7       	brtc	.-4      	; 0x3978 <__divmodsi4_exit>
    397c:	90 95       	com	r25
    397e:	80 95       	com	r24
    3980:	70 95       	com	r23
    3982:	61 95       	neg	r22
    3984:	7f 4f       	sbci	r23, 0xFF	; 255
    3986:	8f 4f       	sbci	r24, 0xFF	; 255
    3988:	9f 4f       	sbci	r25, 0xFF	; 255
    398a:	08 95       	ret

0000398c <__udivmodsi4>:
    398c:	a1 e2       	ldi	r26, 0x21	; 33
    398e:	1a 2e       	mov	r1, r26
    3990:	aa 1b       	sub	r26, r26
    3992:	bb 1b       	sub	r27, r27
    3994:	fd 01       	movw	r30, r26
    3996:	0d c0       	rjmp	.+26     	; 0x39b2 <__udivmodsi4_ep>

00003998 <__udivmodsi4_loop>:
    3998:	aa 1f       	adc	r26, r26
    399a:	bb 1f       	adc	r27, r27
    399c:	ee 1f       	adc	r30, r30
    399e:	ff 1f       	adc	r31, r31
    39a0:	a2 17       	cp	r26, r18
    39a2:	b3 07       	cpc	r27, r19
    39a4:	e4 07       	cpc	r30, r20
    39a6:	f5 07       	cpc	r31, r21
    39a8:	20 f0       	brcs	.+8      	; 0x39b2 <__udivmodsi4_ep>
    39aa:	a2 1b       	sub	r26, r18
    39ac:	b3 0b       	sbc	r27, r19
    39ae:	e4 0b       	sbc	r30, r20
    39b0:	f5 0b       	sbc	r31, r21

000039b2 <__udivmodsi4_ep>:
    39b2:	66 1f       	adc	r22, r22
    39b4:	77 1f       	adc	r23, r23
    39b6:	88 1f       	adc	r24, r24
    39b8:	99 1f       	adc	r25, r25
    39ba:	1a 94       	dec	r1
    39bc:	69 f7       	brne	.-38     	; 0x3998 <__udivmodsi4_loop>
    39be:	60 95       	com	r22
    39c0:	70 95       	com	r23
    39c2:	80 95       	com	r24
    39c4:	90 95       	com	r25
    39c6:	9b 01       	movw	r18, r22
    39c8:	ac 01       	movw	r20, r24
    39ca:	bd 01       	movw	r22, r26
    39cc:	cf 01       	movw	r24, r30
    39ce:	08 95       	ret

000039d0 <__prologue_saves__>:
    39d0:	2f 92       	push	r2
    39d2:	3f 92       	push	r3
    39d4:	4f 92       	push	r4
    39d6:	5f 92       	push	r5
    39d8:	6f 92       	push	r6
    39da:	7f 92       	push	r7
    39dc:	8f 92       	push	r8
    39de:	9f 92       	push	r9
    39e0:	af 92       	push	r10
    39e2:	bf 92       	push	r11
    39e4:	cf 92       	push	r12
    39e6:	df 92       	push	r13
    39e8:	ef 92       	push	r14
    39ea:	ff 92       	push	r15
    39ec:	0f 93       	push	r16
    39ee:	1f 93       	push	r17
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
    39f8:	ca 1b       	sub	r28, r26
    39fa:	db 0b       	sbc	r29, r27
    39fc:	0f b6       	in	r0, 0x3f	; 63
    39fe:	f8 94       	cli
    3a00:	de bf       	out	0x3e, r29	; 62
    3a02:	0f be       	out	0x3f, r0	; 63
    3a04:	cd bf       	out	0x3d, r28	; 61
    3a06:	09 94       	ijmp

00003a08 <__epilogue_restores__>:
    3a08:	2a 88       	ldd	r2, Y+18	; 0x12
    3a0a:	39 88       	ldd	r3, Y+17	; 0x11
    3a0c:	48 88       	ldd	r4, Y+16	; 0x10
    3a0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a10:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a12:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a14:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a16:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a18:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a1a:	b9 84       	ldd	r11, Y+9	; 0x09
    3a1c:	c8 84       	ldd	r12, Y+8	; 0x08
    3a1e:	df 80       	ldd	r13, Y+7	; 0x07
    3a20:	ee 80       	ldd	r14, Y+6	; 0x06
    3a22:	fd 80       	ldd	r15, Y+5	; 0x05
    3a24:	0c 81       	ldd	r16, Y+4	; 0x04
    3a26:	1b 81       	ldd	r17, Y+3	; 0x03
    3a28:	aa 81       	ldd	r26, Y+2	; 0x02
    3a2a:	b9 81       	ldd	r27, Y+1	; 0x01
    3a2c:	ce 0f       	add	r28, r30
    3a2e:	d1 1d       	adc	r29, r1
    3a30:	0f b6       	in	r0, 0x3f	; 63
    3a32:	f8 94       	cli
    3a34:	de bf       	out	0x3e, r29	; 62
    3a36:	0f be       	out	0x3f, r0	; 63
    3a38:	cd bf       	out	0x3d, r28	; 61
    3a3a:	ed 01       	movw	r28, r26
    3a3c:	08 95       	ret

00003a3e <_exit>:
    3a3e:	f8 94       	cli

00003a40 <__stop_program>:
    3a40:	ff cf       	rjmp	.-2      	; 0x3a40 <__stop_program>
