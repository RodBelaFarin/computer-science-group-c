
Butterfly2014.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  0000204c  000020e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000204c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000113  0080016c  0080016c  0000214c  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  0000214c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003fc  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f92  00000000  00000000  000025e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000050b  00000000  00000000  0000357a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012c0  00000000  00000000  00003a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00004d48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000891  00000000  00000000  00004fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
       4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      34:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__vector_13>
      38:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__vector_14>
      3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      58:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__vector_22>

0000005c <LCD_character_table>:
      5c:	51 0a 80 2a 00 00 00 0a 00 40 00 00 59 55 18 01     Q..*.....@..YU..
      6c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
	...
      88:	00 00 51 0f 91 39 41 14 91 31 41 1e 41 0e 41 1d     ..Q..9A..1A.A.A.
      98:	50 0f 80 20 10 15 48 86 40 14 78 05 70 85 51 15     P.. ..H.@.x.p.Q.
      a8:	51 0e 51 95 51 8e 21 90 81 20 50 15 48 44 50 c5     Q.Q.Q.!.. P.HDP.
      b8:	28 c0 28 20 09 50 00 00 00 00 00 00 00 00 00 00     (.( .P..........

000000c8 <__c.1382>:
	...

000000c9 <__c.1410>:
	...

000000ca <__ctors_end>:
      ca:	11 24       	eor	r1, r1
      cc:	1f be       	out	0x3f, r1	; 63
      ce:	cf ef       	ldi	r28, 0xFF	; 255
      d0:	d4 e0       	ldi	r29, 0x04	; 4
      d2:	de bf       	out	0x3e, r29	; 62
      d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
      d6:	11 e0       	ldi	r17, 0x01	; 1
      d8:	a0 e0       	ldi	r26, 0x00	; 0
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	ec e4       	ldi	r30, 0x4C	; 76
      de:	f0 e2       	ldi	r31, 0x20	; 32
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <.do_copy_data_start>

000000e2 <.do_copy_data_loop>:
      e2:	05 90       	lpm	r0, Z+
      e4:	0d 92       	st	X+, r0

000000e6 <.do_copy_data_start>:
      e6:	ac 36       	cpi	r26, 0x6C	; 108
      e8:	b1 07       	cpc	r27, r17
      ea:	d9 f7       	brne	.-10     	; 0xe2 <.do_copy_data_loop>

000000ec <__do_clear_bss>:
      ec:	12 e0       	ldi	r17, 0x02	; 2
      ee:	ac e6       	ldi	r26, 0x6C	; 108
      f0:	b1 e0       	ldi	r27, 0x01	; 1
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
      f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
      f6:	af 37       	cpi	r26, 0x7F	; 127
      f8:	b1 07       	cpc	r27, r17
      fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
      fc:	0e 94 94 09 	call	0x1328	; 0x1328 <main>
     100:	0c 94 24 10 	jmp	0x2048	; 0x2048 <_exit>

00000104 <__bad_interrupt>:
     104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <set_seed>:
#include "AVRBFLY.h"

/// Set seed for random number generation
/// source: http://www.roboternetz.de/wissen/index.php/Zufallszahlen_mit_avr-gcc
void set_seed(void)
{
     108:	df 93       	push	r29
     10a:	cf 93       	push	r28
     10c:	00 d0       	rcall	.+0      	; 0x10e <set_seed+0x6>
     10e:	00 d0       	rcall	.+0      	; 0x110 <set_seed+0x8>
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
#ifndef SIMULATION
	unsigned short seed = 0, *p = (unsigned short*) (RAMEND+1);
     114:	1c 82       	std	Y+4, r1	; 0x04
     116:	1b 82       	std	Y+3, r1	; 0x03
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	95 e0       	ldi	r25, 0x05	; 5
     11c:	9a 83       	std	Y+2, r25	; 0x02
     11e:	89 83       	std	Y+1, r24	; 0x01
     120:	0f c0       	rjmp	.+30     	; 0x140 <set_seed+0x38>
	extern unsigned short __heap_start;
	while (p >= &__heap_start + 1)
		seed ^= * (--p);
     122:	89 81       	ldd	r24, Y+1	; 0x01
     124:	9a 81       	ldd	r25, Y+2	; 0x02
     126:	02 97       	sbiw	r24, 0x02	; 2
     128:	9a 83       	std	Y+2, r25	; 0x02
     12a:	89 83       	std	Y+1, r24	; 0x01
     12c:	e9 81       	ldd	r30, Y+1	; 0x01
     12e:	fa 81       	ldd	r31, Y+2	; 0x02
     130:	20 81       	ld	r18, Z
     132:	31 81       	ldd	r19, Z+1	; 0x01
     134:	8b 81       	ldd	r24, Y+3	; 0x03
     136:	9c 81       	ldd	r25, Y+4	; 0x04
     138:	82 27       	eor	r24, r18
     13a:	93 27       	eor	r25, r19
     13c:	9c 83       	std	Y+4, r25	; 0x04
     13e:	8b 83       	std	Y+3, r24	; 0x03
void set_seed(void)
{
#ifndef SIMULATION
	unsigned short seed = 0, *p = (unsigned short*) (RAMEND+1);
	extern unsigned short __heap_start;
	while (p >= &__heap_start + 1)
     140:	21 e8       	ldi	r18, 0x81	; 129
     142:	32 e0       	ldi	r19, 0x02	; 2
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	9a 81       	ldd	r25, Y+2	; 0x02
     148:	82 17       	cp	r24, r18
     14a:	93 07       	cpc	r25, r19
     14c:	50 f7       	brcc	.-44     	; 0x122 <set_seed+0x1a>
		seed ^= * (--p);
	srandom((unsigned long) seed);
     14e:	8b 81       	ldd	r24, Y+3	; 0x03
     150:	9c 81       	ldd	r25, Y+4	; 0x04
     152:	cc 01       	movw	r24, r24
     154:	a0 e0       	ldi	r26, 0x00	; 0
     156:	b0 e0       	ldi	r27, 0x00	; 0
     158:	bc 01       	movw	r22, r24
     15a:	cd 01       	movw	r24, r26
     15c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <srandom>
#else
	srandom((unsigned long) 1);
#endif
}
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	cf 91       	pop	r28
     16a:	df 91       	pop	r29
     16c:	08 95       	ret

0000016e <InitBoard>:


/// Initialize the ports of the controller
void InitBoard(void)
{
     16e:	df 93       	push	r29
     170:	cf 93       	push	r28
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62

/// Inputs: PB4(center), PB6(up), PB7(down), PE2(left) and PE3(right)
	DDRB	= DDRB	& 0b00101111;
     176:	a4 e2       	ldi	r26, 0x24	; 36
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	e4 e2       	ldi	r30, 0x24	; 36
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	80 81       	ld	r24, Z
     180:	8f 72       	andi	r24, 0x2F	; 47
     182:	8c 93       	st	X, r24
	DDRE	= DDRE	& 0b11110011;
     184:	ad e2       	ldi	r26, 0x2D	; 45
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	ed e2       	ldi	r30, 0x2D	; 45
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	83 7f       	andi	r24, 0xF3	; 243
     190:	8c 93       	st	X, r24
/// switch on pull up resistors
	PORTB	= PORTB	| 0b11010000;
     192:	a5 e2       	ldi	r26, 0x25	; 37
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	e5 e2       	ldi	r30, 0x25	; 37
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	80 6d       	ori	r24, 0xD0	; 208
     19e:	8c 93       	st	X, r24
	PORTE	= PORTE	| 0b00001100;
     1a0:	ae e2       	ldi	r26, 0x2E	; 46
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	ee e2       	ldi	r30, 0x2E	; 46
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	8c 60       	ori	r24, 0x0C	; 12
     1ac:	8c 93       	st	X, r24
/// no button pressed
	PINB	= PINB	| 0b11010000;
     1ae:	a3 e2       	ldi	r26, 0x23	; 35
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	e3 e2       	ldi	r30, 0x23	; 35
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 6d       	ori	r24, 0xD0	; 208
     1ba:	8c 93       	st	X, r24
	PINE	= PINE	| 0b00001100;
     1bc:	ac e2       	ldi	r26, 0x2C	; 44
     1be:	b0 e0       	ldi	r27, 0x00	; 0
     1c0:	ec e2       	ldi	r30, 0x2C	; 44
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	8c 60       	ori	r24, 0x0C	; 12
     1c8:	8c 93       	st	X, r24
/// Output: LEDs at port C
	DDRC  = 0b11111111;
     1ca:	e7 e2       	ldi	r30, 0x27	; 39
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	8f ef       	ldi	r24, 0xFF	; 255
     1d0:	80 83       	st	Z, r24
/// switch off all LEDs
	PORTC = 0b11111111;
     1d2:	e8 e2       	ldi	r30, 0x28	; 40
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	80 83       	st	Z, r24
/// initialize the random number generator
    set_seed();
     1da:	0e 94 84 00 	call	0x108	; 0x108 <set_seed>
/// Output for buzzer on PORT B
	DDRB	= DDRB	| 0b00100000;
     1de:	a4 e2       	ldi	r26, 0x24	; 36
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	e4 e2       	ldi	r30, 0x24	; 36
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	80 81       	ld	r24, Z
     1e8:	80 62       	ori	r24, 0x20	; 32
     1ea:	8c 93       	st	X, r24
//	PORTB	= PORTB	| 0b00100000;
}
     1ec:	cf 91       	pop	r28
     1ee:	df 91       	pop	r29
     1f0:	08 95       	ret

000001f2 <delay_ds>:

/// Wait ds tenths of a second
void delay_ds(unsigned char ds)
{
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	27 97       	sbiw	r28, 0x07	; 7
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	de bf       	out	0x3e, r29	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	cd bf       	out	0x3d, r28	; 61
     206:	8f 83       	std	Y+7, r24	; 0x07
#ifndef SIMULATION
	uint16_t i, lim= 10*ds;
     208:	8f 81       	ldd	r24, Y+7	; 0x07
     20a:	88 2f       	mov	r24, r24
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	9c 01       	movw	r18, r24
     210:	22 0f       	add	r18, r18
     212:	33 1f       	adc	r19, r19
     214:	c9 01       	movw	r24, r18
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	82 0f       	add	r24, r18
     220:	93 1f       	adc	r25, r19
     222:	9c 83       	std	Y+4, r25	; 0x04
     224:	8b 83       	std	Y+3, r24	; 0x03
	for(i=0; i<lim; i++)
     226:	1e 82       	std	Y+6, r1	; 0x06
     228:	1d 82       	std	Y+5, r1	; 0x05
     22a:	0f c0       	rjmp	.+30     	; 0x24a <delay_ds+0x58>
	{
		uint16_t __ticks = F_CPU / 400;
     22c:	88 e8       	ldi	r24, 0x88	; 136
     22e:	93 e1       	ldi	r25, 0x13	; 19
     230:	9a 83       	std	Y+2, r25	; 0x02
     232:	89 83       	std	Y+1, r24	; 0x01
		__asm__ volatile (
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	9a 81       	ldd	r25, Y+2	; 0x02
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <delay_ds+0x46>
     23c:	9a 83       	std	Y+2, r25	; 0x02
     23e:	89 83       	std	Y+1, r24	; 0x01
/// Wait ds tenths of a second
void delay_ds(unsigned char ds)
{
#ifndef SIMULATION
	uint16_t i, lim= 10*ds;
	for(i=0; i<lim; i++)
     240:	8d 81       	ldd	r24, Y+5	; 0x05
     242:	9e 81       	ldd	r25, Y+6	; 0x06
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	9e 83       	std	Y+6, r25	; 0x06
     248:	8d 83       	std	Y+5, r24	; 0x05
     24a:	2d 81       	ldd	r18, Y+5	; 0x05
     24c:	3e 81       	ldd	r19, Y+6	; 0x06
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	9c 81       	ldd	r25, Y+4	; 0x04
     252:	28 17       	cp	r18, r24
     254:	39 07       	cpc	r19, r25
     256:	50 f3       	brcs	.-44     	; 0x22c <delay_ds+0x3a>
			: "=w" (__ticks)
			: "0" (__ticks)
		);
	}
#endif
}
     258:	27 96       	adiw	r28, 0x07	; 7
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	cf 91       	pop	r28
     266:	df 91       	pop	r29
     268:	08 95       	ret

0000026a <autoADCps>:

void autoADCps(void)
{
     26a:	df 93       	push	r29
     26c:	cf 93       	push	r28
     26e:	0f 92       	push	r0
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
  uint8_t ps012;
  /// Assures the ADC clock to be between 100 and 200 kHz
    if      (F_CPU <=   400000UL) ps012 = 0b00000001; //001 = PS   2
    else if (F_CPU <=   800000UL) ps012 = 0b00000010; //010 = PS   4
    else if (F_CPU <=  1600000UL) ps012 = 0b00000011; //011 = PS   8
    else if (F_CPU <=  3200000UL) ps012 = 0b00000100; //100 = PS  16
     274:	84 e0       	ldi	r24, 0x04	; 4
     276:	89 83       	std	Y+1, r24	; 0x01
    else if (F_CPU <=  6400000UL) ps012 = 0b00000101; //101 = PS  32
    else if (F_CPU <= 12800000UL) ps012 = 0b00000110; //110 = PS  64
    else if (F_CPU >  12800000UL) ps012 = 0b00000111; //111 = PS 128

  	ADCSRA = ADCSRA & 0b11111000; // set bits PS0, PS1, PS2 to 0
     278:	aa e7       	ldi	r26, 0x7A	; 122
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	ea e7       	ldi	r30, 0x7A	; 122
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	88 7f       	andi	r24, 0xF8	; 248
     284:	8c 93       	st	X, r24
    ADCSRA = ADCSRA | ps012;      // set prescaler bits
     286:	aa e7       	ldi	r26, 0x7A	; 122
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	ea e7       	ldi	r30, 0x7A	; 122
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	90 81       	ld	r25, Z
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	89 2b       	or	r24, r25
     294:	8c 93       	st	X, r24
}
     296:	0f 90       	pop	r0
     298:	cf 91       	pop	r28
     29a:	df 91       	pop	r29
     29c:	08 95       	ret

0000029e <InitBuzzer>:

void InitBuzzer(int f, int d)
{
     29e:	df 93       	push	r29
     2a0:	cf 93       	push	r28
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <InitBuzzer+0x6>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <InitBuzzer+0x8>
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <InitBuzzer+0xa>
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	9c 83       	std	Y+4, r25	; 0x04
     2ae:	8b 83       	std	Y+3, r24	; 0x03
     2b0:	7e 83       	std	Y+6, r23	; 0x06
     2b2:	6d 83       	std	Y+5, r22	; 0x05
//	char Volume=50;
	int icr1;
	icr1 = 1000000/(2*f);
     2b4:	8b 81       	ldd	r24, Y+3	; 0x03
     2b6:	9c 81       	ldd	r25, Y+4	; 0x04
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	9c 01       	movw	r18, r24
     2be:	44 27       	eor	r20, r20
     2c0:	37 fd       	sbrc	r19, 7
     2c2:	40 95       	com	r20
     2c4:	54 2f       	mov	r21, r20
     2c6:	80 e4       	ldi	r24, 0x40	; 64
     2c8:	92 e4       	ldi	r25, 0x42	; 66
     2ca:	af e0       	ldi	r26, 0x0F	; 15
     2cc:	b0 e0       	ldi	r27, 0x00	; 0
     2ce:	bc 01       	movw	r22, r24
     2d0:	cd 01       	movw	r24, r26
     2d2:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__divmodsi4>
     2d6:	da 01       	movw	r26, r20
     2d8:	c9 01       	movw	r24, r18
     2da:	9a 83       	std	Y+2, r25	; 0x02
     2dc:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = icr1;				// Top value of the Timer 1
     2de:	e6 e8       	ldi	r30, 0x86	; 134
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	91 83       	std	Z+1, r25	; 0x01
     2e8:	80 83       	st	Z, r24
	TCCR1A = (1<<COM1A1);		// Set OC1A when upcounting, clear when downcounting
     2ea:	e0 e8       	ldi	r30, 0x80	; 128
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 e8       	ldi	r24, 0x80	; 128
     2f0:	80 83       	st	Z, r24
    TCCR1B = (1<<WGM13);        // Phase/Freq-correct PWM, top value = ICR1
     2f2:	e1 e8       	ldi	r30, 0x81	; 129
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 e1       	ldi	r24, 0x10	; 16
     2f8:	80 83       	st	Z, r24
	SET_BIT(TCCR1B, CS10)		// Start Timer1, prescaler(1)    
     2fa:	a1 e8       	ldi	r26, 0x81	; 129
     2fc:	b0 e0       	ldi	r27, 0x00	; 0
     2fe:	e1 e8       	ldi	r30, 0x81	; 129
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	81 60       	ori	r24, 0x01	; 1
     306:	8c 93       	st	X, r24
	WAIT_SEC(d)
     308:	8d 81       	ldd	r24, Y+5	; 0x05
     30a:	9e 81       	ldd	r25, Y+6	; 0x06
     30c:	9c 01       	movw	r18, r24
     30e:	22 0f       	add	r18, r18
     310:	33 1f       	adc	r19, r19
     312:	c9 01       	movw	r24, r18
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
     320:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <delay_ds>
	CLEAR_BIT(TCCR1B, CS10)		// Stops Timer 1
     324:	a1 e8       	ldi	r26, 0x81	; 129
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	e1 e8       	ldi	r30, 0x81	; 129
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8e 7f       	andi	r24, 0xFE	; 254
     330:	8c 93       	st	X, r24
}
     332:	26 96       	adiw	r28, 0x06	; 6
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	cf 91       	pop	r28
     340:	df 91       	pop	r29
     342:	08 95       	ret

00000344 <DF_SPI_init>:
*	Purpose :		Sets up the HW SPI in Master mode, Mode 3
*					Note -> Uses the SS line to control the DF CS-line.
*
******************************************************************************/
void DF_SPI_init (void)
{
     344:	df 93       	push	r29
     346:	cf 93       	push	r28
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
	
	PORTB |= (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
     34c:	a5 e2       	ldi	r26, 0x25	; 37
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	e5 e2       	ldi	r30, 0x25	; 37
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	8f 60       	ori	r24, 0x0F	; 15
     358:	8c 93       	st	X, r24
	DDRB |= (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);		//Set MOSI, SCK AND SS as outputs
     35a:	a4 e2       	ldi	r26, 0x24	; 36
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	e4 e2       	ldi	r30, 0x24	; 36
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	87 60       	ori	r24, 0x07	; 7
     366:	8c 93       	st	X, r24
	SPSR = (1<<SPI2X);                                      //SPI double speed settings
     368:	ed e4       	ldi	r30, 0x4D	; 77
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 83       	st	Z, r24
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPHA) | (1<<CPOL);	//Enable SPI in Master mode, mode 3, Fosc/2
     370:	ec e4       	ldi	r30, 0x4C	; 76
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	8c e5       	ldi	r24, 0x5C	; 92
     376:	80 83       	st	Z, r24

}
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	08 95       	ret

0000037e <DF_SPI_RW>:
*
*	Purpose :		Read and writes one byte from/to SPI master
*
******************************************************************************/
unsigned char DF_SPI_RW (unsigned char output)
{
     37e:	df 93       	push	r29
     380:	cf 93       	push	r28
     382:	00 d0       	rcall	.+0      	; 0x384 <DF_SPI_RW+0x6>
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char input;
	
	SPDR = output;							//put byte 'output' in SPI data register
     38a:	ee e4       	ldi	r30, 0x4E	; 78
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	8a 81       	ldd	r24, Y+2	; 0x02
     390:	80 83       	st	Z, r24
	while(!(SPSR & 0x80));					//wait for transfer complete, poll SPIF-flag
     392:	ed e4       	ldi	r30, 0x4D	; 77
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	88 23       	and	r24, r24
     39a:	dc f7       	brge	.-10     	; 0x392 <DF_SPI_RW+0x14>
	input = SPDR;							//read value in SPI data reg.
     39c:	ee e4       	ldi	r30, 0x4E	; 78
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	89 83       	std	Y+1, r24	; 0x01
	
	return input;							//return the byte clocked in from SPI slave
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
}		
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	cf 91       	pop	r28
     3ac:	df 91       	pop	r29
     3ae:	08 95       	ret

000003b0 <Read_DF_status>:
*					Status info concerning compare between buffer and flash page
*					Status info concerning size of actual device
*
******************************************************************************/
unsigned char Read_DF_status (void)
{
     3b0:	df 93       	push	r29
     3b2:	cf 93       	push	r28
     3b4:	00 d0       	rcall	.+0      	; 0x3b6 <Read_DF_status+0x6>
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
	unsigned char result,index_copy;
	
	DF_CS_inactive;							//make sure to toggle CS signal in order
     3ba:	a5 e2       	ldi	r26, 0x25	; 37
     3bc:	b0 e0       	ldi	r27, 0x00	; 0
     3be:	e5 e2       	ldi	r30, 0x25	; 37
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	80 81       	ld	r24, Z
     3c4:	81 60       	ori	r24, 0x01	; 1
     3c6:	8c 93       	st	X, r24
	DF_CS_active;							//to reset dataflash command decoder
     3c8:	a5 e2       	ldi	r26, 0x25	; 37
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	e5 e2       	ldi	r30, 0x25	; 37
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	8e 7f       	andi	r24, 0xFE	; 254
     3d4:	8c 93       	st	X, r24
	result = DF_SPI_RW(StatusReg);			//send status register read op-code
     3d6:	87 e5       	ldi	r24, 0x57	; 87
     3d8:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
     3dc:	8a 83       	std	Y+2, r24	; 0x02
	result = DF_SPI_RW(0x00);				//dummy write to get result
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
     3e4:	8a 83       	std	Y+2, r24	; 0x02
	
	index_copy = ((result & 0x38) >> 3);	//get the size info from status register
     3e6:	8a 81       	ldd	r24, Y+2	; 0x02
     3e8:	88 2f       	mov	r24, r24
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	88 73       	andi	r24, 0x38	; 56
     3ee:	90 70       	andi	r25, 0x00	; 0
     3f0:	95 95       	asr	r25
     3f2:	87 95       	ror	r24
     3f4:	95 95       	asr	r25
     3f6:	87 95       	ror	r24
     3f8:	95 95       	asr	r25
     3fa:	87 95       	ror	r24
     3fc:	89 83       	std	Y+1, r24	; 0x01
	PageBits   = DF_pagebits[index_copy];	//get number of internal page address bits from look-up table
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	88 2f       	mov	r24, r24
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	fc 01       	movw	r30, r24
     406:	e0 50       	subi	r30, 0x00	; 0
     408:	ff 4f       	sbci	r31, 0xFF	; 255
     40a:	80 81       	ld	r24, Z
     40c:	80 93 16 02 	sts	0x0216, r24
	PageSize   = DF_pagesize[index_copy];   //get the size of the page (in bytes)
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	88 2f       	mov	r24, r24
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	fc 01       	movw	r30, r24
     41c:	e8 5f       	subi	r30, 0xF8	; 248
     41e:	fe 4f       	sbci	r31, 0xFE	; 254
     420:	80 81       	ld	r24, Z
     422:	91 81       	ldd	r25, Z+1	; 0x01
     424:	90 93 18 02 	sts	0x0218, r25
     428:	80 93 17 02 	sts	0x0217, r24
	return result;							//return the read status register value
     42c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	cf 91       	pop	r28
     434:	df 91       	pop	r29
     436:	08 95       	ret

00000438 <Page_To_Buffer>:
*
*	Purpose :		Transfers a page from flash to dataflash SRAM buffer
*					
******************************************************************************/
void Page_To_Buffer (unsigned int PageAdr, unsigned char BufferNo)
{
     438:	df 93       	push	r29
     43a:	cf 93       	push	r28
     43c:	00 d0       	rcall	.+0      	; 0x43e <Page_To_Buffer+0x6>
     43e:	0f 92       	push	r0
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	9a 83       	std	Y+2, r25	; 0x02
     446:	89 83       	std	Y+1, r24	; 0x01
     448:	6b 83       	std	Y+3, r22	; 0x03
	DF_CS_inactive;												//make sure to toggle CS signal in order
     44a:	a5 e2       	ldi	r26, 0x25	; 37
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	e5 e2       	ldi	r30, 0x25	; 37
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	80 81       	ld	r24, Z
     454:	81 60       	ori	r24, 0x01	; 1
     456:	8c 93       	st	X, r24
	DF_CS_active;												//to reset dataflash command decoder
     458:	a5 e2       	ldi	r26, 0x25	; 37
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	e5 e2       	ldi	r30, 0x25	; 37
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	8e 7f       	andi	r24, 0xFE	; 254
     464:	8c 93       	st	X, r24
	
	if (1 == BufferNo)											//transfer flash page to buffer 1
     466:	8b 81       	ldd	r24, Y+3	; 0x03
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	49 f5       	brne	.+82     	; 0x4be <Page_To_Buffer+0x86>
	{
		DF_SPI_RW(FlashToBuf1Transfer);							//transfer to buffer 1 op-code
     46c:	83 e5       	ldi	r24, 0x53	; 83
     46e:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr >> (16 - PageBits)));	//upper part of page address
     472:	80 91 16 02 	lds	r24, 0x0216
     476:	28 2f       	mov	r18, r24
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	80 e1       	ldi	r24, 0x10	; 16
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	ac 01       	movw	r20, r24
     480:	42 1b       	sub	r20, r18
     482:	53 0b       	sbc	r21, r19
     484:	9a 01       	movw	r18, r20
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	02 c0       	rjmp	.+4      	; 0x490 <Page_To_Buffer+0x58>
     48c:	96 95       	lsr	r25
     48e:	87 95       	ror	r24
     490:	2a 95       	dec	r18
     492:	e2 f7       	brpl	.-8      	; 0x48c <Page_To_Buffer+0x54>
     494:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr << (PageBits - 8)));	//lower part of page address
     498:	80 91 16 02 	lds	r24, 0x0216
     49c:	88 2f       	mov	r24, r24
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	9c 01       	movw	r18, r24
     4a2:	28 50       	subi	r18, 0x08	; 8
     4a4:	30 40       	sbci	r19, 0x00	; 0
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <Page_To_Buffer+0x78>
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	2a 95       	dec	r18
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <Page_To_Buffer+0x74>
     4b4:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW(0x00);										//don't cares
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr << (PageBits - 8)));	//lower part of page address
		DF_SPI_RW(0x00);										//don't cares
	}
#endif
	
	DF_CS_inactive;												//initiate the transfer
     4be:	a5 e2       	ldi	r26, 0x25	; 37
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	e5 e2       	ldi	r30, 0x25	; 37
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	81 60       	ori	r24, 0x01	; 1
     4ca:	8c 93       	st	X, r24
	DF_CS_active;
     4cc:	a5 e2       	ldi	r26, 0x25	; 37
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
     4d0:	e5 e2       	ldi	r30, 0x25	; 37
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	8e 7f       	andi	r24, 0xFE	; 254
     4d8:	8c 93       	st	X, r24
	
	while(!(Read_DF_status() & 0x80));							//monitor the status register, wait until busy-flag is high
     4da:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Read_DF_status>
     4de:	88 23       	and	r24, r24
     4e0:	e4 f7       	brge	.-8      	; 0x4da <Page_To_Buffer+0xa2>
}
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	cf 91       	pop	r28
     4ea:	df 91       	pop	r29
     4ec:	08 95       	ret

000004ee <Buffer_Read_Byte>:
*	Purpose :		Reads one byte from one of the dataflash
*					internal SRAM buffers
*
******************************************************************************/
unsigned char Buffer_Read_Byte (unsigned char BufferNo, unsigned int IntPageAdr)
{
     4ee:	df 93       	push	r29
     4f0:	cf 93       	push	r28
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <Buffer_Read_Byte+0x6>
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <Buffer_Read_Byte+0x8>
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	8a 83       	std	Y+2, r24	; 0x02
     4fc:	7c 83       	std	Y+4, r23	; 0x04
     4fe:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char data;
	
	DF_CS_inactive;								//make sure to toggle CS signal in order
     500:	a5 e2       	ldi	r26, 0x25	; 37
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e5 e2       	ldi	r30, 0x25	; 37
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	81 60       	ori	r24, 0x01	; 1
     50c:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     50e:	a5 e2       	ldi	r26, 0x25	; 37
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	e5 e2       	ldi	r30, 0x25	; 37
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	8e 7f       	andi	r24, 0xFE	; 254
     51a:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//read byte from buffer 1
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	b1 f4       	brne	.+44     	; 0x54e <__stack+0x4f>
	{
		DF_SPI_RW(Buf1Read);					//buffer 1 read op-code
     522:	84 e5       	ldi	r24, 0x54	; 84
     524:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     52e:	8b 81       	ldd	r24, Y+3	; 0x03
     530:	9c 81       	ldd	r25, Y+4	; 0x04
     532:	89 2f       	mov	r24, r25
     534:	99 27       	eor	r25, r25
     536:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     53a:	8b 81       	ldd	r24, Y+3	; 0x03
     53c:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		data = DF_SPI_RW(0x00);					//read byte
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
     54c:	89 83       	std	Y+1, r24	; 0x01
		DF_SPI_RW(0x00);						//don't cares
		data = DF_SPI_RW(0x00);					//read byte
	}
#endif
	
	return data;								//return the read data byte
     54e:	89 81       	ldd	r24, Y+1	; 0x01
}
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	08 95       	ret

0000055e <Buffer_Read_Str>:
*					internal SRAM buffers, and puts read bytes into
*					buffer pointed to by *BufferPtr
*
******************************************************************************/
void Buffer_Read_Str (unsigned char BufferNo, unsigned int IntPageAdr, unsigned int No_of_bytes, unsigned char *BufferPtr)
{
     55e:	df 93       	push	r29
     560:	cf 93       	push	r28
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	29 97       	sbiw	r28, 0x09	; 9
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
     572:	8b 83       	std	Y+3, r24	; 0x03
     574:	7d 83       	std	Y+5, r23	; 0x05
     576:	6c 83       	std	Y+4, r22	; 0x04
     578:	5f 83       	std	Y+7, r21	; 0x07
     57a:	4e 83       	std	Y+6, r20	; 0x06
     57c:	39 87       	std	Y+9, r19	; 0x09
     57e:	28 87       	std	Y+8, r18	; 0x08
	unsigned int i;

	DF_CS_inactive;								//make sure to toggle CS signal in order
     580:	a5 e2       	ldi	r26, 0x25	; 37
     582:	b0 e0       	ldi	r27, 0x00	; 0
     584:	e5 e2       	ldi	r30, 0x25	; 37
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	81 60       	ori	r24, 0x01	; 1
     58c:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     58e:	a5 e2       	ldi	r26, 0x25	; 37
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	e5 e2       	ldi	r30, 0x25	; 37
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	8e 7f       	andi	r24, 0xFE	; 254
     59a:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//read byte(s) from buffer 1
     59c:	8b 81       	ldd	r24, Y+3	; 0x03
     59e:	81 30       	cpi	r24, 0x01	; 1
     5a0:	61 f5       	brne	.+88     	; 0x5fa <Buffer_Read_Str+0x9c>
	{
		DF_SPI_RW(Buf1Read);					//buffer 1 read op-code
     5a2:	84 e5       	ldi	r24, 0x54	; 84
     5a4:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     5ae:	8c 81       	ldd	r24, Y+4	; 0x04
     5b0:	9d 81       	ldd	r25, Y+5	; 0x05
     5b2:	89 2f       	mov	r24, r25
     5b4:	99 27       	eor	r25, r25
     5b6:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     5ba:	8c 81       	ldd	r24, Y+4	; 0x04
     5bc:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		for( i=0; i<No_of_bytes; i++)
     5c6:	1a 82       	std	Y+2, r1	; 0x02
     5c8:	19 82       	std	Y+1, r1	; 0x01
     5ca:	10 c0       	rjmp	.+32     	; 0x5ec <Buffer_Read_Str+0x8e>
		{
			*(BufferPtr) = DF_SPI_RW(0x00);		//read byte and put it in AVR buffer pointed to by *BufferPtr
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
     5d2:	e8 85       	ldd	r30, Y+8	; 0x08
     5d4:	f9 85       	ldd	r31, Y+9	; 0x09
     5d6:	80 83       	st	Z, r24
			BufferPtr++;						//point to next element in AVR buffer
     5d8:	88 85       	ldd	r24, Y+8	; 0x08
     5da:	99 85       	ldd	r25, Y+9	; 0x09
     5dc:	01 96       	adiw	r24, 0x01	; 1
     5de:	99 87       	std	Y+9, r25	; 0x09
     5e0:	88 87       	std	Y+8, r24	; 0x08
		DF_SPI_RW(Buf1Read);					//buffer 1 read op-code
		DF_SPI_RW(0x00);						//don't cares
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
		DF_SPI_RW(0x00);						//don't cares
		for( i=0; i<No_of_bytes; i++)
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	9a 81       	ldd	r25, Y+2	; 0x02
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	9a 83       	std	Y+2, r25	; 0x02
     5ea:	89 83       	std	Y+1, r24	; 0x01
     5ec:	29 81       	ldd	r18, Y+1	; 0x01
     5ee:	3a 81       	ldd	r19, Y+2	; 0x02
     5f0:	8e 81       	ldd	r24, Y+6	; 0x06
     5f2:	9f 81       	ldd	r25, Y+7	; 0x07
     5f4:	28 17       	cp	r18, r24
     5f6:	39 07       	cpc	r19, r25
     5f8:	48 f3       	brcs	.-46     	; 0x5cc <Buffer_Read_Str+0x6e>
			*(BufferPtr) = DF_SPI_RW(0x00);		//read byte and put it in AVR buffer pointed to by *BufferPtr
			BufferPtr++;						//point to next element in AVR buffer
		}
	}
#endif
}
     5fa:	29 96       	adiw	r28, 0x09	; 9
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	cf 91       	pop	r28
     608:	df 91       	pop	r29
     60a:	08 95       	ret

0000060c <Buffer_Write_Enable>:
*					buffers. NOTE : User must ensure that CS goes high to terminate
*					this mode before accessing other dataflash functionalities 
*
******************************************************************************/
void Buffer_Write_Enable (unsigned char BufferNo, unsigned int IntPageAdr)
{
     60c:	df 93       	push	r29
     60e:	cf 93       	push	r28
     610:	00 d0       	rcall	.+0      	; 0x612 <Buffer_Write_Enable+0x6>
     612:	0f 92       	push	r0
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
     618:	89 83       	std	Y+1, r24	; 0x01
     61a:	7b 83       	std	Y+3, r23	; 0x03
     61c:	6a 83       	std	Y+2, r22	; 0x02
	DF_CS_inactive;								//make sure to toggle CS signal in order
     61e:	a5 e2       	ldi	r26, 0x25	; 37
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	e5 e2       	ldi	r30, 0x25	; 37
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	81 60       	ori	r24, 0x01	; 1
     62a:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     62c:	a5 e2       	ldi	r26, 0x25	; 37
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	e5 e2       	ldi	r30, 0x25	; 37
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	8e 7f       	andi	r24, 0xFE	; 254
     638:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//write enable to buffer 1
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	79 f4       	brne	.+30     	; 0x65e <Buffer_Write_Enable+0x52>
	{
		DF_SPI_RW(Buf1Write);					//buffer 1 write op-code
     640:	84 e8       	ldi	r24, 0x84	; 132
     642:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	9b 81       	ldd	r25, Y+3	; 0x03
     650:	89 2f       	mov	r24, r25
     652:	99 27       	eor	r25, r25
     654:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     658:	8a 81       	ldd	r24, Y+2	; 0x02
     65a:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
	}
#endif
}
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	cf 91       	pop	r28
     666:	df 91       	pop	r29
     668:	08 95       	ret

0000066a <Buffer_Write_Byte>:
*	Purpose :		Writes one byte to one of the dataflash
*					internal SRAM buffers
*
******************************************************************************/
void Buffer_Write_Byte (unsigned char BufferNo, unsigned int IntPageAdr, unsigned char Data)
{
     66a:	df 93       	push	r29
     66c:	cf 93       	push	r28
     66e:	00 d0       	rcall	.+0      	; 0x670 <Buffer_Write_Byte+0x6>
     670:	00 d0       	rcall	.+0      	; 0x672 <Buffer_Write_Byte+0x8>
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	89 83       	std	Y+1, r24	; 0x01
     678:	7b 83       	std	Y+3, r23	; 0x03
     67a:	6a 83       	std	Y+2, r22	; 0x02
     67c:	4c 83       	std	Y+4, r20	; 0x04
	
	DF_CS_inactive;								//make sure to toggle CS signal in order
     67e:	a5 e2       	ldi	r26, 0x25	; 37
     680:	b0 e0       	ldi	r27, 0x00	; 0
     682:	e5 e2       	ldi	r30, 0x25	; 37
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	80 81       	ld	r24, Z
     688:	81 60       	ori	r24, 0x01	; 1
     68a:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     68c:	a5 e2       	ldi	r26, 0x25	; 37
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	e5 e2       	ldi	r30, 0x25	; 37
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	8e 7f       	andi	r24, 0xFE	; 254
     698:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//write byte to buffer 1
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	91 f4       	brne	.+36     	; 0x6c4 <Buffer_Write_Byte+0x5a>
	{
		DF_SPI_RW(Buf1Write);					//buffer 1 write op-code
     6a0:	84 e8       	ldi	r24, 0x84	; 132
     6a2:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     6ac:	8a 81       	ldd	r24, Y+2	; 0x02
     6ae:	9b 81       	ldd	r25, Y+3	; 0x03
     6b0:	89 2f       	mov	r24, r25
     6b2:	99 27       	eor	r25, r25
     6b4:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     6b8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ba:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW(Data);						//write data byte
     6be:	8c 81       	ldd	r24, Y+4	; 0x04
     6c0:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
		DF_SPI_RW(Data);						//write data byte
	}		
#endif
}
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	cf 91       	pop	r28
     6ce:	df 91       	pop	r29
     6d0:	08 95       	ret

000006d2 <Buffer_Write_Str>:
*					internal SRAM buffers from AVR SRAM buffer
*					pointed to by *BufferPtr
*
******************************************************************************/
void Buffer_Write_Str (unsigned char BufferNo, unsigned int IntPageAdr, unsigned int No_of_bytes, unsigned char *BufferPtr)
{
     6d2:	df 93       	push	r29
     6d4:	cf 93       	push	r28
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	29 97       	sbiw	r28, 0x09	; 9
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	8b 83       	std	Y+3, r24	; 0x03
     6e8:	7d 83       	std	Y+5, r23	; 0x05
     6ea:	6c 83       	std	Y+4, r22	; 0x04
     6ec:	5f 83       	std	Y+7, r21	; 0x07
     6ee:	4e 83       	std	Y+6, r20	; 0x06
     6f0:	39 87       	std	Y+9, r19	; 0x09
     6f2:	28 87       	std	Y+8, r18	; 0x08
	unsigned int i;

	DF_CS_inactive;								//make sure to toggle CS signal in order
     6f4:	a5 e2       	ldi	r26, 0x25	; 37
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	e5 e2       	ldi	r30, 0x25	; 37
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 81       	ld	r24, Z
     6fe:	81 60       	ori	r24, 0x01	; 1
     700:	8c 93       	st	X, r24
	DF_CS_active;								//to reset dataflash command decoder
     702:	a5 e2       	ldi	r26, 0x25	; 37
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	e5 e2       	ldi	r30, 0x25	; 37
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	8e 7f       	andi	r24, 0xFE	; 254
     70e:	8c 93       	st	X, r24
	
	if (1 == BufferNo)							//write byte(s) to buffer 1
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	41 f5       	brne	.+80     	; 0x766 <Buffer_Write_Str+0x94>
	{
		DF_SPI_RW(Buf1Write);					//buffer 1 write op-code
     716:	84 e8       	ldi	r24, 0x84	; 132
     718:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW(0x00);						//don't cares
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
     722:	8c 81       	ldd	r24, Y+4	; 0x04
     724:	9d 81       	ldd	r25, Y+5	; 0x05
     726:	89 2f       	mov	r24, r25
     728:	99 27       	eor	r25, r25
     72a:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
     72e:	8c 81       	ldd	r24, Y+4	; 0x04
     730:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		for( i=0; i<No_of_bytes; i++)
     734:	1a 82       	std	Y+2, r1	; 0x02
     736:	19 82       	std	Y+1, r1	; 0x01
     738:	0f c0       	rjmp	.+30     	; 0x758 <Buffer_Write_Str+0x86>
		{
			DF_SPI_RW(*(BufferPtr));			//write byte pointed at by *BufferPtr to dataflash buffer 1 location
     73a:	e8 85       	ldd	r30, Y+8	; 0x08
     73c:	f9 85       	ldd	r31, Y+9	; 0x09
     73e:	80 81       	ld	r24, Z
     740:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
			BufferPtr++;						//point to next element in AVR buffer
     744:	88 85       	ldd	r24, Y+8	; 0x08
     746:	99 85       	ldd	r25, Y+9	; 0x09
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	99 87       	std	Y+9, r25	; 0x09
     74c:	88 87       	std	Y+8, r24	; 0x08
	{
		DF_SPI_RW(Buf1Write);					//buffer 1 write op-code
		DF_SPI_RW(0x00);						//don't cares
		DF_SPI_RW((unsigned char)(IntPageAdr>>8));//upper part of internal buffer address
		DF_SPI_RW((unsigned char)(IntPageAdr));	//lower part of internal buffer address
		for( i=0; i<No_of_bytes; i++)
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	9a 81       	ldd	r25, Y+2	; 0x02
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	9a 83       	std	Y+2, r25	; 0x02
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	29 81       	ldd	r18, Y+1	; 0x01
     75a:	3a 81       	ldd	r19, Y+2	; 0x02
     75c:	8e 81       	ldd	r24, Y+6	; 0x06
     75e:	9f 81       	ldd	r25, Y+7	; 0x07
     760:	28 17       	cp	r18, r24
     762:	39 07       	cpc	r19, r25
     764:	50 f3       	brcs	.-44     	; 0x73a <Buffer_Write_Str+0x68>
			DF_SPI_RW(*(BufferPtr));			//write byte pointed at by *BufferPtr to dataflash buffer 2 location
			BufferPtr++;						//point to next element in AVR buffer
		}
	}
#endif
}
     766:	29 96       	adiw	r28, 0x09	; 9
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	cf 91       	pop	r28
     774:	df 91       	pop	r29
     776:	08 95       	ret

00000778 <Buffer_To_Page>:
*
*	Purpose :		Transfers a page from dataflash SRAM buffer to flash
*					
******************************************************************************/
void Buffer_To_Page (unsigned char BufferNo, unsigned int PageAdr)
{
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	00 d0       	rcall	.+0      	; 0x77e <Buffer_To_Page+0x6>
     77e:	0f 92       	push	r0
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	7b 83       	std	Y+3, r23	; 0x03
     788:	6a 83       	std	Y+2, r22	; 0x02
	DF_CS_inactive;												//make sure to toggle CS signal in order
     78a:	a5 e2       	ldi	r26, 0x25	; 37
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	e5 e2       	ldi	r30, 0x25	; 37
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	81 60       	ori	r24, 0x01	; 1
     796:	8c 93       	st	X, r24
	DF_CS_active;												//to reset dataflash command decoder
     798:	a5 e2       	ldi	r26, 0x25	; 37
     79a:	b0 e0       	ldi	r27, 0x00	; 0
     79c:	e5 e2       	ldi	r30, 0x25	; 37
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	80 81       	ld	r24, Z
     7a2:	8e 7f       	andi	r24, 0xFE	; 254
     7a4:	8c 93       	st	X, r24
		
	if (1 == BufferNo)											//program flash page from buffer 1
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	81 30       	cpi	r24, 0x01	; 1
     7aa:	49 f5       	brne	.+82     	; 0x7fe <Buffer_To_Page+0x86>
	{
		DF_SPI_RW(Buf1ToFlashWE);								//buffer 1 to flash with erase op-code
     7ac:	83 e8       	ldi	r24, 0x83	; 131
     7ae:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr >> (16 - PageBits)));	//upper part of page address
     7b2:	80 91 16 02 	lds	r24, 0x0216
     7b6:	28 2f       	mov	r18, r24
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	80 e1       	ldi	r24, 0x10	; 16
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	ac 01       	movw	r20, r24
     7c0:	42 1b       	sub	r20, r18
     7c2:	53 0b       	sbc	r21, r19
     7c4:	9a 01       	movw	r18, r20
     7c6:	8a 81       	ldd	r24, Y+2	; 0x02
     7c8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <Buffer_To_Page+0x58>
     7cc:	96 95       	lsr	r25
     7ce:	87 95       	ror	r24
     7d0:	2a 95       	dec	r18
     7d2:	e2 f7       	brpl	.-8      	; 0x7cc <Buffer_To_Page+0x54>
     7d4:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr << (PageBits - 8)));	//lower part of page address
     7d8:	80 91 16 02 	lds	r24, 0x0216
     7dc:	88 2f       	mov	r24, r24
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	9c 01       	movw	r18, r24
     7e2:	28 50       	subi	r18, 0x08	; 8
     7e4:	30 40       	sbci	r19, 0x00	; 0
     7e6:	8a 81       	ldd	r24, Y+2	; 0x02
     7e8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <Buffer_To_Page+0x78>
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	2a 95       	dec	r18
     7f2:	e2 f7       	brpl	.-8      	; 0x7ec <Buffer_To_Page+0x74>
     7f4:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW(0x00);										//don't cares
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
		DF_SPI_RW((unsigned char)(PageAdr << (PageBits - 8)));	//lower part of page address
		DF_SPI_RW(0x00);										//don't cares
	}
#endif
	
	DF_CS_inactive;												//initiate flash page programming
     7fe:	a5 e2       	ldi	r26, 0x25	; 37
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e2       	ldi	r30, 0x25	; 37
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	81 60       	ori	r24, 0x01	; 1
     80a:	8c 93       	st	X, r24
	DF_CS_active;												
     80c:	a5 e2       	ldi	r26, 0x25	; 37
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	e5 e2       	ldi	r30, 0x25	; 37
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	80 81       	ld	r24, Z
     816:	8e 7f       	andi	r24, 0xFE	; 254
     818:	8c 93       	st	X, r24
	
	while(!(Read_DF_status() & 0x80));							//monitor the status register, wait until busy-flag is high
     81a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Read_DF_status>
     81e:	88 23       	and	r24, r24
     820:	e4 f7       	brge	.-8      	; 0x81a <Buffer_To_Page+0xa2>
}
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	cf 91       	pop	r28
     82a:	df 91       	pop	r29
     82c:	08 95       	ret

0000082e <Cont_Flash_Read_Enable>:
*
*	Purpose :		Initiates a continuous read from a location in the DataFlash
*					
******************************************************************************/
void Cont_Flash_Read_Enable (unsigned int PageAdr, unsigned int IntPageAdr)
{
     82e:	df 93       	push	r29
     830:	cf 93       	push	r28
     832:	00 d0       	rcall	.+0      	; 0x834 <Cont_Flash_Read_Enable+0x6>
     834:	00 d0       	rcall	.+0      	; 0x836 <Cont_Flash_Read_Enable+0x8>
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	9a 83       	std	Y+2, r25	; 0x02
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	7c 83       	std	Y+4, r23	; 0x04
     840:	6b 83       	std	Y+3, r22	; 0x03
	DF_CS_inactive;																//make sure to toggle CS signal in order
     842:	a5 e2       	ldi	r26, 0x25	; 37
     844:	b0 e0       	ldi	r27, 0x00	; 0
     846:	e5 e2       	ldi	r30, 0x25	; 37
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	81 60       	ori	r24, 0x01	; 1
     84e:	8c 93       	st	X, r24
	DF_CS_active;																//to reset dataflash command decoder
     850:	a5 e2       	ldi	r26, 0x25	; 37
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	e5 e2       	ldi	r30, 0x25	; 37
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	8e 7f       	andi	r24, 0xFE	; 254
     85c:	8c 93       	st	X, r24
	
	DF_SPI_RW(ContArrayRead);													//Continuous Array Read op-code
     85e:	88 e6       	ldi	r24, 0x68	; 104
     860:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
	DF_SPI_RW((unsigned char)(PageAdr >> (16 - PageBits)));						//upper part of page address
     864:	80 91 16 02 	lds	r24, 0x0216
     868:	28 2f       	mov	r18, r24
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	80 e1       	ldi	r24, 0x10	; 16
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	ac 01       	movw	r20, r24
     872:	42 1b       	sub	r20, r18
     874:	53 0b       	sbc	r21, r19
     876:	9a 01       	movw	r18, r20
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	02 c0       	rjmp	.+4      	; 0x882 <Cont_Flash_Read_Enable+0x54>
     87e:	96 95       	lsr	r25
     880:	87 95       	ror	r24
     882:	2a 95       	dec	r18
     884:	e2 f7       	brpl	.-8      	; 0x87e <Cont_Flash_Read_Enable+0x50>
     886:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
	DF_SPI_RW((unsigned char)((PageAdr << (PageBits - 8))+ (IntPageAdr>>8)));	//lower part of page address and MSB of int.page adr.
     88a:	80 91 16 02 	lds	r24, 0x0216
     88e:	88 2f       	mov	r24, r24
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	9c 01       	movw	r18, r24
     894:	28 50       	subi	r18, 0x08	; 8
     896:	30 40       	sbci	r19, 0x00	; 0
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	9a 81       	ldd	r25, Y+2	; 0x02
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <Cont_Flash_Read_Enable+0x74>
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	2a 95       	dec	r18
     8a4:	e2 f7       	brpl	.-8      	; 0x89e <Cont_Flash_Read_Enable+0x70>
     8a6:	28 2f       	mov	r18, r24
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	9c 81       	ldd	r25, Y+4	; 0x04
     8ac:	89 2f       	mov	r24, r25
     8ae:	99 27       	eor	r25, r25
     8b0:	82 0f       	add	r24, r18
     8b2:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
	DF_SPI_RW((unsigned char)(IntPageAdr));										//LSB byte of internal page address
     8b6:	8b 81       	ldd	r24, Y+3	; 0x03
     8b8:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
	DF_SPI_RW(0x00);															//perform 4 dummy writes
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
	DF_SPI_RW(0x00);															//in order to intiate DataFlash
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
	DF_SPI_RW(0x00);															//address pointers
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
	DF_SPI_RW(0x00);
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 bf 01 	call	0x37e	; 0x37e <DF_SPI_RW>
}
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	cf 91       	pop	r28
     8de:	df 91       	pop	r29
     8e0:	08 95       	ret

000008e2 <LCD_Init>:
*   Purpose :       Initialize LCD_displayData buffer.
*                   Set up the LCD (timing, contrast, etc.)
*
*****************************************************************************/
void LCD_Init (void)
{
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
    LCD_AllSegments(FALSE);                    // Clear segment buffer.
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_AllSegments>
    LCD_CONTRAST_LEVEL(LCD_INITIAL_CONTRAST);  //Set the LCD contrast level
     8f0:	e7 ee       	ldi	r30, 0xE7	; 231
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	8f e0       	ldi	r24, 0x0F	; 15
     8f6:	80 83       	st	Z, r24
    LCDCRB = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0); // Select asynchronous clock source, enable all COM pins and enable all segment pins.
     8f8:	e5 ee       	ldi	r30, 0xE5	; 229
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	87 eb       	ldi	r24, 0xB7	; 183
     8fe:	80 83       	st	Z, r24
    LCDFRR = (0<<LCDPS0) | (7<<LCDCD0);        // Set LCD prescaler to give a framerate of 32,0 Hz
     900:	e6 ee       	ldi	r30, 0xE6	; 230
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	87 e0       	ldi	r24, 0x07	; 7
     906:	80 83       	st	Z, r24
    LCDCRA = (1<<LCDEN) | (1<<LCDAB);          // Enable LCD and set low power waveform
     908:	e4 ee       	ldi	r30, 0xE4	; 228
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 ec       	ldi	r24, 0xC0	; 192
     90e:	80 83       	st	Z, r24
    LCDCRA |= (1<<LCDIE);                      //Enable LCD start of frame interrupt
     910:	a4 ee       	ldi	r26, 0xE4	; 228
     912:	b0 e0       	ldi	r27, 0x00	; 0
     914:	e4 ee       	ldi	r30, 0xE4	; 228
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	88 60       	ori	r24, 0x08	; 8
     91c:	8c 93       	st	X, r24
    gLCD_Update_Required = FALSE;
     91e:	10 92 6c 01 	sts	0x016C, r1
    sei();
     922:	78 94       	sei
}
     924:	cf 91       	pop	r28
     926:	df 91       	pop	r29
     928:	08 95       	ret

0000092a <LCD_Clear>:
/****************************************************************************
*	Function name : LCD_Clear
*	Purpose :		Clear the LCD
*****************************************************************************/
void LCD_Clear(void)
{
     92a:	df 93       	push	r29
     92c:	cf 93       	push	r28
     92e:	0f 92       	push	r0
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
	enter=0;
     934:	10 92 70 01 	sts	0x0170, r1
	for (i=0; i<TEXTBUFFER_SIZE; i++)
     938:	19 82       	std	Y+1, r1	; 0x01
     93a:	0b c0       	rjmp	.+22     	; 0x952 <LCD_Clear+0x28>
    gTextBuffer[i] = ' ';		
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	fc 01       	movw	r30, r24
     944:	e0 5b       	subi	r30, 0xB0	; 176
     946:	fd 4f       	sbci	r31, 0xFD	; 253
     948:	80 e2       	ldi	r24, 0x20	; 32
     94a:	80 83       	st	Z, r24
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i;
	enter=0;
	for (i=0; i<TEXTBUFFER_SIZE; i++)
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	8f 5f       	subi	r24, 0xFF	; 255
     950:	89 83       	std	Y+1, r24	; 0x01
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	89 31       	cpi	r24, 0x19	; 25
     956:	90 f3       	brcs	.-28     	; 0x93c <LCD_Clear+0x12>
    gTextBuffer[i] = ' ';		
	
}
     958:	0f 90       	pop	r0
     95a:	cf 91       	pop	r28
     95c:	df 91       	pop	r29
     95e:	08 95       	ret

00000960 <LCD_puts>:
*	Function name : LCD_puts
*	Parameters :	pStr: Pointer to the string
*	Purpose :		Writes a string to the LCD
*****************************************************************************/
void LCD_puts(char *pStr)
{
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	00 d0       	rcall	.+0      	; 0x966 <LCD_puts+0x6>
     966:	0f 92       	push	r0
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	9b 83       	std	Y+3, r25	; 0x03
     96e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i; 
	enter=1;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	80 93 70 01 	sts	0x0170, r24
	gLCD_Update_Required = 1;
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	80 93 6c 01 	sts	0x016C, r24
	LCD_puts_f(PSTR(""));
     97c:	88 ec       	ldi	r24, 0xC8	; 200
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <LCD_puts_f>
	enter=1;	
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 70 01 	sts	0x0170, r24
	if(enter)// This condition is to enable the scroll function
     98a:	80 91 70 01 	lds	r24, 0x0170
     98e:	88 23       	and	r24, r24
     990:	09 f4       	brne	.+2      	; 0x994 <LCD_puts+0x34>
     992:	43 c0       	rjmp	.+134    	; 0xa1a <LCD_puts+0xba>
    {
    enter = 0;
     994:	10 92 70 01 	sts	0x0170, r1
	while (gLCD_Update_Required);      // Wait for access to buffer
     998:	80 91 6c 01 	lds	r24, 0x016C
     99c:	88 23       	and	r24, r24
     99e:	e1 f7       	brne	.-8      	; 0x998 <LCD_puts+0x38>

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
     9a0:	19 82       	std	Y+1, r1	; 0x01
     9a2:	13 c0       	rjmp	.+38     	; 0x9ca <LCD_puts+0x6a>
    gTextBuffer[i] = pStr[i];
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	48 2f       	mov	r20, r24
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	28 2f       	mov	r18, r24
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	8a 81       	ldd	r24, Y+2	; 0x02
     9b2:	9b 81       	ldd	r25, Y+3	; 0x03
     9b4:	fc 01       	movw	r30, r24
     9b6:	e2 0f       	add	r30, r18
     9b8:	f3 1f       	adc	r31, r19
     9ba:	80 81       	ld	r24, Z
     9bc:	fa 01       	movw	r30, r20
     9be:	e0 5b       	subi	r30, 0xB0	; 176
     9c0:	fd 4f       	sbci	r31, 0xFD	; 253
     9c2:	80 83       	st	Z, r24
	if(enter)// This condition is to enable the scroll function
    {
    enter = 0;
	while (gLCD_Update_Required);      // Wait for access to buffer

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	8f 5f       	subi	r24, 0xFF	; 255
     9c8:	89 83       	std	Y+1, r24	; 0x01
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	28 2f       	mov	r18, r24
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	8a 81       	ldd	r24, Y+2	; 0x02
     9d2:	9b 81       	ldd	r25, Y+3	; 0x03
     9d4:	fc 01       	movw	r30, r24
     9d6:	e2 0f       	add	r30, r18
     9d8:	f3 1f       	adc	r31, r19
     9da:	80 81       	ld	r24, Z
     9dc:	88 23       	and	r24, r24
     9de:	19 f0       	breq	.+6      	; 0x9e6 <LCD_puts+0x86>
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	89 31       	cpi	r24, 0x19	; 25
     9e4:	f8 f2       	brcs	.-66     	; 0x9a4 <LCD_puts+0x44>
    gTextBuffer[i] = pStr[i];
    
	gTextBuffer[i] = '\0';
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	88 2f       	mov	r24, r24
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	fc 01       	movw	r30, r24
     9ee:	e0 5b       	subi	r30, 0xB0	; 176
     9f0:	fd 4f       	sbci	r31, 0xFD	; 253
     9f2:	10 82       	st	Z, r1

    if (i > 6)
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	87 30       	cpi	r24, 0x07	; 7
     9f8:	48 f0       	brcs	.+18     	; 0xa0c <LCD_puts+0xac>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	80 93 19 02 	sts	0x0219, r24
        gScroll = 0;
     a00:	10 92 69 02 	sts	0x0269, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	80 93 6d 01 	sts	0x016D, r24
     a0a:	04 c0       	rjmp	.+8      	; 0xa14 <LCD_puts+0xb4>
    }
    else
    {
        gScrollMode = 0;        
     a0c:	10 92 19 02 	sts	0x0219, r1
        gScroll = 0;
     a10:	10 92 69 02 	sts	0x0269, r1
    }

    gLCD_Update_Required = 1;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 6c 01 	sts	0x016C, r24
}
}
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	cf 91       	pop	r28
     a22:	df 91       	pop	r29
     a24:	08 95       	ret

00000a26 <LCD_putc>:
/****************************************************************************
*	Function name : LCD_putc
*	Purpose :		Writes a character to the LCD
*****************************************************************************/
void LCD_putc(char character)
{
     a26:	df 93       	push	r29
     a28:	cf 93       	push	r28
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <LCD_putc+0x6>
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
     a30:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t digit=0;
     a32:	19 82       	std	Y+1, r1	; 0x01
	enter=1;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	80 93 70 01 	sts	0x0170, r24
    LCD_puts_f(PSTR(""));
     a3a:	89 ec       	ldi	r24, 0xC9	; 201
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <LCD_puts_f>
	if (digit < TEXTBUFFER_SIZE)
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	89 31       	cpi	r24, 0x19	; 25
     a46:	40 f4       	brcc	.+16     	; 0xa58 <LCD_putc+0x32>
        gTextBuffer[digit] = character;
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	88 2f       	mov	r24, r24
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	fc 01       	movw	r30, r24
     a50:	e0 5b       	subi	r30, 0xB0	; 176
     a52:	fd 4f       	sbci	r31, 0xFD	; 253
     a54:	8a 81       	ldd	r24, Y+2	; 0x02
     a56:	80 83       	st	Z, r24
}
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	cf 91       	pop	r28
     a5e:	df 91       	pop	r29
     a60:	08 95       	ret

00000a62 <LCD_Colon>:
*
*	Purpose :		Enable/disable colons on the LCD
*
*****************************************************************************/
void LCD_Colon(char show)
{
     a62:	df 93       	push	r29
     a64:	cf 93       	push	r28
     a66:	0f 92       	push	r0
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	89 83       	std	Y+1, r24	; 0x01
    gColon = show;
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	80 93 6f 01 	sts	0x016F, r24
}
     a74:	0f 90       	pop	r0
     a76:	cf 91       	pop	r28
     a78:	df 91       	pop	r29
     a7a:	08 95       	ret

00000a7c <LCD_UpdateRequired>:
*
*	Purpose :		Tells the LCD that there is new data to be presented
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{
     a7c:	df 93       	push	r29
     a7e:	cf 93       	push	r28
     a80:	00 d0       	rcall	.+0      	; 0xa82 <LCD_UpdateRequired+0x6>
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	89 83       	std	Y+1, r24	; 0x01
     a88:	6a 83       	std	Y+2, r22	; 0x02

    while (gLCD_Update_Required);
     a8a:	80 91 6c 01 	lds	r24, 0x016C
     a8e:	88 23       	and	r24, r24
     a90:	e1 f7       	brne	.-8      	; 0xa8a <LCD_UpdateRequired+0xe>
    
    gScrollMode = scrollmode;
     a92:	8a 81       	ldd	r24, Y+2	; 0x02
     a94:	80 93 19 02 	sts	0x0219, r24
    gScroll = 0;
     a98:	10 92 69 02 	sts	0x0269, r1

    gLCD_Update_Required = update;
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	80 93 6c 01 	sts	0x016C, r24
}
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	cf 91       	pop	r28
     aa8:	df 91       	pop	r29
     aaa:	08 95       	ret

00000aac <LCD_FlashReset>:
*
*	Purpose :		This function resets the blinking cycle of a flashing digit
*
*****************************************************************************/
void LCD_FlashReset(void)
{
     aac:	df 93       	push	r29
     aae:	cf 93       	push	r28
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
    gFlashTimer = 0;
     ab4:	10 92 6e 01 	sts	0x016E, r1
}
     ab8:	cf 91       	pop	r28
     aba:	df 91       	pop	r29
     abc:	08 95       	ret

00000abe <LCD_WriteDigit>:
*   Purpose :       Stores LCD control data in the LCD_displayData buffer.
*                   (The LCD_displayData is latched in the LCD_SOF interrupt.)
*
*****************************************************************************/
void LCD_WriteDigit(char c, char digit)
{
     abe:	df 93       	push	r29
     ac0:	cf 93       	push	r28
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	2d 97       	sbiw	r28, 0x0d	; 13
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	8c 87       	std	Y+12, r24	; 0x0c
     ad4:	6d 87       	std	Y+13, r22	; 0x0d

    unsigned int seg = 0x0000;                  // Holds the segment pattern
     ad6:	1b 86       	std	Y+11, r1	; 0x0b
     ad8:	1a 86       	std	Y+10, r1	; 0x0a
    char mask, nibble;
    char *ptr;
    char i;


    if (digit > 5)                              // Skip if digit is illegal
     ada:	8d 85       	ldd	r24, Y+13	; 0x0d
     adc:	86 30       	cpi	r24, 0x06	; 6
     ade:	08 f0       	brcs	.+2      	; 0xae2 <LCD_WriteDigit+0x24>
     ae0:	68 c0       	rjmp	.+208    	; 0xbb2 <LCD_WriteDigit+0xf4>
        return;

    //Lookup character table for segmet data
    if ((c >= '*') && (c <= 'z'))
     ae2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ae4:	8a 32       	cpi	r24, 0x2A	; 42
     ae6:	10 f1       	brcs	.+68     	; 0xb2c <LCD_WriteDigit+0x6e>
     ae8:	8c 85       	ldd	r24, Y+12	; 0x0c
     aea:	8b 37       	cpi	r24, 0x7B	; 123
     aec:	f8 f4       	brcc	.+62     	; 0xb2c <LCD_WriteDigit+0x6e>
    {
        // c is a letter
        if (c >= 'a')                           // Convert to upper case
     aee:	8c 85       	ldd	r24, Y+12	; 0x0c
     af0:	81 36       	cpi	r24, 0x61	; 97
     af2:	18 f0       	brcs	.+6      	; 0xafa <LCD_WriteDigit+0x3c>
            c &= ~0x20;                         // if necessarry
     af4:	8c 85       	ldd	r24, Y+12	; 0x0c
     af6:	8f 7d       	andi	r24, 0xDF	; 223
     af8:	8c 87       	std	Y+12, r24	; 0x0c

        c -= '*';
     afa:	8c 85       	ldd	r24, Y+12	; 0x0c
     afc:	8a 52       	subi	r24, 0x2A	; 42
     afe:	8c 87       	std	Y+12, r24	; 0x0c

		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
     b00:	8c 85       	ldd	r24, Y+12	; 0x0c
     b02:	88 2f       	mov	r24, r24
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	84 5a       	subi	r24, 0xA4	; 164
     b0c:	9f 4f       	sbci	r25, 0xFF	; 255
     b0e:	9c 83       	std	Y+4, r25	; 0x04
     b10:	8b 83       	std	Y+3, r24	; 0x03
     b12:	8b 81       	ldd	r24, Y+3	; 0x03
     b14:	9c 81       	ldd	r25, Y+4	; 0x04
     b16:	fc 01       	movw	r30, r24
     b18:	85 91       	lpm	r24, Z+
     b1a:	94 91       	lpm	r25, Z+
     b1c:	9a 83       	std	Y+2, r25	; 0x02
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	fc 83       	std	Y+4, r31	; 0x04
     b22:	eb 83       	std	Y+3, r30	; 0x03
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	9a 81       	ldd	r25, Y+2	; 0x02
     b28:	9b 87       	std	Y+11, r25	; 0x0b
     b2a:	8a 87       	std	Y+10, r24	; 0x0a
	}

    // Adjust mask according to LCD segment mapping
    if (digit & 0x01)
     b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b2e:	88 2f       	mov	r24, r24
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	81 70       	andi	r24, 0x01	; 1
     b34:	90 70       	andi	r25, 0x00	; 0
     b36:	88 23       	and	r24, r24
     b38:	19 f0       	breq	.+6      	; 0xb40 <LCD_WriteDigit+0x82>
        mask = 0x0F;                // Digit 1, 3, 5
     b3a:	8f e0       	ldi	r24, 0x0F	; 15
     b3c:	89 87       	std	Y+9, r24	; 0x09
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <LCD_WriteDigit+0x86>
    else
        mask = 0xF0;                // Digit 0, 2, 4
     b40:	80 ef       	ldi	r24, 0xF0	; 240
     b42:	89 87       	std	Y+9, r24	; 0x09

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
     b44:	8d 85       	ldd	r24, Y+13	; 0x0d
     b46:	86 95       	lsr	r24
     b48:	88 2f       	mov	r24, r24
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	84 5c       	subi	r24, 0xC4	; 196
     b4e:	9d 4f       	sbci	r25, 0xFD	; 253
     b50:	9f 83       	std	Y+7, r25	; 0x07
     b52:	8e 83       	std	Y+6, r24	; 0x06

    for (i = 0; i < 4; i++)
     b54:	1d 82       	std	Y+5, r1	; 0x05
     b56:	2a c0       	rjmp	.+84     	; 0xbac <LCD_WriteDigit+0xee>
    {
        nibble = seg & 0x000F;
     b58:	8a 85       	ldd	r24, Y+10	; 0x0a
     b5a:	8f 70       	andi	r24, 0x0F	; 15
     b5c:	88 87       	std	Y+8, r24	; 0x08
        seg >>= 4;
     b5e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b60:	9b 85       	ldd	r25, Y+11	; 0x0b
     b62:	92 95       	swap	r25
     b64:	82 95       	swap	r24
     b66:	8f 70       	andi	r24, 0x0F	; 15
     b68:	89 27       	eor	r24, r25
     b6a:	9f 70       	andi	r25, 0x0F	; 15
     b6c:	89 27       	eor	r24, r25
     b6e:	9b 87       	std	Y+11, r25	; 0x0b
     b70:	8a 87       	std	Y+10, r24	; 0x0a
        if (digit & 0x01)
     b72:	8d 85       	ldd	r24, Y+13	; 0x0d
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	81 70       	andi	r24, 0x01	; 1
     b7a:	90 70       	andi	r25, 0x00	; 0
     b7c:	88 23       	and	r24, r24
     b7e:	21 f0       	breq	.+8      	; 0xb88 <LCD_WriteDigit+0xca>
            nibble <<= 4;
     b80:	88 85       	ldd	r24, Y+8	; 0x08
     b82:	82 95       	swap	r24
     b84:	80 7f       	andi	r24, 0xF0	; 240
     b86:	88 87       	std	Y+8, r24	; 0x08
        *ptr = (*ptr & mask) | nibble;
     b88:	ee 81       	ldd	r30, Y+6	; 0x06
     b8a:	ff 81       	ldd	r31, Y+7	; 0x07
     b8c:	90 81       	ld	r25, Z
     b8e:	89 85       	ldd	r24, Y+9	; 0x09
     b90:	98 23       	and	r25, r24
     b92:	88 85       	ldd	r24, Y+8	; 0x08
     b94:	89 2b       	or	r24, r25
     b96:	ee 81       	ldd	r30, Y+6	; 0x06
     b98:	ff 81       	ldd	r31, Y+7	; 0x07
     b9a:	80 83       	st	Z, r24
        ptr += 5;
     b9c:	8e 81       	ldd	r24, Y+6	; 0x06
     b9e:	9f 81       	ldd	r25, Y+7	; 0x07
     ba0:	05 96       	adiw	r24, 0x05	; 5
     ba2:	9f 83       	std	Y+7, r25	; 0x07
     ba4:	8e 83       	std	Y+6, r24	; 0x06
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}

    for (i = 0; i < 4; i++)
     ba6:	8d 81       	ldd	r24, Y+5	; 0x05
     ba8:	8f 5f       	subi	r24, 0xFF	; 255
     baa:	8d 83       	std	Y+5, r24	; 0x05
     bac:	8d 81       	ldd	r24, Y+5	; 0x05
     bae:	84 30       	cpi	r24, 0x04	; 4
     bb0:	98 f2       	brcs	.-90     	; 0xb58 <LCD_WriteDigit+0x9a>
        if (digit & 0x01)
            nibble <<= 4;
        *ptr = (*ptr & mask) | nibble;
        ptr += 5;
    }
}
     bb2:	2d 96       	adiw	r28, 0x0d	; 13
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <LCD_AllSegments>:
*
*   Purpose :       shows or hide all all LCD segments on the LCD
*
*****************************************************************************/
void LCD_AllSegments(char show)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <LCD_AllSegments+0x6>
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;

    if (show)
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	88 23       	and	r24, r24
     bd4:	11 f0       	breq	.+4      	; 0xbda <LCD_AllSegments+0x16>
        show = 0xFF;
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	8a 83       	std	Y+2, r24	; 0x02

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
     bda:	19 82       	std	Y+1, r1	; 0x01
     bdc:	0b c0       	rjmp	.+22     	; 0xbf4 <LCD_AllSegments+0x30>
        *(LCD_Data + i) = show;
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	88 2f       	mov	r24, r24
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	fc 01       	movw	r30, r24
     be6:	e4 5c       	subi	r30, 0xC4	; 196
     be8:	fd 4f       	sbci	r31, 0xFD	; 253
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	80 83       	st	Z, r24

    if (show)
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	8f 5f       	subi	r24, 0xFF	; 255
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	84 31       	cpi	r24, 0x14	; 20
     bf8:	90 f3       	brcs	.-28     	; 0xbde <LCD_AllSegments+0x1a>
        *(LCD_Data + i) = show;
}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <__vector_22>:
*   Purpose: Latch the LCD_displayData and Set LCD_status.updateComplete
*
*****************************************************************************/

SIGNAL(SIG_LCD)
{
     c04:	1f 92       	push	r1
     c06:	0f 92       	push	r0
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	0f 92       	push	r0
     c0c:	11 24       	eor	r1, r1
     c0e:	2f 93       	push	r18
     c10:	3f 93       	push	r19
     c12:	4f 93       	push	r20
     c14:	5f 93       	push	r21
     c16:	6f 93       	push	r22
     c18:	7f 93       	push	r23
     c1a:	8f 93       	push	r24
     c1c:	9f 93       	push	r25
     c1e:	af 93       	push	r26
     c20:	bf 93       	push	r27
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <__vector_22+0x28>
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <__vector_22+0x2a>
     c2e:	0f 92       	push	r0
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
    char c_flash;
    char flash;

    char EOL;
    unsigned char i;
    LCD_timer--;                    // Decreased every LCD frame
     c34:	80 91 18 01 	lds	r24, 0x0118
     c38:	81 50       	subi	r24, 0x01	; 1
     c3a:	80 93 18 01 	sts	0x0118, r24

    if (gScrollMode)
     c3e:	80 91 19 02 	lds	r24, 0x0219
     c42:	88 23       	and	r24, r24
     c44:	91 f0       	breq	.+36     	; 0xc6a <__vector_22+0x66>
    {
        // If we are in scroll mode, and the timer has expired,
        // we will update the LCD
        if (LCD_timer == 0)
     c46:	80 91 18 01 	lds	r24, 0x0118
     c4a:	88 23       	and	r24, r24
     c4c:	81 f4       	brne	.+32     	; 0xc6e <__vector_22+0x6a>
        {
            if (gLCD_Start_Scroll_Timer == 0)
     c4e:	80 91 6d 01 	lds	r24, 0x016D
     c52:	88 23       	and	r24, r24
     c54:	21 f4       	brne	.+8      	; 0xc5e <__vector_22+0x5a>
            {
                gLCD_Update_Required = TRUE;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	80 93 6c 01 	sts	0x016C, r24
     c5c:	08 c0       	rjmp	.+16     	; 0xc6e <__vector_22+0x6a>
            }
            else
                gLCD_Start_Scroll_Timer--;
     c5e:	80 91 6d 01 	lds	r24, 0x016D
     c62:	81 50       	subi	r24, 0x01	; 1
     c64:	80 93 6d 01 	sts	0x016D, r24
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <__vector_22+0x6a>
    }
    else    
    {   // if not scrolling,
        // disble LCD start of frame interrupt
//        cbi(LCDCRA, LCDIE);   //DEBUG
        gScroll = 0;
     c6a:	10 92 69 02 	sts	0x0269, r1
    }


    EOL = FALSE;
     c6e:	1a 82       	std	Y+2, r1	; 0x02
    if (gLCD_Update_Required == TRUE)
     c70:	80 91 6c 01 	lds	r24, 0x016C
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	09 f0       	breq	.+2      	; 0xc7a <__vector_22+0x76>
     c78:	81 c0       	rjmp	.+258    	; 0xd7c <__vector_22+0x178>
    {
        // Duty cycle of flashing characters
        if (gFlashTimer < (LCD_FLASH_SEED >> 1))
     c7a:	80 91 6e 01 	lds	r24, 0x016E
     c7e:	85 30       	cpi	r24, 0x05	; 5
     c80:	10 f4       	brcc	.+4      	; 0xc86 <__vector_22+0x82>
            flash = 0;
     c82:	1b 82       	std	Y+3, r1	; 0x03
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__vector_22+0x86>
        else
            flash = 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	8b 83       	std	Y+3, r24	; 0x03

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
     c8a:	19 82       	std	Y+1, r1	; 0x01
     c8c:	43 c0       	rjmp	.+134    	; 0xd14 <__vector_22+0x110>
        {
            if ((gScroll+i) >= 0 && (!EOL))
     c8e:	80 91 69 02 	lds	r24, 0x0269
     c92:	28 2f       	mov	r18, r24
     c94:	33 27       	eor	r19, r19
     c96:	27 fd       	sbrc	r18, 7
     c98:	30 95       	com	r19
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	88 2f       	mov	r24, r24
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	82 0f       	add	r24, r18
     ca2:	93 1f       	adc	r25, r19
     ca4:	99 23       	and	r25, r25
     ca6:	14 f1       	brlt	.+68     	; 0xcec <__vector_22+0xe8>
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	88 23       	and	r24, r24
     cac:	f9 f4       	brne	.+62     	; 0xcec <__vector_22+0xe8>
            {
                // We have some visible characters
                c = gTextBuffer[i + gScroll];
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	80 91 69 02 	lds	r24, 0x0269
     cb8:	99 27       	eor	r25, r25
     cba:	87 fd       	sbrc	r24, 7
     cbc:	90 95       	com	r25
     cbe:	82 0f       	add	r24, r18
     cc0:	93 1f       	adc	r25, r19
     cc2:	fc 01       	movw	r30, r24
     cc4:	e0 5b       	subi	r30, 0xB0	; 176
     cc6:	fd 4f       	sbci	r31, 0xFD	; 253
     cc8:	80 81       	ld	r24, Z
     cca:	8d 83       	std	Y+5, r24	; 0x05
                c_flash = c & 0x80 ? 1 : 0;
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	1c 82       	std	Y+4, r1	; 0x04
     cd0:	88 23       	and	r24, r24
     cd2:	14 f4       	brge	.+4      	; 0xcd8 <__vector_22+0xd4>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	8c 83       	std	Y+4, r24	; 0x04
                c = c & 0x7F;
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	8f 77       	andi	r24, 0x7F	; 127
     cdc:	8d 83       	std	Y+5, r24	; 0x05

                if (c == '\0')
     cde:	8d 81       	ldd	r24, Y+5	; 0x05
     ce0:	88 23       	and	r24, r24
     ce2:	31 f4       	brne	.+12     	; 0xcf0 <__vector_22+0xec>
                    EOL = i+1;      // End of character data
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	8f 5f       	subi	r24, 0xFF	; 255
     ce8:	8a 83       	std	Y+2, r24	; 0x02
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <__vector_22+0xec>
            }
            else
                c = ' ';
     cec:	80 e2       	ldi	r24, 0x20	; 32
     cee:	8d 83       	std	Y+5, r24	; 0x05

            // Check if this character is flashing

            if (c_flash && flash)
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	88 23       	and	r24, r24
     cf4:	41 f0       	breq	.+16     	; 0xd06 <__vector_22+0x102>
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	88 23       	and	r24, r24
     cfa:	29 f0       	breq	.+10     	; 0xd06 <__vector_22+0x102>
                LCD_WriteDigit(' ', i);
     cfc:	80 e2       	ldi	r24, 0x20	; 32
     cfe:	69 81       	ldd	r22, Y+1	; 0x01
     d00:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_WriteDigit>
     d04:	04 c0       	rjmp	.+8      	; 0xd0e <__vector_22+0x10a>
            else
                LCD_WriteDigit(c, i);
     d06:	8d 81       	ldd	r24, Y+5	; 0x05
     d08:	69 81       	ldd	r22, Y+1	; 0x01
     d0a:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_WriteDigit>
            flash = 0;
        else
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	8f 5f       	subi	r24, 0xFF	; 255
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	86 30       	cpi	r24, 0x06	; 6
     d18:	08 f4       	brcc	.+2      	; 0xd1c <__vector_22+0x118>
     d1a:	b9 cf       	rjmp	.-142    	; 0xc8e <__vector_22+0x8a>
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
     d1c:	19 82       	std	Y+1, r1	; 0x01
     d1e:	11 c0       	rjmp	.+34     	; 0xd42 <__vector_22+0x13e>
            *(pLCDREG + i) = *(LCD_Data+i);
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	88 2f       	mov	r24, r24
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	dc 01       	movw	r26, r24
     d28:	a4 51       	subi	r26, 0x14	; 20
     d2a:	bf 4f       	sbci	r27, 0xFF	; 255
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	88 2f       	mov	r24, r24
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	fc 01       	movw	r30, r24
     d34:	e4 5c       	subi	r30, 0xC4	; 196
     d36:	fd 4f       	sbci	r31, 0xFD	; 253
     d38:	80 81       	ld	r24, Z
     d3a:	8c 93       	st	X, r24
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	84 31       	cpi	r24, 0x14	; 20
     d46:	60 f3       	brcs	.-40     	; 0xd20 <__vector_22+0x11c>
            *(pLCDREG + i) = *(LCD_Data+i);

        // Handle colon
        if (gColon)
     d48:	80 91 6f 01 	lds	r24, 0x016F
     d4c:	88 23       	and	r24, r24
     d4e:	29 f0       	breq	.+10     	; 0xd5a <__vector_22+0x156>
            *(pLCDREG + 8) = 0x01;
     d50:	e4 ef       	ldi	r30, 0xF4	; 244
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 83       	st	Z, r24
     d58:	03 c0       	rjmp	.+6      	; 0xd60 <__vector_22+0x15c>
        else
            *(pLCDREG + 8) = 0x00;
     d5a:	e4 ef       	ldi	r30, 0xF4	; 244
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	10 82       	st	Z, r1

        // If the text scrolled off the display,
        // we have to start over again.
        if (EOL == 1)
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	21 f4       	brne	.+8      	; 0xd6e <__vector_22+0x16a>
            gScroll = -6;
     d66:	8a ef       	ldi	r24, 0xFA	; 250
     d68:	80 93 69 02 	sts	0x0269, r24
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <__vector_22+0x174>
        else
            gScroll++;
     d6e:	80 91 69 02 	lds	r24, 0x0269
     d72:	8f 5f       	subi	r24, 0xFF	; 255
     d74:	80 93 69 02 	sts	0x0269, r24

        // No need to update anymore
        gLCD_Update_Required = FALSE;
     d78:	10 92 6c 01 	sts	0x016C, r1
    }


    // LCD_timer is used when scrolling text
    if (LCD_timer == 0)
     d7c:	80 91 18 01 	lds	r24, 0x0118
     d80:	88 23       	and	r24, r24
     d82:	19 f4       	brne	.+6      	; 0xd8a <__vector_22+0x186>
    {
/*        if ((gScroll <= 0) || EOL)
            LCD_timer = LCD_TIMER_SEED/2;
        else*/
            LCD_timer = LCD_TIMER_SEED;
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	80 93 18 01 	sts	0x0118, r24
    }

    // gFlashTimer is used when flashing characters
    if (gFlashTimer == LCD_FLASH_SEED)
     d8a:	80 91 6e 01 	lds	r24, 0x016E
     d8e:	8a 30       	cpi	r24, 0x0A	; 10
     d90:	19 f4       	brne	.+6      	; 0xd98 <__vector_22+0x194>
        gFlashTimer= 0;
     d92:	10 92 6e 01 	sts	0x016E, r1
     d96:	05 c0       	rjmp	.+10     	; 0xda2 <__vector_22+0x19e>
    else
        gFlashTimer++;
     d98:	80 91 6e 01 	lds	r24, 0x016E
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	80 93 6e 01 	sts	0x016E, r24

}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <LCD_puts_f>:
*
*****************************************************************************/

// mt void LCD_puts_f(char __flash *pFlashStr, char scrollmode)
void LCD_puts_f(const char *pFlashStr )
{	
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	29 97       	sbiw	r28, 0x09	; 9
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	99 87       	std	Y+9, r25	; 0x09
     de8:	88 87       	std	Y+8, r24	; 0x08
uint8_t i;
////////////////////////////////
enter = 1;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	80 93 70 01 	sts	0x0170, r24
	if(enter)
     df0:	80 91 70 01 	lds	r24, 0x0170
     df4:	88 23       	and	r24, r24
     df6:	09 f4       	brne	.+2      	; 0xdfa <LCD_puts_f+0x28>
     df8:	4d c0       	rjmp	.+154    	; 0xe94 <LCD_puts_f+0xc2>
    {
        enter = 0;
     dfa:	10 92 70 01 	sts	0x0170, r1
    //} CLOSE DOWN
////////////////////////////////
    // char i;


    while (gLCD_Update_Required);      // Wait for access to buffer
     dfe:	80 91 6c 01 	lds	r24, 0x016C
     e02:	88 23       	and	r24, r24
     e04:	e1 f7       	brne	.-8      	; 0xdfe <LCD_puts_f+0x2c>

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
     e06:	1f 82       	std	Y+7, r1	; 0x07
     e08:	18 c0       	rjmp	.+48     	; 0xe3a <LCD_puts_f+0x68>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
     e0a:	8f 81       	ldd	r24, Y+7	; 0x07
     e0c:	48 2f       	mov	r20, r24
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	8f 81       	ldd	r24, Y+7	; 0x07
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	88 85       	ldd	r24, Y+8	; 0x08
     e18:	99 85       	ldd	r25, Y+9	; 0x09
     e1a:	82 0f       	add	r24, r18
     e1c:	93 1f       	adc	r25, r19
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	ed 81       	ldd	r30, Y+5	; 0x05
     e24:	fe 81       	ldd	r31, Y+6	; 0x06
     e26:	84 91       	lpm	r24, Z+
     e28:	8c 83       	std	Y+4, r24	; 0x04
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	fa 01       	movw	r30, r20
     e2e:	e0 5b       	subi	r30, 0xB0	; 176
     e30:	fd 4f       	sbci	r31, 0xFD	; 253
     e32:	80 83       	st	Z, r24


    while (gLCD_Update_Required);      // Wait for access to buffer

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
     e34:	8f 81       	ldd	r24, Y+7	; 0x07
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	8f 83       	std	Y+7, r24	; 0x07
     e3a:	8f 81       	ldd	r24, Y+7	; 0x07
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	88 85       	ldd	r24, Y+8	; 0x08
     e42:	99 85       	ldd	r25, Y+9	; 0x09
     e44:	82 0f       	add	r24, r18
     e46:	93 1f       	adc	r25, r19
     e48:	9b 83       	std	Y+3, r25	; 0x03
     e4a:	8a 83       	std	Y+2, r24	; 0x02
     e4c:	ea 81       	ldd	r30, Y+2	; 0x02
     e4e:	fb 81       	ldd	r31, Y+3	; 0x03
     e50:	84 91       	lpm	r24, Z+
     e52:	89 83       	std	Y+1, r24	; 0x01
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	88 23       	and	r24, r24
     e58:	19 f0       	breq	.+6      	; 0xe60 <LCD_puts_f+0x8e>
     e5a:	8f 81       	ldd	r24, Y+7	; 0x07
     e5c:	89 31       	cpi	r24, 0x19	; 25
     e5e:	a8 f2       	brcs	.-86     	; 0xe0a <LCD_puts_f+0x38>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
    }

    gTextBuffer[i] = '\0';
     e60:	8f 81       	ldd	r24, Y+7	; 0x07
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	fc 01       	movw	r30, r24
     e68:	e0 5b       	subi	r30, 0xB0	; 176
     e6a:	fd 4f       	sbci	r31, 0xFD	; 253
     e6c:	10 82       	st	Z, r1

    if (i > 6)
     e6e:	8f 81       	ldd	r24, Y+7	; 0x07
     e70:	87 30       	cpi	r24, 0x07	; 7
     e72:	48 f0       	brcs	.+18     	; 0xe86 <LCD_puts_f+0xb4>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	80 93 19 02 	sts	0x0219, r24
        gScroll = 0;
     e7a:	10 92 69 02 	sts	0x0269, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	80 93 6d 01 	sts	0x016D, r24
     e84:	04 c0       	rjmp	.+8      	; 0xe8e <LCD_puts_f+0xbc>
    }
    else
    {
        gScrollMode = 0;        
     e86:	10 92 19 02 	sts	0x0219, r1
        gScroll = 0;
     e8a:	10 92 69 02 	sts	0x0269, r1
    }

    gLCD_Update_Required = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	80 93 6c 01 	sts	0x016C, r24
}
}//CLOSE DOWN
     e94:	29 96       	adiw	r28, 0x09	; 9
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     ea6:	1f 92       	push	r1
     ea8:	0f 92       	push	r0
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	0f 92       	push	r0
     eae:	11 24       	eor	r1, r1
     eb0:	8f 93       	push	r24
     eb2:	9f 93       	push	r25
     eb4:	ef 93       	push	r30
     eb6:	ff 93       	push	r31
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <__vector_13+0x18>
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <__vector_13+0x1a>
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
     ec4:	e0 ec       	ldi	r30, 0xC0	; 192
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
     ecc:	e6 ec       	ldi	r30, 0xC6	; 198
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8b 83       	std	Y+3, r24	; 0x03

    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	88 71       	andi	r24, 0x18	; 24
     ed8:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     eda:	80 91 13 02 	lds	r24, 0x0213
     ede:	8f 5f       	subi	r24, 0xFF	; 255
     ee0:	8f 77       	andi	r24, 0x7F	; 127
     ee2:	8c 83       	std	Y+4, r24	; 0x04

    if ( tmphead == UART_RxTail ) {
     ee4:	90 91 14 02 	lds	r25, 0x0214
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	89 17       	cp	r24, r25
     eec:	19 f4       	brne	.+6      	; 0xef4 <__vector_13+0x4e>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	0b c0       	rjmp	.+22     	; 0xf0a <__vector_13+0x64>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	80 93 13 02 	sts	0x0213, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	fc 01       	movw	r30, r24
     f02:	ef 56       	subi	r30, 0x6F	; 111
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	80 83       	st	Z, r24
    }
    UART_LastRxError = lastRxError;
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	80 93 15 02 	sts	0x0215, r24
}
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	ff 91       	pop	r31
     f1e:	ef 91       	pop	r30
     f20:	9f 91       	pop	r25
     f22:	8f 91       	pop	r24
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0
     f2a:	1f 90       	pop	r1
     f2c:	18 95       	reti

00000f2e <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	0f 92       	push	r0
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;


    if ( UART_TxHead != UART_TxTail) {
     f4e:	90 91 11 02 	lds	r25, 0x0211
     f52:	80 91 12 02 	lds	r24, 0x0212
     f56:	98 17       	cp	r25, r24
     f58:	99 f0       	breq	.+38     	; 0xf80 <__vector_14+0x52>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     f5a:	80 91 12 02 	lds	r24, 0x0212
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	8f 71       	andi	r24, 0x1F	; 31
     f62:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	80 93 12 02 	sts	0x0212, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     f6a:	a6 ec       	ldi	r26, 0xC6	; 198
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	fc 01       	movw	r30, r24
     f76:	ef 58       	subi	r30, 0x8F	; 143
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	80 81       	ld	r24, Z
     f7c:	8c 93       	st	X, r24
     f7e:	07 c0       	rjmp	.+14     	; 0xf8e <__vector_14+0x60>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     f80:	a1 ec       	ldi	r26, 0xC1	; 193
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e1 ec       	ldi	r30, 0xC1	; 193
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	8f 7d       	andi	r24, 0xDF	; 223
     f8c:	8c 93       	st	X, r24
    }
}
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	ff 91       	pop	r31
     f96:	ef 91       	pop	r30
     f98:	bf 91       	pop	r27
     f9a:	af 91       	pop	r26
     f9c:	9f 91       	pop	r25
     f9e:	8f 91       	pop	r24
     fa0:	0f 90       	pop	r0
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	0f 90       	pop	r0
     fa6:	1f 90       	pop	r1
     fa8:	18 95       	reti

00000faa <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <uart_init+0x6>
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
     fb8:	10 92 11 02 	sts	0x0211, r1
    UART_TxTail = 0;
     fbc:	10 92 12 02 	sts	0x0212, r1
    UART_RxHead = 0;
     fc0:	10 92 13 02 	sts	0x0213, r1
    UART_RxTail = 0;
     fc4:	10 92 14 02 	sts	0x0214, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	9a 81       	ldd	r25, Y+2	; 0x02
     fcc:	99 23       	and	r25, r25
     fce:	4c f4       	brge	.+18     	; 0xfe2 <uart_init+0x38>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed
     fd0:	e0 ec       	ldi	r30, 0xC0	; 192
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	80 83       	st	Z, r24
    	 baudrate &= ~0x8000;
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	9f 77       	andi	r25, 0x7F	; 127
     fde:	9a 83       	std	Y+2, r25	; 0x02
     fe0:	89 83       	std	Y+1, r24	; 0x01
    }
    UBRRH = (unsigned char)(baudrate>>8);
     fe2:	e5 ec       	ldi	r30, 0xC5	; 197
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	9a 81       	ldd	r25, Y+2	; 0x02
     fea:	89 2f       	mov	r24, r25
     fec:	99 27       	eor	r25, r25
     fee:	80 83       	st	Z, r24
    UBRRL = (unsigned char) baudrate;
     ff0:	e4 ec       	ldi	r30, 0xC4	; 196
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	80 83       	st	Z, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
     ff8:	e1 ec       	ldi	r30, 0xC1	; 193
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	88 e9       	ldi	r24, 0x98	; 152
     ffe:	80 83       	st	Z, r24

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
    #else
    UCSRC = (3<<UCSZ0);
    1000:	e2 ec       	ldi	r30, 0xC2	; 194
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	86 e0       	ldi	r24, 0x06	; 6
    1006:	80 83       	st	Z, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <uart_getc>:
Purpose:  return byte from ringbuffer
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <uart_getc+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <uart_getc+0x8>
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    101e:	90 91 13 02 	lds	r25, 0x0213
    1022:	80 91 14 02 	lds	r24, 0x0214
    1026:	98 17       	cp	r25, r24
    1028:	29 f4       	brne	.+10     	; 0x1034 <uart_getc+0x22>
        return UART_NO_DATA;   /* no data available */
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	9c 83       	std	Y+4, r25	; 0x04
    1030:	8b 83       	std	Y+3, r24	; 0x03
    1032:	1d c0       	rjmp	.+58     	; 0x106e <uart_getc+0x5c>
    }

    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1034:	80 91 14 02 	lds	r24, 0x0214
    1038:	8f 5f       	subi	r24, 0xFF	; 255
    103a:	8f 77       	andi	r24, 0x7F	; 127
    103c:	8a 83       	std	Y+2, r24	; 0x02
    UART_RxTail = tmptail;
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	80 93 14 02 	sts	0x0214, r24

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	fc 01       	movw	r30, r24
    104c:	ef 56       	subi	r30, 0x6F	; 111
    104e:	fe 4f       	sbci	r31, 0xFE	; 254
    1050:	80 81       	ld	r24, Z
    1052:	89 83       	std	Y+1, r24	; 0x01

    return (UART_LastRxError << 8) + data;
    1054:	80 91 15 02 	lds	r24, 0x0215
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	38 2f       	mov	r19, r24
    105e:	22 27       	eor	r18, r18
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	82 0f       	add	r24, r18
    1068:	93 1f       	adc	r25, r19
    106a:	9c 83       	std	Y+4, r25	; 0x04
    106c:	8b 83       	std	Y+3, r24	; 0x03
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none
**************************************************************************/
void uart_putc(unsigned char data)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <uart_putc+0x6>
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;


    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    108c:	80 91 11 02 	lds	r24, 0x0211
    1090:	8f 5f       	subi	r24, 0xFF	; 255
    1092:	8f 71       	andi	r24, 0x1F	; 31
    1094:	89 83       	std	Y+1, r24	; 0x01

    while ( tmphead == UART_TxTail ){
    1096:	90 91 12 02 	lds	r25, 0x0212
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	89 17       	cp	r24, r25
    109e:	d9 f3       	breq	.-10     	; 0x1096 <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	fc 01       	movw	r30, r24
    10a8:	ef 58       	subi	r30, 0x8F	; 143
    10aa:	fe 4f       	sbci	r31, 0xFE	; 254
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	80 93 11 02 	sts	0x0211, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    10b6:	a1 ec       	ldi	r26, 0xC1	; 193
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e1 ec       	ldi	r30, 0xC1	; 193
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	80 62       	ori	r24, 0x20	; 32
    10c2:	8c 93       	st	X, r24

}/* uart_putc */
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts(const char *s )
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <uart_puts+0x6>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	9a 83       	std	Y+2, r25	; 0x02
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	0b c0       	rjmp	.+22     	; 0x10f4 <uart_puts+0x26>
    while (*s)
      uart_putc(*s++);
    10de:	e9 81       	ldd	r30, Y+1	; 0x01
    10e0:	fa 81       	ldd	r31, Y+2	; 0x02
    10e2:	20 81       	ld	r18, Z
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	9a 83       	std	Y+2, r25	; 0x02
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	82 2f       	mov	r24, r18
    10f0:	0e 94 40 08 	call	0x1080	; 0x1080 <uart_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s)
    10f4:	e9 81       	ldd	r30, Y+1	; 0x01
    10f6:	fa 81       	ldd	r31, Y+2	; 0x02
    10f8:	80 81       	ld	r24, Z
    10fa:	88 23       	and	r24, r24
    10fc:	81 f7       	brne	.-32     	; 0x10de <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	00 d0       	rcall	.+0      	; 0x110e <uart_puts_p+0x6>
    110e:	00 d0       	rcall	.+0      	; 0x1110 <uart_puts_p+0x8>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <uart_puts_p+0xa>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	9d 83       	std	Y+5, r25	; 0x05
    1118:	8c 83       	std	Y+4, r24	; 0x04
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <uart_puts_p+0x1a>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
      uart_putc(c);
    111c:	8e 81       	ldd	r24, Y+6	; 0x06
    111e:	0e 94 40 08 	call	0x1080	; 0x1080 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
    1122:	8c 81       	ldd	r24, Y+4	; 0x04
    1124:	9d 81       	ldd	r25, Y+5	; 0x05
    1126:	9b 83       	std	Y+3, r25	; 0x03
    1128:	8a 83       	std	Y+2, r24	; 0x02
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	9d 83       	std	Y+5, r25	; 0x05
    1132:	8c 83       	std	Y+4, r24	; 0x04
    1134:	ea 81       	ldd	r30, Y+2	; 0x02
    1136:	fb 81       	ldd	r31, Y+3	; 0x03
    1138:	84 91       	lpm	r24, Z+
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	8e 83       	std	Y+6, r24	; 0x06
    1140:	8e 81       	ldd	r24, Y+6	; 0x06
    1142:	88 23       	and	r24, r24
    1144:	59 f7       	brne	.-42     	; 0x111c <uart_puts_p+0x14>
      uart_putc(c);

}/* uart_puts_p */
    1146:	26 96       	adiw	r28, 0x06	; 6
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <uart_read_line>:
}/* uart1_puts_p */


#endif
void uart_read_line(unsigned char * c_array, uint8_t max, int try_sec)
{
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	2f 97       	sbiw	r28, 0x0f	; 15
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	9b 87       	std	Y+11, r25	; 0x0b
    1172:	8a 87       	std	Y+10, r24	; 0x0a
    1174:	6c 87       	std	Y+12, r22	; 0x0c
    1176:	5e 87       	std	Y+14, r21	; 0x0e
    1178:	4d 87       	std	Y+13, r20	; 0x0d
	uint8_t i=0;
    117a:	19 86       	std	Y+9, r1	; 0x09
	unsigned long z = 0, tries = F_CPU / 160UL * try_sec + 10*max;
    117c:	1d 82       	std	Y+5, r1	; 0x05
    117e:	1e 82       	std	Y+6, r1	; 0x06
    1180:	1f 82       	std	Y+7, r1	; 0x07
    1182:	18 86       	std	Y+8, r1	; 0x08
    1184:	8d 85       	ldd	r24, Y+13	; 0x0d
    1186:	9e 85       	ldd	r25, Y+14	; 0x0e
    1188:	aa 27       	eor	r26, r26
    118a:	97 fd       	sbrc	r25, 7
    118c:	a0 95       	com	r26
    118e:	ba 2f       	mov	r27, r26
    1190:	24 ed       	ldi	r18, 0xD4	; 212
    1192:	30 e3       	ldi	r19, 0x30	; 48
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__mulsi3>
    11a0:	ab 01       	movw	r20, r22
    11a2:	bc 01       	movw	r22, r24
    11a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	9c 01       	movw	r18, r24
    11ac:	22 0f       	add	r18, r18
    11ae:	33 1f       	adc	r19, r19
    11b0:	c9 01       	movw	r24, r18
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	aa 27       	eor	r26, r26
    11c0:	97 fd       	sbrc	r25, 7
    11c2:	a0 95       	com	r26
    11c4:	ba 2f       	mov	r27, r26
    11c6:	84 0f       	add	r24, r20
    11c8:	95 1f       	adc	r25, r21
    11ca:	a6 1f       	adc	r26, r22
    11cc:	b7 1f       	adc	r27, r23
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	ab 83       	std	Y+3, r26	; 0x03
    11d4:	bc 83       	std	Y+4, r27	; 0x04
	c_array[0] = 0;
    11d6:	ea 85       	ldd	r30, Y+10	; 0x0a
    11d8:	fb 85       	ldd	r31, Y+11	; 0x0b
    11da:	10 82       	st	Z, r1

	while(1)
	{
		if(z++ > tries) return;							// Timeout: give up after <try_sec> seconds
    11dc:	1f 86       	std	Y+15, r1	; 0x0f
    11de:	2d 81       	ldd	r18, Y+5	; 0x05
    11e0:	3e 81       	ldd	r19, Y+6	; 0x06
    11e2:	4f 81       	ldd	r20, Y+7	; 0x07
    11e4:	58 85       	ldd	r21, Y+8	; 0x08
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	ab 81       	ldd	r26, Y+3	; 0x03
    11ec:	bc 81       	ldd	r27, Y+4	; 0x04
    11ee:	82 17       	cp	r24, r18
    11f0:	93 07       	cpc	r25, r19
    11f2:	a4 07       	cpc	r26, r20
    11f4:	b5 07       	cpc	r27, r21
    11f6:	10 f4       	brcc	.+4      	; 0x11fc <uart_read_line+0xa4>
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	8f 87       	std	Y+15, r24	; 0x0f
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	af 81       	ldd	r26, Y+7	; 0x07
    1202:	b8 85       	ldd	r27, Y+8	; 0x08
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	a1 1d       	adc	r26, r1
    1208:	b1 1d       	adc	r27, r1
    120a:	8d 83       	std	Y+5, r24	; 0x05
    120c:	9e 83       	std	Y+6, r25	; 0x06
    120e:	af 83       	std	Y+7, r26	; 0x07
    1210:	b8 87       	std	Y+8, r27	; 0x08
    1212:	ef 85       	ldd	r30, Y+15	; 0x0f
    1214:	ee 23       	and	r30, r30
    1216:	09 f0       	breq	.+2      	; 0x121a <uart_read_line+0xc2>
    1218:	4c c0       	rjmp	.+152    	; 0x12b2 <uart_read_line+0x15a>
		c_array[i]=uart_getc();
    121a:	89 85       	ldd	r24, Y+9	; 0x09
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	8a 85       	ldd	r24, Y+10	; 0x0a
    1222:	9b 85       	ldd	r25, Y+11	; 0x0b
    1224:	8c 01       	movw	r16, r24
    1226:	02 0f       	add	r16, r18
    1228:	13 1f       	adc	r17, r19
    122a:	0e 94 09 08 	call	0x1012	; 0x1012 <uart_getc>
    122e:	f8 01       	movw	r30, r16
    1230:	80 83       	st	Z, r24
		if(c_array[i]!=0 && c_array[i]!=10) // A (non-LF) character was received
    1232:	89 85       	ldd	r24, Y+9	; 0x09
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	8a 85       	ldd	r24, Y+10	; 0x0a
    123a:	9b 85       	ldd	r25, Y+11	; 0x0b
    123c:	fc 01       	movw	r30, r24
    123e:	e2 0f       	add	r30, r18
    1240:	f3 1f       	adc	r31, r19
    1242:	80 81       	ld	r24, Z
    1244:	88 23       	and	r24, r24
    1246:	51 f2       	breq	.-108    	; 0x11dc <uart_read_line+0x84>
    1248:	89 85       	ldd	r24, Y+9	; 0x09
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1250:	9b 85       	ldd	r25, Y+11	; 0x0b
    1252:	fc 01       	movw	r30, r24
    1254:	e2 0f       	add	r30, r18
    1256:	f3 1f       	adc	r31, r19
    1258:	80 81       	ld	r24, Z
    125a:	8a 30       	cpi	r24, 0x0A	; 10
    125c:	09 f4       	brne	.+2      	; 0x1260 <uart_read_line+0x108>
    125e:	be cf       	rjmp	.-132    	; 0x11dc <uart_read_line+0x84>
																				// A possible LF from last sentence is skipped
		{
			if(c_array[i]==13 || i==max)
    1260:	89 85       	ldd	r24, Y+9	; 0x09
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	8a 85       	ldd	r24, Y+10	; 0x0a
    1268:	9b 85       	ldd	r25, Y+11	; 0x0b
    126a:	fc 01       	movw	r30, r24
    126c:	e2 0f       	add	r30, r18
    126e:	f3 1f       	adc	r31, r19
    1270:	80 81       	ld	r24, Z
    1272:	8d 30       	cpi	r24, 0x0D	; 13
    1274:	21 f0       	breq	.+8      	; 0x127e <uart_read_line+0x126>
    1276:	99 85       	ldd	r25, Y+9	; 0x09
    1278:	8c 85       	ldd	r24, Y+12	; 0x0c
    127a:	98 17       	cp	r25, r24
    127c:	51 f4       	brne	.+20     	; 0x1292 <uart_read_line+0x13a>
				{c_array[i]=0; break;}
    127e:	89 85       	ldd	r24, Y+9	; 0x09
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	8a 85       	ldd	r24, Y+10	; 0x0a
    1286:	9b 85       	ldd	r25, Y+11	; 0x0b
    1288:	fc 01       	movw	r30, r24
    128a:	e2 0f       	add	r30, r18
    128c:	f3 1f       	adc	r31, r19
    128e:	10 82       	st	Z, r1
    1290:	10 c0       	rjmp	.+32     	; 0x12b2 <uart_read_line+0x15a>
			else if(c_array[i])
    1292:	89 85       	ldd	r24, Y+9	; 0x09
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	8a 85       	ldd	r24, Y+10	; 0x0a
    129a:	9b 85       	ldd	r25, Y+11	; 0x0b
    129c:	fc 01       	movw	r30, r24
    129e:	e2 0f       	add	r30, r18
    12a0:	f3 1f       	adc	r31, r19
    12a2:	80 81       	ld	r24, Z
    12a4:	88 23       	and	r24, r24
    12a6:	09 f4       	brne	.+2      	; 0x12aa <uart_read_line+0x152>
    12a8:	99 cf       	rjmp	.-206    	; 0x11dc <uart_read_line+0x84>
				i++;
    12aa:	89 85       	ldd	r24, Y+9	; 0x09
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	89 87       	std	Y+9, r24	; 0x09
    12b0:	95 cf       	rjmp	.-214    	; 0x11dc <uart_read_line+0x84>
		}
	}
}
    12b2:	2f 96       	adiw	r28, 0x0f	; 15
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	08 95       	ret

000012c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>:
#include "easybutterfly.h" // ACUASeasy library for Butterfly

void WAIT_FOR_RELEASE_JOYSTICK_ALL() {
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62

  WAIT_FOR_RELEASE_JOYSTICK_RIGHT
    12d0:	ec e2       	ldi	r30, 0x2C	; 44
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	88 2f       	mov	r24, r24
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	88 70       	andi	r24, 0x08	; 8
    12dc:	90 70       	andi	r25, 0x00	; 0
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	b9 f3       	breq	.-18     	; 0x12d0 <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x8>
  WAIT_FOR_RELEASE_JOYSTICK_LEFT
    12e2:	ec e2       	ldi	r30, 0x2C	; 44
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	84 70       	andi	r24, 0x04	; 4
    12ee:	90 70       	andi	r25, 0x00	; 0
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	b9 f3       	breq	.-18     	; 0x12e2 <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x1a>
  WAIT_FOR_RELEASE_JOYSTICK_UP
    12f4:	e3 e2       	ldi	r30, 0x23	; 35
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	80 74       	andi	r24, 0x40	; 64
    1300:	90 70       	andi	r25, 0x00	; 0
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	b9 f3       	breq	.-18     	; 0x12f4 <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x2c>
  WAIT_FOR_RELEASE_JOYSTICK_DOWN
    1306:	e3 e2       	ldi	r30, 0x23	; 35
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	88 23       	and	r24, r24
    130e:	dc f7       	brge	.-10     	; 0x1306 <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x3e>
  WAIT_FOR_RELEASE_JOYSTICK_CENTER
    1310:	e3 e2       	ldi	r30, 0x23	; 35
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	80 71       	andi	r24, 0x10	; 16
    131c:	90 70       	andi	r25, 0x00	; 0
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	b9 f3       	breq	.-18     	; 0x1310 <WAIT_FOR_RELEASE_JOYSTICK_ALL+0x48>
  return;

}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <main>:


PROGRAM_INIT
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	29 97       	sbiw	r28, 0x09	; 9
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	0e 94 b7 00 	call	0x16e	; 0x16e <InitBoard>
	ACTIVATE_LCD // initialize the LCD. The output begins at the first position of the display.
    1340:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCD_Init>
	CLEAR_LCD // Clears the LCD screen.
    1344:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Clear>
				  display_set_timer1_countdown, state_set_timer1_countdown,
				  display_set_timer2_countdown, state_set_timer2_countdown,
				  display_timer1_input, state_timer1_input,
				  display_timer2_input, state_timer2_input
				};
	enum states c = display_time;
    1348:	19 82       	std	Y+1, r1	; 0x01

PROGRAM_START

	switch (c)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	39 87       	std	Y+9, r19	; 0x09
    1352:	28 87       	std	Y+8, r18	; 0x08
    1354:	88 85       	ldd	r24, Y+8	; 0x08
    1356:	99 85       	ldd	r25, Y+9	; 0x09
    1358:	87 31       	cpi	r24, 0x17	; 23
    135a:	91 05       	cpc	r25, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <main+0x38>
    135e:	73 c2       	rjmp	.+1254   	; 0x1846 <main+0x51e>
    1360:	28 85       	ldd	r18, Y+8	; 0x08
    1362:	39 85       	ldd	r19, Y+9	; 0x09
    1364:	28 31       	cpi	r18, 0x18	; 24
    1366:	31 05       	cpc	r19, r1
    1368:	0c f0       	brlt	.+2      	; 0x136c <main+0x44>
    136a:	91 c0       	rjmp	.+290    	; 0x148e <main+0x166>
    136c:	88 85       	ldd	r24, Y+8	; 0x08
    136e:	99 85       	ldd	r25, Y+9	; 0x09
    1370:	89 30       	cpi	r24, 0x09	; 9
    1372:	91 05       	cpc	r25, r1
    1374:	09 f4       	brne	.+2      	; 0x1378 <main+0x50>
    1376:	a3 c1       	rjmp	.+838    	; 0x16be <main+0x396>
    1378:	28 85       	ldd	r18, Y+8	; 0x08
    137a:	39 85       	ldd	r19, Y+9	; 0x09
    137c:	2a 30       	cpi	r18, 0x0A	; 10
    137e:	31 05       	cpc	r19, r1
    1380:	0c f0       	brlt	.+2      	; 0x1384 <main+0x5c>
    1382:	42 c0       	rjmp	.+132    	; 0x1408 <main+0xe0>
    1384:	88 85       	ldd	r24, Y+8	; 0x08
    1386:	99 85       	ldd	r25, Y+9	; 0x09
    1388:	84 30       	cpi	r24, 0x04	; 4
    138a:	91 05       	cpc	r25, r1
    138c:	09 f4       	brne	.+2      	; 0x1390 <main+0x68>
    138e:	64 c1       	rjmp	.+712    	; 0x1658 <main+0x330>
    1390:	28 85       	ldd	r18, Y+8	; 0x08
    1392:	39 85       	ldd	r19, Y+9	; 0x09
    1394:	25 30       	cpi	r18, 0x05	; 5
    1396:	31 05       	cpc	r19, r1
    1398:	f4 f4       	brge	.+60     	; 0x13d6 <main+0xae>
    139a:	88 85       	ldd	r24, Y+8	; 0x08
    139c:	99 85       	ldd	r25, Y+9	; 0x09
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	91 05       	cpc	r25, r1
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <main+0x7e>
    13a4:	0e c1       	rjmp	.+540    	; 0x15c2 <main+0x29a>
    13a6:	28 85       	ldd	r18, Y+8	; 0x08
    13a8:	39 85       	ldd	r19, Y+9	; 0x09
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	34 f4       	brge	.+12     	; 0x13bc <main+0x94>
    13b0:	88 85       	ldd	r24, Y+8	; 0x08
    13b2:	99 85       	ldd	r25, Y+9	; 0x09
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	09 f4       	brne	.+2      	; 0x13ba <main+0x92>
    13b8:	fb c0       	rjmp	.+502    	; 0x15b0 <main+0x288>
    13ba:	50 c5       	rjmp	.+2720   	; 0x1e5c <main+0xb34>
    13bc:	28 85       	ldd	r18, Y+8	; 0x08
    13be:	39 85       	ldd	r19, Y+9	; 0x09
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <main+0xa0>
    13c6:	20 c1       	rjmp	.+576    	; 0x1608 <main+0x2e0>
    13c8:	88 85       	ldd	r24, Y+8	; 0x08
    13ca:	99 85       	ldd	r25, Y+9	; 0x09
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	91 05       	cpc	r25, r1
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <main+0xac>
    13d2:	23 c1       	rjmp	.+582    	; 0x161a <main+0x2f2>
    13d4:	43 c5       	rjmp	.+2694   	; 0x1e5c <main+0xb34>
    13d6:	28 85       	ldd	r18, Y+8	; 0x08
    13d8:	39 85       	ldd	r19, Y+9	; 0x09
    13da:	26 30       	cpi	r18, 0x06	; 6
    13dc:	31 05       	cpc	r19, r1
    13de:	09 f4       	brne	.+2      	; 0x13e2 <main+0xba>
    13e0:	86 c1       	rjmp	.+780    	; 0x16ee <main+0x3c6>
    13e2:	88 85       	ldd	r24, Y+8	; 0x08
    13e4:	99 85       	ldd	r25, Y+9	; 0x09
    13e6:	86 30       	cpi	r24, 0x06	; 6
    13e8:	91 05       	cpc	r25, r1
    13ea:	0c f4       	brge	.+2      	; 0x13ee <main+0xc6>
    13ec:	3e c1       	rjmp	.+636    	; 0x166a <main+0x342>
    13ee:	28 85       	ldd	r18, Y+8	; 0x08
    13f0:	39 85       	ldd	r19, Y+9	; 0x09
    13f2:	27 30       	cpi	r18, 0x07	; 7
    13f4:	31 05       	cpc	r19, r1
    13f6:	09 f4       	brne	.+2      	; 0x13fa <main+0xd2>
    13f8:	83 c1       	rjmp	.+774    	; 0x1700 <main+0x3d8>
    13fa:	88 85       	ldd	r24, Y+8	; 0x08
    13fc:	99 85       	ldd	r25, Y+9	; 0x09
    13fe:	88 30       	cpi	r24, 0x08	; 8
    1400:	91 05       	cpc	r25, r1
    1402:	09 f4       	brne	.+2      	; 0x1406 <main+0xde>
    1404:	51 c1       	rjmp	.+674    	; 0x16a8 <main+0x380>
    1406:	2a c5       	rjmp	.+2644   	; 0x1e5c <main+0xb34>
    1408:	28 85       	ldd	r18, Y+8	; 0x08
    140a:	39 85       	ldd	r19, Y+9	; 0x09
    140c:	20 31       	cpi	r18, 0x10	; 16
    140e:	31 05       	cpc	r19, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <main+0xec>
    1412:	8f c2       	rjmp	.+1310   	; 0x1932 <main+0x60a>
    1414:	88 85       	ldd	r24, Y+8	; 0x08
    1416:	99 85       	ldd	r25, Y+9	; 0x09
    1418:	81 31       	cpi	r24, 0x11	; 17
    141a:	91 05       	cpc	r25, r1
    141c:	fc f4       	brge	.+62     	; 0x145c <main+0x134>
    141e:	28 85       	ldd	r18, Y+8	; 0x08
    1420:	39 85       	ldd	r19, Y+9	; 0x09
    1422:	2d 30       	cpi	r18, 0x0D	; 13
    1424:	31 05       	cpc	r19, r1
    1426:	09 f4       	brne	.+2      	; 0x142a <main+0x102>
    1428:	95 c1       	rjmp	.+810    	; 0x1754 <main+0x42c>
    142a:	88 85       	ldd	r24, Y+8	; 0x08
    142c:	99 85       	ldd	r25, Y+9	; 0x09
    142e:	8e 30       	cpi	r24, 0x0E	; 14
    1430:	91 05       	cpc	r25, r1
    1432:	3c f4       	brge	.+14     	; 0x1442 <main+0x11a>
    1434:	28 85       	ldd	r18, Y+8	; 0x08
    1436:	39 85       	ldd	r19, Y+9	; 0x09
    1438:	2a 30       	cpi	r18, 0x0A	; 10
    143a:	31 05       	cpc	r19, r1
    143c:	09 f4       	brne	.+2      	; 0x1440 <main+0x118>
    143e:	4b c1       	rjmp	.+662    	; 0x16d6 <main+0x3ae>
    1440:	0d c5       	rjmp	.+2586   	; 0x1e5c <main+0xb34>
    1442:	88 85       	ldd	r24, Y+8	; 0x08
    1444:	99 85       	ldd	r25, Y+9	; 0x09
    1446:	8e 30       	cpi	r24, 0x0E	; 14
    1448:	91 05       	cpc	r25, r1
    144a:	09 f4       	brne	.+2      	; 0x144e <main+0x126>
    144c:	8c c1       	rjmp	.+792    	; 0x1766 <main+0x43e>
    144e:	28 85       	ldd	r18, Y+8	; 0x08
    1450:	39 85       	ldd	r19, Y+9	; 0x09
    1452:	2f 30       	cpi	r18, 0x0F	; 15
    1454:	31 05       	cpc	r19, r1
    1456:	09 f4       	brne	.+2      	; 0x145a <main+0x132>
    1458:	63 c2       	rjmp	.+1222   	; 0x1920 <main+0x5f8>
    145a:	00 c5       	rjmp	.+2560   	; 0x1e5c <main+0xb34>
    145c:	88 85       	ldd	r24, Y+8	; 0x08
    145e:	99 85       	ldd	r25, Y+9	; 0x09
    1460:	82 31       	cpi	r24, 0x12	; 18
    1462:	91 05       	cpc	r25, r1
    1464:	09 f4       	brne	.+2      	; 0x1468 <main+0x140>
    1466:	a3 c2       	rjmp	.+1350   	; 0x19ae <main+0x686>
    1468:	28 85       	ldd	r18, Y+8	; 0x08
    146a:	39 85       	ldd	r19, Y+9	; 0x09
    146c:	22 31       	cpi	r18, 0x12	; 18
    146e:	31 05       	cpc	r19, r1
    1470:	0c f4       	brge	.+2      	; 0x1474 <main+0x14c>
    1472:	94 c2       	rjmp	.+1320   	; 0x199c <main+0x674>
    1474:	88 85       	ldd	r24, Y+8	; 0x08
    1476:	99 85       	ldd	r25, Y+9	; 0x09
    1478:	83 31       	cpi	r24, 0x13	; 19
    147a:	91 05       	cpc	r25, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <main+0x158>
    147e:	a5 c1       	rjmp	.+842    	; 0x17ca <main+0x4a2>
    1480:	28 85       	ldd	r18, Y+8	; 0x08
    1482:	39 85       	ldd	r19, Y+9	; 0x09
    1484:	24 31       	cpi	r18, 0x14	; 20
    1486:	31 05       	cpc	r19, r1
    1488:	09 f4       	brne	.+2      	; 0x148c <main+0x164>
    148a:	a8 c1       	rjmp	.+848    	; 0x17dc <main+0x4b4>
    148c:	e7 c4       	rjmp	.+2510   	; 0x1e5c <main+0xb34>
    148e:	88 85       	ldd	r24, Y+8	; 0x08
    1490:	99 85       	ldd	r25, Y+9	; 0x09
    1492:	81 32       	cpi	r24, 0x21	; 33
    1494:	91 05       	cpc	r25, r1
    1496:	09 f4       	brne	.+2      	; 0x149a <main+0x172>
    1498:	a8 c3       	rjmp	.+1872   	; 0x1bea <main+0x8c2>
    149a:	28 85       	ldd	r18, Y+8	; 0x08
    149c:	39 85       	ldd	r19, Y+9	; 0x09
    149e:	22 32       	cpi	r18, 0x22	; 34
    14a0:	31 05       	cpc	r19, r1
    14a2:	ec f5       	brge	.+122    	; 0x151e <main+0x1f6>
    14a4:	88 85       	ldd	r24, Y+8	; 0x08
    14a6:	99 85       	ldd	r25, Y+9	; 0x09
    14a8:	8c 31       	cpi	r24, 0x1C	; 28
    14aa:	91 05       	cpc	r25, r1
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <main+0x188>
    14ae:	5f c3       	rjmp	.+1726   	; 0x1b6e <main+0x846>
    14b0:	28 85       	ldd	r18, Y+8	; 0x08
    14b2:	39 85       	ldd	r19, Y+9	; 0x09
    14b4:	2d 31       	cpi	r18, 0x1D	; 29
    14b6:	31 05       	cpc	r19, r1
    14b8:	cc f4       	brge	.+50     	; 0x14ec <main+0x1c4>
    14ba:	88 85       	ldd	r24, Y+8	; 0x08
    14bc:	99 85       	ldd	r25, Y+9	; 0x09
    14be:	89 31       	cpi	r24, 0x19	; 25
    14c0:	91 05       	cpc	r25, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <main+0x19e>
    14c4:	f8 c1       	rjmp	.+1008   	; 0x18b6 <main+0x58e>
    14c6:	28 85       	ldd	r18, Y+8	; 0x08
    14c8:	39 85       	ldd	r19, Y+9	; 0x09
    14ca:	29 31       	cpi	r18, 0x19	; 25
    14cc:	31 05       	cpc	r19, r1
    14ce:	0c f4       	brge	.+2      	; 0x14d2 <main+0x1aa>
    14d0:	bd c1       	rjmp	.+890    	; 0x184c <main+0x524>
    14d2:	88 85       	ldd	r24, Y+8	; 0x08
    14d4:	99 85       	ldd	r25, Y+9	; 0x09
    14d6:	8a 31       	cpi	r24, 0x1A	; 26
    14d8:	91 05       	cpc	r25, r1
    14da:	09 f4       	brne	.+2      	; 0x14de <main+0x1b6>
    14dc:	9d c2       	rjmp	.+1338   	; 0x1a18 <main+0x6f0>
    14de:	28 85       	ldd	r18, Y+8	; 0x08
    14e0:	39 85       	ldd	r19, Y+9	; 0x09
    14e2:	2b 31       	cpi	r18, 0x1B	; 27
    14e4:	31 05       	cpc	r19, r1
    14e6:	09 f4       	brne	.+2      	; 0x14ea <main+0x1c2>
    14e8:	a0 c2       	rjmp	.+1344   	; 0x1a2a <main+0x702>
    14ea:	b8 c4       	rjmp	.+2416   	; 0x1e5c <main+0xb34>
    14ec:	88 85       	ldd	r24, Y+8	; 0x08
    14ee:	99 85       	ldd	r25, Y+9	; 0x09
    14f0:	8e 31       	cpi	r24, 0x1E	; 30
    14f2:	91 05       	cpc	r25, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <main+0x1d0>
    14f6:	ce c2       	rjmp	.+1436   	; 0x1a94 <main+0x76c>
    14f8:	28 85       	ldd	r18, Y+8	; 0x08
    14fa:	39 85       	ldd	r19, Y+9	; 0x09
    14fc:	2e 31       	cpi	r18, 0x1E	; 30
    14fe:	31 05       	cpc	r19, r1
    1500:	0c f4       	brge	.+2      	; 0x1504 <main+0x1dc>
    1502:	3e c3       	rjmp	.+1660   	; 0x1b80 <main+0x858>
    1504:	88 85       	ldd	r24, Y+8	; 0x08
    1506:	99 85       	ldd	r25, Y+9	; 0x09
    1508:	8f 31       	cpi	r24, 0x1F	; 31
    150a:	91 05       	cpc	r25, r1
    150c:	09 f4       	brne	.+2      	; 0x1510 <main+0x1e8>
    150e:	c5 c2       	rjmp	.+1418   	; 0x1a9a <main+0x772>
    1510:	28 85       	ldd	r18, Y+8	; 0x08
    1512:	39 85       	ldd	r19, Y+9	; 0x09
    1514:	20 32       	cpi	r18, 0x20	; 32
    1516:	31 05       	cpc	r19, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <main+0x1f4>
    151a:	f4 c2       	rjmp	.+1512   	; 0x1b04 <main+0x7dc>
    151c:	9f c4       	rjmp	.+2366   	; 0x1e5c <main+0xb34>
    151e:	88 85       	ldd	r24, Y+8	; 0x08
    1520:	99 85       	ldd	r25, Y+9	; 0x09
    1522:	86 32       	cpi	r24, 0x26	; 38
    1524:	91 05       	cpc	r25, r1
    1526:	09 f4       	brne	.+2      	; 0x152a <main+0x202>
    1528:	33 c4       	rjmp	.+2150   	; 0x1d90 <main+0xa68>
    152a:	28 85       	ldd	r18, Y+8	; 0x08
    152c:	39 85       	ldd	r19, Y+9	; 0x09
    152e:	27 32       	cpi	r18, 0x27	; 39
    1530:	31 05       	cpc	r19, r1
    1532:	cc f4       	brge	.+50     	; 0x1566 <main+0x23e>
    1534:	88 85       	ldd	r24, Y+8	; 0x08
    1536:	99 85       	ldd	r25, Y+9	; 0x09
    1538:	83 32       	cpi	r24, 0x23	; 35
    153a:	91 05       	cpc	r25, r1
    153c:	09 f4       	brne	.+2      	; 0x1540 <main+0x218>
    153e:	8d c3       	rjmp	.+1818   	; 0x1c5a <main+0x932>
    1540:	28 85       	ldd	r18, Y+8	; 0x08
    1542:	39 85       	ldd	r19, Y+9	; 0x09
    1544:	23 32       	cpi	r18, 0x23	; 35
    1546:	31 05       	cpc	r19, r1
    1548:	0c f4       	brge	.+2      	; 0x154c <main+0x224>
    154a:	52 c3       	rjmp	.+1700   	; 0x1bf0 <main+0x8c8>
    154c:	88 85       	ldd	r24, Y+8	; 0x08
    154e:	99 85       	ldd	r25, Y+9	; 0x09
    1550:	84 32       	cpi	r24, 0x24	; 36
    1552:	91 05       	cpc	r25, r1
    1554:	09 f4       	brne	.+2      	; 0x1558 <main+0x230>
    1556:	b6 c3       	rjmp	.+1900   	; 0x1cc4 <main+0x99c>
    1558:	28 85       	ldd	r18, Y+8	; 0x08
    155a:	39 85       	ldd	r19, Y+9	; 0x09
    155c:	25 32       	cpi	r18, 0x25	; 37
    155e:	31 05       	cpc	r19, r1
    1560:	09 f4       	brne	.+2      	; 0x1564 <main+0x23c>
    1562:	b9 c3       	rjmp	.+1906   	; 0x1cd6 <main+0x9ae>
    1564:	7b c4       	rjmp	.+2294   	; 0x1e5c <main+0xb34>
    1566:	88 85       	ldd	r24, Y+8	; 0x08
    1568:	99 85       	ldd	r25, Y+9	; 0x09
    156a:	89 32       	cpi	r24, 0x29	; 41
    156c:	91 05       	cpc	r25, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <main+0x24a>
    1570:	f0 c3       	rjmp	.+2016   	; 0x1d52 <main+0xa2a>
    1572:	28 85       	ldd	r18, Y+8	; 0x08
    1574:	39 85       	ldd	r19, Y+9	; 0x09
    1576:	2a 32       	cpi	r18, 0x2A	; 42
    1578:	31 05       	cpc	r19, r1
    157a:	6c f4       	brge	.+26     	; 0x1596 <main+0x26e>
    157c:	88 85       	ldd	r24, Y+8	; 0x08
    157e:	99 85       	ldd	r25, Y+9	; 0x09
    1580:	87 32       	cpi	r24, 0x27	; 39
    1582:	91 05       	cpc	r25, r1
    1584:	09 f4       	brne	.+2      	; 0x1588 <main+0x260>
    1586:	0d c4       	rjmp	.+2074   	; 0x1da2 <main+0xa7a>
    1588:	28 85       	ldd	r18, Y+8	; 0x08
    158a:	39 85       	ldd	r19, Y+9	; 0x09
    158c:	28 32       	cpi	r18, 0x28	; 40
    158e:	31 05       	cpc	r19, r1
    1590:	09 f4       	brne	.+2      	; 0x1594 <main+0x26c>
    1592:	d6 c3       	rjmp	.+1964   	; 0x1d40 <main+0xa18>
    1594:	63 c4       	rjmp	.+2246   	; 0x1e5c <main+0xb34>
    1596:	88 85       	ldd	r24, Y+8	; 0x08
    1598:	99 85       	ldd	r25, Y+9	; 0x09
    159a:	8a 32       	cpi	r24, 0x2A	; 42
    159c:	91 05       	cpc	r25, r1
    159e:	09 f4       	brne	.+2      	; 0x15a2 <main+0x27a>
    15a0:	35 c4       	rjmp	.+2154   	; 0x1e0c <main+0xae4>
    15a2:	28 85       	ldd	r18, Y+8	; 0x08
    15a4:	39 85       	ldd	r19, Y+9	; 0x09
    15a6:	2b 32       	cpi	r18, 0x2B	; 43
    15a8:	31 05       	cpc	r19, r1
    15aa:	09 f4       	brne	.+2      	; 0x15ae <main+0x286>
    15ac:	38 c4       	rjmp	.+2160   	; 0x1e1e <main+0xaf6>
    15ae:	56 c4       	rjmp	.+2220   	; 0x1e5c <main+0xb34>

	// DISPLAY TIME AND WAIT FOR EVENT
	case display_time:
	    //save actual_time
		 //if (sound_is_on) play_sound;
		LCD_TEXT("  0000")
    15b0:	8a e1       	ldi	r24, 0x1A	; 26
    15b2:	91 e0       	ldi	r25, 0x01	; 1
    15b4:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    15b8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_time;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	c4 ce       	rjmp	.-632    	; 0x134a <main+0x22>
		break;
	case state_time:
		ON_JOYSTICK_LEFT   c = display_dev1;
    15c2:	ec e2       	ldi	r30, 0x2C	; 44
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	88 2f       	mov	r24, r24
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	84 70       	andi	r24, 0x04	; 4
    15ce:	90 70       	andi	r25, 0x00	; 0
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <main+0x2b0>
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = display_dev2;
    15d8:	ec e2       	ldi	r30, 0x2C	; 44
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	88 2f       	mov	r24, r24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	88 70       	andi	r24, 0x08	; 8
    15e4:	90 70       	andi	r25, 0x00	; 0
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	11 f4       	brne	.+4      	; 0x15ee <main+0x2c6>
    15ea:	84 e0       	ldi	r24, 0x04	; 4
    15ec:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER c = state_time_center_pressed;
    15ee:	e3 e2       	ldi	r30, 0x23	; 35
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	88 2f       	mov	r24, r24
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	80 71       	andi	r24, 0x10	; 16
    15fa:	90 70       	andi	r25, 0x00	; 0
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	09 f0       	breq	.+2      	; 0x1602 <main+0x2da>
    1600:	a4 ce       	rjmp	.-696    	; 0x134a <main+0x22>
    1602:	88 e0       	ldi	r24, 0x08	; 8
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	a1 ce       	rjmp	.-702    	; 0x134a <main+0x22>
		break;

    // DISPLAY DEVICE1 TIMER AND WAIT FOR EVENT
	case display_dev1:
		 //if (sound_is_on) play_sound;
		LCD_TEXT("1 0010")
    1608:	81 e2       	ldi	r24, 0x21	; 33
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1610:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_dev1;
    1614:	83 e0       	ldi	r24, 0x03	; 3
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	98 ce       	rjmp	.-720    	; 0x134a <main+0x22>
		break;
	case state_dev1:
		ON_JOYSTICK_LEFT   c = display_dev2;
    161a:	ec e2       	ldi	r30, 0x2C	; 44
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	84 70       	andi	r24, 0x04	; 4
    1626:	90 70       	andi	r25, 0x00	; 0
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	11 f4       	brne	.+4      	; 0x1630 <main+0x308>
    162c:	84 e0       	ldi	r24, 0x04	; 4
    162e:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = display_time;
    1630:	ec e2       	ldi	r30, 0x2C	; 44
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	88 70       	andi	r24, 0x08	; 8
    163c:	90 70       	andi	r25, 0x00	; 0
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	09 f4       	brne	.+2      	; 0x1644 <main+0x31c>
    1642:	19 82       	std	Y+1, r1	; 0x01
		ON_JOYSTICK_UP     {} //function turning on device 1
    1644:	e3 e2       	ldi	r30, 0x23	; 35
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	30 81       	ld	r19, Z
		ON_JOYSTICK_DOWN   {} //function turning off device 1
    164a:	e3 e2       	ldi	r30, 0x23	; 35
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
		ON_JOYSTICK_CENTER {} //start timer
    1650:	e3 e2       	ldi	r30, 0x23	; 35
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	90 81       	ld	r25, Z
    1656:	79 ce       	rjmp	.-782    	; 0x134a <main+0x22>
		break;

    // DISPLAY DEVICE2 TIMER AND WAIT FOR EVENT
	case display_dev2:
		//if (sound_is_on) play_sound;
		LCD_TEXT("2 0010")
    1658:	88 e2       	ldi	r24, 0x28	; 40
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1660:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_dev2;		
    1664:	85 e0       	ldi	r24, 0x05	; 5
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	70 ce       	rjmp	.-800    	; 0x134a <main+0x22>
		break;
	case state_dev2:
		ON_JOYSTICK_LEFT   c = display_time;
    166a:	ec e2       	ldi	r30, 0x2C	; 44
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	88 2f       	mov	r24, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	84 70       	andi	r24, 0x04	; 4
    1676:	90 70       	andi	r25, 0x00	; 0
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	09 f4       	brne	.+2      	; 0x167e <main+0x356>
    167c:	19 82       	std	Y+1, r1	; 0x01
		ON_JOYSTICK_RIGHT  c = display_dev1;
    167e:	ec e2       	ldi	r30, 0x2C	; 44
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	88 2f       	mov	r24, r24
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	88 70       	andi	r24, 0x08	; 8
    168a:	90 70       	andi	r25, 0x00	; 0
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	11 f4       	brne	.+4      	; 0x1694 <main+0x36c>
    1690:	82 e0       	ldi	r24, 0x02	; 2
    1692:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     {} //function turning on device 2
    1694:	e3 e2       	ldi	r30, 0x23	; 35
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	20 81       	ld	r18, Z
		ON_JOYSTICK_DOWN   {} //function turning off device 2
    169a:	e3 e2       	ldi	r30, 0x23	; 35
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	30 81       	ld	r19, Z
		ON_JOYSTICK_CENTER {} //start timer
    16a0:	e3 e2       	ldi	r30, 0x23	; 35
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	51 ce       	rjmp	.-862    	; 0x134a <main+0x22>
		break;

	// WAIT 5sec to get to set_time
	case state_time_center_pressed:
		//t0 = now;
		c = display_time;
    16a8:	19 82       	std	Y+1, r1	; 0x01
		while (!(PINB & (1 << 4))) {};//while JOYSTICK_CENTER is pressed
    16aa:	e3 e2       	ldi	r30, 0x23	; 35
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	80 71       	andi	r24, 0x10	; 16
    16b6:	90 70       	andi	r25, 0x00	; 0
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	b9 f3       	breq	.-18     	; 0x16aa <main+0x382>
    16bc:	46 ce       	rjmp	.-884    	; 0x134a <main+0x22>
		break;

	// WAIT 5sec to get to settings_timer1 else start_timer1
	case state_d1_center_pressed:
		//t0 = now;
		c = state_start_timer1;
    16be:	8b e0       	ldi	r24, 0x0B	; 11
    16c0:	89 83       	std	Y+1, r24	; 0x01
		while (!(PINB & (1 << 4))) {};//while JOYSTICK_CENTER is pressed
    16c2:	e3 e2       	ldi	r30, 0x23	; 35
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	80 71       	andi	r24, 0x10	; 16
    16ce:	90 70       	andi	r25, 0x00	; 0
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	b9 f3       	breq	.-18     	; 0x16c2 <main+0x39a>
    16d4:	3a ce       	rjmp	.-908    	; 0x134a <main+0x22>
		break;

	// WAIT 5sec to get to settings_timer2 else start_timer2
	case state_d2_center_pressed:
		//t0 = now;
		c = state_start_timer2;
    16d6:	8c e0       	ldi	r24, 0x0C	; 12
    16d8:	89 83       	std	Y+1, r24	; 0x01
		while (!(PINB & (1 << 4))) {};//while JOYSTICK_CENTER is pressed
    16da:	e3 e2       	ldi	r30, 0x23	; 35
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	80 71       	andi	r24, 0x10	; 16
    16e6:	90 70       	andi	r25, 0x00	; 0
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	b9 f3       	breq	.-18     	; 0x16da <main+0x3b2>
    16ec:	2e ce       	rjmp	.-932    	; 0x134a <main+0x22>
		break;

	// DISPLAY SET TIME AND WAIT FOR EVENT
	case display_set_time:
		//if (sound_is_on) play_sound;
		LCD_TEXT("SET T")
    16ee:	8f e2       	ldi	r24, 0x2F	; 47
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    16f6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_time;
    16fa:	87 e0       	ldi	r24, 0x07	; 7
    16fc:	89 83       	std	Y+1, r24	; 0x01
    16fe:	25 ce       	rjmp	.-950    	; 0x134a <main+0x22>
		break;
	case state_set_time:
		ON_JOYSTICK_LEFT   c = display_leave_menu;
    1700:	ec e2       	ldi	r30, 0x2C	; 44
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	84 70       	andi	r24, 0x04	; 4
    170c:	90 70       	andi	r25, 0x00	; 0
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	11 f4       	brne	.+4      	; 0x1716 <main+0x3ee>
    1712:	8d e0       	ldi	r24, 0x0D	; 13
    1714:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = display_set_sound;
    1716:	ec e2       	ldi	r30, 0x2C	; 44
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	88 70       	andi	r24, 0x08	; 8
    1722:	90 70       	andi	r25, 0x00	; 0
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	11 f4       	brne	.+4      	; 0x172c <main+0x404>
    1728:	83 e1       	ldi	r24, 0x13	; 19
    172a:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   c = display_set_time_input;
    172c:	e3 e2       	ldi	r30, 0x23	; 35
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	88 23       	and	r24, r24
    1734:	14 f0       	brlt	.+4      	; 0x173a <main+0x412>
    1736:	85 e1       	ldi	r24, 0x15	; 21
    1738:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER c = display_set_time_input;
    173a:	e3 e2       	ldi	r30, 0x23	; 35
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	80 71       	andi	r24, 0x10	; 16
    1746:	90 70       	andi	r25, 0x00	; 0
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	09 f0       	breq	.+2      	; 0x174e <main+0x426>
    174c:	fe cd       	rjmp	.-1028   	; 0x134a <main+0x22>
    174e:	85 e1       	ldi	r24, 0x15	; 21
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	fb cd       	rjmp	.-1034   	; 0x134a <main+0x22>
		break;

	// DISPLAY LEAVE MENU AND WAIT FOR EVENT
	case display_leave_menu:
		//if (sound_is_on) play_sound;
		LCD_TEXT("BACK")
    1754:	85 e3       	ldi	r24, 0x35	; 53
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    175c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_leave_menu;
    1760:	8e e0       	ldi	r24, 0x0E	; 14
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	f2 cd       	rjmp	.-1052   	; 0x134a <main+0x22>
		break;
	case state_leave_menu:
		ON_JOYSTICK_LEFT   c = display_set_timer1;
    1766:	ec e2       	ldi	r30, 0x2C	; 44
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	88 2f       	mov	r24, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	84 70       	andi	r24, 0x04	; 4
    1772:	90 70       	andi	r25, 0x00	; 0
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	11 f4       	brne	.+4      	; 0x177c <main+0x454>
    1778:	8f e0       	ldi	r24, 0x0F	; 15
    177a:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = display_set_time;
    177c:	ec e2       	ldi	r30, 0x2C	; 44
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	88 70       	andi	r24, 0x08	; 8
    1788:	90 70       	andi	r25, 0x00	; 0
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	11 f4       	brne	.+4      	; 0x1792 <main+0x46a>
    178e:	86 e0       	ldi	r24, 0x06	; 6
    1790:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     c = display_time;
    1792:	e3 e2       	ldi	r30, 0x23	; 35
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	80 74       	andi	r24, 0x40	; 64
    179e:	90 70       	andi	r25, 0x00	; 0
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <main+0x47e>
    17a4:	19 82       	std	Y+1, r1	; 0x01
		ON_JOYSTICK_DOWN   c = display_time;
    17a6:	e3 e2       	ldi	r30, 0x23	; 35
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	88 23       	and	r24, r24
    17ae:	0c f0       	brlt	.+2      	; 0x17b2 <main+0x48a>
    17b0:	19 82       	std	Y+1, r1	; 0x01
		ON_JOYSTICK_CENTER c = display_time;
    17b2:	e3 e2       	ldi	r30, 0x23	; 35
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	80 71       	andi	r24, 0x10	; 16
    17be:	90 70       	andi	r25, 0x00	; 0
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <main+0x49e>
    17c4:	c2 cd       	rjmp	.-1148   	; 0x134a <main+0x22>
    17c6:	19 82       	std	Y+1, r1	; 0x01
    17c8:	c0 cd       	rjmp	.-1152   	; 0x134a <main+0x22>
		break;

	// DISPLAY SET SOUND AND WAIT FOR EVENT
	case display_set_sound:
		//if (sound_is_on) play_sound;
		LCD_TEXT("SOUND")
    17ca:	8a e3       	ldi	r24, 0x3A	; 58
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    17d2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_sound;
    17d6:	84 e1       	ldi	r24, 0x14	; 20
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	b7 cd       	rjmp	.-1170   	; 0x134a <main+0x22>
		break;
	case state_set_sound:
		ON_JOYSTICK_LEFT   c = display_set_time;
    17dc:	ec e2       	ldi	r30, 0x2C	; 44
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	84 70       	andi	r24, 0x04	; 4
    17e8:	90 70       	andi	r25, 0x00	; 0
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <main+0x4ca>
    17ee:	86 e0       	ldi	r24, 0x06	; 6
    17f0:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = display_set_timer2;
    17f2:	ec e2       	ldi	r30, 0x2C	; 44
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	88 70       	andi	r24, 0x08	; 8
    17fe:	90 70       	andi	r25, 0x00	; 0
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	11 f4       	brne	.+4      	; 0x1808 <main+0x4e0>
    1804:	81 e1       	ldi	r24, 0x11	; 17
    1806:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     c = get_sound_on_off;
    1808:	e3 e2       	ldi	r30, 0x23	; 35
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	80 74       	andi	r24, 0x40	; 64
    1814:	90 70       	andi	r25, 0x00	; 0
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	11 f4       	brne	.+4      	; 0x181e <main+0x4f6>
    181a:	87 e1       	ldi	r24, 0x17	; 23
    181c:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   c = get_sound_on_off;
    181e:	e3 e2       	ldi	r30, 0x23	; 35
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	88 23       	and	r24, r24
    1826:	14 f0       	brlt	.+4      	; 0x182c <main+0x504>
    1828:	87 e1       	ldi	r24, 0x17	; 23
    182a:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER c = get_sound_on_off;
    182c:	e3 e2       	ldi	r30, 0x23	; 35
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	80 71       	andi	r24, 0x10	; 16
    1838:	90 70       	andi	r25, 0x00	; 0
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	09 f0       	breq	.+2      	; 0x1840 <main+0x518>
    183e:	85 cd       	rjmp	.-1270   	; 0x134a <main+0x22>
    1840:	87 e1       	ldi	r24, 0x17	; 23
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	82 cd       	rjmp	.-1276   	; 0x134a <main+0x22>
		break;

	// ASK IF SOUND IS ACTUAL ON OR OFF --> GO IN THE STATE
	case get_sound_on_off:
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1846:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
    184a:	7f cd       	rjmp	.-1282   	; 0x134a <main+0x22>
		//if ( sound_is_on ) c = state_sound_on; //function get_sound_settings
		//else c = state_sound_off;
		break;
	case state_sound_on:
		//if (sound_is_on) play_sound;
		ON_JOYSTICK_LEFT   { c = state_sound_off;   } //function set_sound_settings (SET OFF!!!!) 
    184c:	ec e2       	ldi	r30, 0x2C	; 44
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	84 70       	andi	r24, 0x04	; 4
    1858:	90 70       	andi	r25, 0x00	; 0
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	11 f4       	brne	.+4      	; 0x1862 <main+0x53a>
    185e:	89 e1       	ldi	r24, 0x19	; 25
    1860:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  { c = state_sound_off;   } //function set_sound_settings (SET OFF!!!!)
    1862:	ec e2       	ldi	r30, 0x2C	; 44
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	88 2f       	mov	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	88 70       	andi	r24, 0x08	; 8
    186e:	90 70       	andi	r25, 0x00	; 0
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	11 f4       	brne	.+4      	; 0x1878 <main+0x550>
    1874:	89 e1       	ldi	r24, 0x19	; 25
    1876:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     { c = display_set_sound; } //function set_sound_settings
    1878:	e3 e2       	ldi	r30, 0x23	; 35
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	80 74       	andi	r24, 0x40	; 64
    1884:	90 70       	andi	r25, 0x00	; 0
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	11 f4       	brne	.+4      	; 0x188e <main+0x566>
    188a:	83 e1       	ldi	r24, 0x13	; 19
    188c:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   { c = display_set_sound; } //function set_sound_settings
    188e:	e3 e2       	ldi	r30, 0x23	; 35
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	88 23       	and	r24, r24
    1896:	14 f0       	brlt	.+4      	; 0x189c <main+0x574>
    1898:	83 e1       	ldi	r24, 0x13	; 19
    189a:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER { c = display_set_sound; } //function set_sound_settings
    189c:	e3 e2       	ldi	r30, 0x23	; 35
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	80 71       	andi	r24, 0x10	; 16
    18a8:	90 70       	andi	r25, 0x00	; 0
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <main+0x588>
    18ae:	4d cd       	rjmp	.-1382   	; 0x134a <main+0x22>
    18b0:	83 e1       	ldi	r24, 0x13	; 19
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	4a cd       	rjmp	.-1388   	; 0x134a <main+0x22>
		break;
	case state_sound_off:
	    //if (sound_is_on) play_sound;
		ON_JOYSTICK_LEFT   { c = state_sound_on;    } //function set_sound_settings (SET ON!!!!) 
    18b6:	ec e2       	ldi	r30, 0x2C	; 44
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	84 70       	andi	r24, 0x04	; 4
    18c2:	90 70       	andi	r25, 0x00	; 0
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	11 f4       	brne	.+4      	; 0x18cc <main+0x5a4>
    18c8:	88 e1       	ldi	r24, 0x18	; 24
    18ca:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  { c = state_sound_on;    } //function set_sound_settings (SET ON!!!!)
    18cc:	ec e2       	ldi	r30, 0x2C	; 44
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	88 70       	andi	r24, 0x08	; 8
    18d8:	90 70       	andi	r25, 0x00	; 0
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	11 f4       	brne	.+4      	; 0x18e2 <main+0x5ba>
    18de:	88 e1       	ldi	r24, 0x18	; 24
    18e0:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     { c = display_set_sound; } //function set_sound_settings
    18e2:	e3 e2       	ldi	r30, 0x23	; 35
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	88 2f       	mov	r24, r24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	80 74       	andi	r24, 0x40	; 64
    18ee:	90 70       	andi	r25, 0x00	; 0
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	11 f4       	brne	.+4      	; 0x18f8 <main+0x5d0>
    18f4:	83 e1       	ldi	r24, 0x13	; 19
    18f6:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   { c = display_set_sound; } //function set_sound_settings
    18f8:	e3 e2       	ldi	r30, 0x23	; 35
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	88 23       	and	r24, r24
    1900:	14 f0       	brlt	.+4      	; 0x1906 <main+0x5de>
    1902:	83 e1       	ldi	r24, 0x13	; 19
    1904:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER { c = display_set_sound; } //function set_sound_settings
    1906:	e3 e2       	ldi	r30, 0x23	; 35
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	80 71       	andi	r24, 0x10	; 16
    1912:	90 70       	andi	r25, 0x00	; 0
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	09 f0       	breq	.+2      	; 0x191a <main+0x5f2>
    1918:	18 cd       	rjmp	.-1488   	; 0x134a <main+0x22>
    191a:	83 e1       	ldi	r24, 0x13	; 19
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	15 cd       	rjmp	.-1494   	; 0x134a <main+0x22>
		break;

	// DISPLAY SET TIMER1 AND WAIT FOR EVENT
	case display_set_timer1:
		//if (sound_is_on) play_sound;
		LCD_TEXT("SET T1")
    1920:	80 e4       	ldi	r24, 0x40	; 64
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1928:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer1;
    192c:	80 e1       	ldi	r24, 0x10	; 16
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	0c cd       	rjmp	.-1512   	; 0x134a <main+0x22>
		break;
	case state_set_timer1:
		ON_JOYSTICK_LEFT   c = display_set_timer2;
    1932:	ec e2       	ldi	r30, 0x2C	; 44
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	88 2f       	mov	r24, r24
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	84 70       	andi	r24, 0x04	; 4
    193e:	90 70       	andi	r25, 0x00	; 0
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	11 f4       	brne	.+4      	; 0x1948 <main+0x620>
    1944:	81 e1       	ldi	r24, 0x11	; 17
    1946:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = display_leave_menu;
    1948:	ec e2       	ldi	r30, 0x2C	; 44
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	88 70       	andi	r24, 0x08	; 8
    1954:	90 70       	andi	r25, 0x00	; 0
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	11 f4       	brne	.+4      	; 0x195e <main+0x636>
    195a:	8d e0       	ldi	r24, 0x0D	; 13
    195c:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     c = display_set_timer1_on_off;
    195e:	e3 e2       	ldi	r30, 0x23	; 35
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	80 74       	andi	r24, 0x40	; 64
    196a:	90 70       	andi	r25, 0x00	; 0
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	11 f4       	brne	.+4      	; 0x1974 <main+0x64c>
    1970:	8a e1       	ldi	r24, 0x1A	; 26
    1972:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   c = display_set_timer1_on_off;
    1974:	e3 e2       	ldi	r30, 0x23	; 35
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	88 23       	and	r24, r24
    197c:	14 f0       	brlt	.+4      	; 0x1982 <main+0x65a>
    197e:	8a e1       	ldi	r24, 0x1A	; 26
    1980:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER c = display_set_timer1_on_off;
    1982:	e3 e2       	ldi	r30, 0x23	; 35
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	80 71       	andi	r24, 0x10	; 16
    198e:	90 70       	andi	r25, 0x00	; 0
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	09 f0       	breq	.+2      	; 0x1996 <main+0x66e>
    1994:	da cc       	rjmp	.-1612   	; 0x134a <main+0x22>
    1996:	8a e1       	ldi	r24, 0x1A	; 26
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	d7 cc       	rjmp	.-1618   	; 0x134a <main+0x22>
		break;

	// DISPLAY SET TIMER2 AND WAIT FOR EVENT
	case display_set_timer2:
		//if (sound_is_on) play_sound;
		LCD_TEXT("SET T2")
    199c:	87 e4       	ldi	r24, 0x47	; 71
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    19a4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer2;
    19a8:	82 e1       	ldi	r24, 0x12	; 18
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	ce cc       	rjmp	.-1636   	; 0x134a <main+0x22>
		break;
	case state_set_timer2:
		ON_JOYSTICK_LEFT   c = display_set_sound;
    19ae:	ec e2       	ldi	r30, 0x2C	; 44
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	88 2f       	mov	r24, r24
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	84 70       	andi	r24, 0x04	; 4
    19ba:	90 70       	andi	r25, 0x00	; 0
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	11 f4       	brne	.+4      	; 0x19c4 <main+0x69c>
    19c0:	83 e1       	ldi	r24, 0x13	; 19
    19c2:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = display_set_timer1;
    19c4:	ec e2       	ldi	r30, 0x2C	; 44
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	88 70       	andi	r24, 0x08	; 8
    19d0:	90 70       	andi	r25, 0x00	; 0
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	11 f4       	brne	.+4      	; 0x19da <main+0x6b2>
    19d6:	8f e0       	ldi	r24, 0x0F	; 15
    19d8:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     c = display_set_timer2_on_off;
    19da:	e3 e2       	ldi	r30, 0x23	; 35
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	88 2f       	mov	r24, r24
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	80 74       	andi	r24, 0x40	; 64
    19e6:	90 70       	andi	r25, 0x00	; 0
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	11 f4       	brne	.+4      	; 0x19f0 <main+0x6c8>
    19ec:	8c e1       	ldi	r24, 0x1C	; 28
    19ee:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   c = display_set_timer2_on_off;
    19f0:	e3 e2       	ldi	r30, 0x23	; 35
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	88 23       	and	r24, r24
    19f8:	14 f0       	brlt	.+4      	; 0x19fe <main+0x6d6>
    19fa:	8c e1       	ldi	r24, 0x1C	; 28
    19fc:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER c = display_set_timer2_on_off;
    19fe:	e3 e2       	ldi	r30, 0x23	; 35
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	80 71       	andi	r24, 0x10	; 16
    1a0a:	90 70       	andi	r25, 0x00	; 0
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	09 f0       	breq	.+2      	; 0x1a12 <main+0x6ea>
    1a10:	9c cc       	rjmp	.-1736   	; 0x134a <main+0x22>
    1a12:	8c e1       	ldi	r24, 0x1C	; 28
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	99 cc       	rjmp	.-1742   	; 0x134a <main+0x22>
		break;
	
	// DISPLAY SET TIMER1 ON/OFF AND WAIT FOR EVENT
	case display_set_timer1_on_off:
		//if (sound_is_on) play_sound;
		LCD_TEXT("ON/OFF")
    1a18:	8e e4       	ldi	r24, 0x4E	; 78
    1a1a:	91 e0       	ldi	r25, 0x01	; 1
    1a1c:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1a20:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer1_on_off;
    1a24:	8b e1       	ldi	r24, 0x1B	; 27
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	90 cc       	rjmp	.-1760   	; 0x134a <main+0x22>
		break;
	case state_set_timer1_on_off:
		ON_JOYSTICK_LEFT   c = display_set_timer1_countdown;
    1a2a:	ec e2       	ldi	r30, 0x2C	; 44
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	84 70       	andi	r24, 0x04	; 4
    1a36:	90 70       	andi	r25, 0x00	; 0
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	11 f4       	brne	.+4      	; 0x1a40 <main+0x718>
    1a3c:	84 e2       	ldi	r24, 0x24	; 36
    1a3e:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = display_set_timer1_countdown;
    1a40:	ec e2       	ldi	r30, 0x2C	; 44
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	88 70       	andi	r24, 0x08	; 8
    1a4c:	90 70       	andi	r25, 0x00	; 0
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	11 f4       	brne	.+4      	; 0x1a56 <main+0x72e>
    1a52:	84 e2       	ldi	r24, 0x24	; 36
    1a54:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     c = display_set_timer1;
    1a56:	e3 e2       	ldi	r30, 0x23	; 35
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	80 74       	andi	r24, 0x40	; 64
    1a62:	90 70       	andi	r25, 0x00	; 0
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	11 f4       	brne	.+4      	; 0x1a6c <main+0x744>
    1a68:	8f e0       	ldi	r24, 0x0F	; 15
    1a6a:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   c = get_timer1_on_off;
    1a6c:	e3 e2       	ldi	r30, 0x23	; 35
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	88 23       	and	r24, r24
    1a74:	14 f0       	brlt	.+4      	; 0x1a7a <main+0x752>
    1a76:	8e e1       	ldi	r24, 0x1E	; 30
    1a78:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER c = get_timer1_on_off;
    1a7a:	e3 e2       	ldi	r30, 0x23	; 35
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	88 2f       	mov	r24, r24
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	80 71       	andi	r24, 0x10	; 16
    1a86:	90 70       	andi	r25, 0x00	; 0
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <main+0x766>
    1a8c:	5e cc       	rjmp	.-1860   	; 0x134a <main+0x22>
    1a8e:	8e e1       	ldi	r24, 0x1E	; 30
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	5b cc       	rjmp	.-1866   	; 0x134a <main+0x22>
		break;

	// ASK IF TIMER1 IS ACTUAL ON OR OFF --> GO IN THE STATE
	case get_timer1_on_off:
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1a94:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
    1a98:	58 cc       	rjmp	.-1872   	; 0x134a <main+0x22>
		//if ( timer1_is_on ) c = state_timer1_on; //function get_timer1_on_off_settings
		//else c = state_timer1_off;
		break;
	case state_timer1_on:
		//if (sound_is_on) play_sound;
		ON_JOYSTICK_LEFT   c = state_timer1_off;
    1a9a:	ec e2       	ldi	r30, 0x2C	; 44
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	88 2f       	mov	r24, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	84 70       	andi	r24, 0x04	; 4
    1aa6:	90 70       	andi	r25, 0x00	; 0
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	11 f4       	brne	.+4      	; 0x1ab0 <main+0x788>
    1aac:	80 e2       	ldi	r24, 0x20	; 32
    1aae:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = state_timer1_off;
    1ab0:	ec e2       	ldi	r30, 0x2C	; 44
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	88 70       	andi	r24, 0x08	; 8
    1abc:	90 70       	andi	r25, 0x00	; 0
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	11 f4       	brne	.+4      	; 0x1ac6 <main+0x79e>
    1ac2:	80 e2       	ldi	r24, 0x20	; 32
    1ac4:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     { c = display_set_timer1_on_off; } //function set_timer1_on_off_settings
    1ac6:	e3 e2       	ldi	r30, 0x23	; 35
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	80 74       	andi	r24, 0x40	; 64
    1ad2:	90 70       	andi	r25, 0x00	; 0
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	11 f4       	brne	.+4      	; 0x1adc <main+0x7b4>
    1ad8:	8a e1       	ldi	r24, 0x1A	; 26
    1ada:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   { c = display_set_timer1_on_off; } //function set_timer1_on_off_settings
    1adc:	e3 e2       	ldi	r30, 0x23	; 35
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 23       	and	r24, r24
    1ae4:	14 f0       	brlt	.+4      	; 0x1aea <main+0x7c2>
    1ae6:	8a e1       	ldi	r24, 0x1A	; 26
    1ae8:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER { c = display_set_timer1_on_off; } //function set_timer1_on_off_settings
    1aea:	e3 e2       	ldi	r30, 0x23	; 35
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	88 2f       	mov	r24, r24
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	80 71       	andi	r24, 0x10	; 16
    1af6:	90 70       	andi	r25, 0x00	; 0
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	09 f0       	breq	.+2      	; 0x1afe <main+0x7d6>
    1afc:	26 cc       	rjmp	.-1972   	; 0x134a <main+0x22>
    1afe:	8a e1       	ldi	r24, 0x1A	; 26
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	23 cc       	rjmp	.-1978   	; 0x134a <main+0x22>
		break;
	case state_timer1_off:
		//if (sound_is_on) play_sound;
		ON_JOYSTICK_LEFT   c = state_timer1_on;
    1b04:	ec e2       	ldi	r30, 0x2C	; 44
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	84 70       	andi	r24, 0x04	; 4
    1b10:	90 70       	andi	r25, 0x00	; 0
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	11 f4       	brne	.+4      	; 0x1b1a <main+0x7f2>
    1b16:	8f e1       	ldi	r24, 0x1F	; 31
    1b18:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = state_timer1_on;
    1b1a:	ec e2       	ldi	r30, 0x2C	; 44
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	88 70       	andi	r24, 0x08	; 8
    1b26:	90 70       	andi	r25, 0x00	; 0
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	11 f4       	brne	.+4      	; 0x1b30 <main+0x808>
    1b2c:	8f e1       	ldi	r24, 0x1F	; 31
    1b2e:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     { c = display_set_timer1_on_off; } //function set_timer1_on_off_settings
    1b30:	e3 e2       	ldi	r30, 0x23	; 35
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	88 2f       	mov	r24, r24
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	80 74       	andi	r24, 0x40	; 64
    1b3c:	90 70       	andi	r25, 0x00	; 0
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	11 f4       	brne	.+4      	; 0x1b46 <main+0x81e>
    1b42:	8a e1       	ldi	r24, 0x1A	; 26
    1b44:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   { c = display_set_timer1_on_off; } //function set_timer1_on_off_settings
    1b46:	e3 e2       	ldi	r30, 0x23	; 35
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	88 23       	and	r24, r24
    1b4e:	14 f0       	brlt	.+4      	; 0x1b54 <main+0x82c>
    1b50:	8a e1       	ldi	r24, 0x1A	; 26
    1b52:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER { c = display_set_timer1_on_off; } //function set_timer1_on_off_settings
    1b54:	e3 e2       	ldi	r30, 0x23	; 35
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	80 71       	andi	r24, 0x10	; 16
    1b60:	90 70       	andi	r25, 0x00	; 0
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <main+0x840>
    1b66:	f1 cb       	rjmp	.-2078   	; 0x134a <main+0x22>
    1b68:	8a e1       	ldi	r24, 0x1A	; 26
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	ee cb       	rjmp	.-2084   	; 0x134a <main+0x22>
		break;

	// DISPLAY SET TIMER2 ON/OFF AND WAIT FOR EVENT
	case display_set_timer2_on_off:
		//if (sound_is_on) play_sound;
		LCD_TEXT("ON/OFF")
    1b6e:	8e e4       	ldi	r24, 0x4E	; 78
    1b70:	91 e0       	ldi	r25, 0x01	; 1
    1b72:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1b76:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer2_on_off;
    1b7a:	8d e1       	ldi	r24, 0x1D	; 29
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	e5 cb       	rjmp	.-2102   	; 0x134a <main+0x22>
		break;
	case state_set_timer2_on_off:
		ON_JOYSTICK_LEFT   c = display_set_timer2_countdown;
    1b80:	ec e2       	ldi	r30, 0x2C	; 44
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	84 70       	andi	r24, 0x04	; 4
    1b8c:	90 70       	andi	r25, 0x00	; 0
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	11 f4       	brne	.+4      	; 0x1b96 <main+0x86e>
    1b92:	86 e2       	ldi	r24, 0x26	; 38
    1b94:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = display_set_timer2_countdown;
    1b96:	ec e2       	ldi	r30, 0x2C	; 44
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	88 70       	andi	r24, 0x08	; 8
    1ba2:	90 70       	andi	r25, 0x00	; 0
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <main+0x884>
    1ba8:	86 e2       	ldi	r24, 0x26	; 38
    1baa:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     c = display_set_timer2;
    1bac:	e3 e2       	ldi	r30, 0x23	; 35
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	88 2f       	mov	r24, r24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	80 74       	andi	r24, 0x40	; 64
    1bb8:	90 70       	andi	r25, 0x00	; 0
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	11 f4       	brne	.+4      	; 0x1bc2 <main+0x89a>
    1bbe:	81 e1       	ldi	r24, 0x11	; 17
    1bc0:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   c = get_timer2_on_off;
    1bc2:	e3 e2       	ldi	r30, 0x23	; 35
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	88 23       	and	r24, r24
    1bca:	14 f0       	brlt	.+4      	; 0x1bd0 <main+0x8a8>
    1bcc:	81 e2       	ldi	r24, 0x21	; 33
    1bce:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER c = get_timer2_on_off;
    1bd0:	e3 e2       	ldi	r30, 0x23	; 35
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	88 2f       	mov	r24, r24
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	80 71       	andi	r24, 0x10	; 16
    1bdc:	90 70       	andi	r25, 0x00	; 0
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <main+0x8bc>
    1be2:	b3 cb       	rjmp	.-2202   	; 0x134a <main+0x22>
    1be4:	81 e2       	ldi	r24, 0x21	; 33
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	b0 cb       	rjmp	.-2208   	; 0x134a <main+0x22>
		break;

	// ASK IF TIMER2 IS ACTUAL ON OR OFF --> GO IN THE STATE
	case get_timer2_on_off:
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1bea:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
    1bee:	ad cb       	rjmp	.-2214   	; 0x134a <main+0x22>
		//if ( timer2_is_on ) c = state_timer2_on; //function get_timer2_on_off_settings
		//else c = state_timer2_off;
		break;
	case state_timer2_on:
		//if (sound_is_on) play_sound;
		ON_JOYSTICK_LEFT   c = state_timer2_off;
    1bf0:	ec e2       	ldi	r30, 0x2C	; 44
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	88 2f       	mov	r24, r24
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	84 70       	andi	r24, 0x04	; 4
    1bfc:	90 70       	andi	r25, 0x00	; 0
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	11 f4       	brne	.+4      	; 0x1c06 <main+0x8de>
    1c02:	83 e2       	ldi	r24, 0x23	; 35
    1c04:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = state_timer2_off;
    1c06:	ec e2       	ldi	r30, 0x2C	; 44
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	88 70       	andi	r24, 0x08	; 8
    1c12:	90 70       	andi	r25, 0x00	; 0
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	11 f4       	brne	.+4      	; 0x1c1c <main+0x8f4>
    1c18:	83 e2       	ldi	r24, 0x23	; 35
    1c1a:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    1c1c:	e3 e2       	ldi	r30, 0x23	; 35
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	80 74       	andi	r24, 0x40	; 64
    1c28:	90 70       	andi	r25, 0x00	; 0
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	11 f4       	brne	.+4      	; 0x1c32 <main+0x90a>
    1c2e:	8c e1       	ldi	r24, 0x1C	; 28
    1c30:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    1c32:	e3 e2       	ldi	r30, 0x23	; 35
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	88 23       	and	r24, r24
    1c3a:	14 f0       	brlt	.+4      	; 0x1c40 <main+0x918>
    1c3c:	8c e1       	ldi	r24, 0x1C	; 28
    1c3e:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    1c40:	e3 e2       	ldi	r30, 0x23	; 35
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	88 2f       	mov	r24, r24
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	80 71       	andi	r24, 0x10	; 16
    1c4c:	90 70       	andi	r25, 0x00	; 0
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	09 f0       	breq	.+2      	; 0x1c54 <main+0x92c>
    1c52:	7b cb       	rjmp	.-2314   	; 0x134a <main+0x22>
    1c54:	8c e1       	ldi	r24, 0x1C	; 28
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	78 cb       	rjmp	.-2320   	; 0x134a <main+0x22>
		break;
	case state_timer2_off:
		//if (sound_is_on) play_sound;
		ON_JOYSTICK_LEFT   c = state_timer2_on;
    1c5a:	ec e2       	ldi	r30, 0x2C	; 44
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	84 70       	andi	r24, 0x04	; 4
    1c66:	90 70       	andi	r25, 0x00	; 0
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	11 f4       	brne	.+4      	; 0x1c70 <main+0x948>
    1c6c:	82 e2       	ldi	r24, 0x22	; 34
    1c6e:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = state_timer2_on;
    1c70:	ec e2       	ldi	r30, 0x2C	; 44
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	88 2f       	mov	r24, r24
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	88 70       	andi	r24, 0x08	; 8
    1c7c:	90 70       	andi	r25, 0x00	; 0
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	11 f4       	brne	.+4      	; 0x1c86 <main+0x95e>
    1c82:	82 e2       	ldi	r24, 0x22	; 34
    1c84:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    1c86:	e3 e2       	ldi	r30, 0x23	; 35
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	88 2f       	mov	r24, r24
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	80 74       	andi	r24, 0x40	; 64
    1c92:	90 70       	andi	r25, 0x00	; 0
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	11 f4       	brne	.+4      	; 0x1c9c <main+0x974>
    1c98:	8c e1       	ldi	r24, 0x1C	; 28
    1c9a:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    1c9c:	e3 e2       	ldi	r30, 0x23	; 35
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	88 23       	and	r24, r24
    1ca4:	14 f0       	brlt	.+4      	; 0x1caa <main+0x982>
    1ca6:	8c e1       	ldi	r24, 0x1C	; 28
    1ca8:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER { c = display_set_timer2_on_off; } //function set_timer2_on_off_settings
    1caa:	e3 e2       	ldi	r30, 0x23	; 35
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	80 71       	andi	r24, 0x10	; 16
    1cb6:	90 70       	andi	r25, 0x00	; 0
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <main+0x996>
    1cbc:	46 cb       	rjmp	.-2420   	; 0x134a <main+0x22>
    1cbe:	8c e1       	ldi	r24, 0x1C	; 28
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	43 cb       	rjmp	.-2426   	; 0x134a <main+0x22>
		break;

	// DISPLAY SET TIMER1 COUNTDOWN AND WAIT FOR EVENT
	case display_set_timer1_countdown:
		//if (sound_is_on) play_sound;
		LCD_TEXT("CNTDW1")
    1cc4:	85 e5       	ldi	r24, 0x55	; 85
    1cc6:	91 e0       	ldi	r25, 0x01	; 1
    1cc8:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1ccc:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer1_countdown;
    1cd0:	85 e2       	ldi	r24, 0x25	; 37
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    1cd4:	3a cb       	rjmp	.-2444   	; 0x134a <main+0x22>
		break;
	case state_set_timer1_countdown:
		ON_JOYSTICK_LEFT   c = display_set_timer1_on_off;
    1cd6:	ec e2       	ldi	r30, 0x2C	; 44
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	84 70       	andi	r24, 0x04	; 4
    1ce2:	90 70       	andi	r25, 0x00	; 0
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	11 f4       	brne	.+4      	; 0x1cec <main+0x9c4>
    1ce8:	8a e1       	ldi	r24, 0x1A	; 26
    1cea:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = display_set_timer1_on_off;
    1cec:	ec e2       	ldi	r30, 0x2C	; 44
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	88 70       	andi	r24, 0x08	; 8
    1cf8:	90 70       	andi	r25, 0x00	; 0
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	11 f4       	brne	.+4      	; 0x1d02 <main+0x9da>
    1cfe:	8a e1       	ldi	r24, 0x1A	; 26
    1d00:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     c = display_set_timer1;
    1d02:	e3 e2       	ldi	r30, 0x23	; 35
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	80 74       	andi	r24, 0x40	; 64
    1d0e:	90 70       	andi	r25, 0x00	; 0
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	11 f4       	brne	.+4      	; 0x1d18 <main+0x9f0>
    1d14:	8f e0       	ldi	r24, 0x0F	; 15
    1d16:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   c = display_timer1_input;
    1d18:	e3 e2       	ldi	r30, 0x23	; 35
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	88 23       	and	r24, r24
    1d20:	14 f0       	brlt	.+4      	; 0x1d26 <main+0x9fe>
    1d22:	88 e2       	ldi	r24, 0x28	; 40
    1d24:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER c = display_timer1_input;
    1d26:	e3 e2       	ldi	r30, 0x23	; 35
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	88 2f       	mov	r24, r24
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	80 71       	andi	r24, 0x10	; 16
    1d32:	90 70       	andi	r25, 0x00	; 0
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <main+0xa12>
    1d38:	08 cb       	rjmp	.-2544   	; 0x134a <main+0x22>
    1d3a:	88 e2       	ldi	r24, 0x28	; 40
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	05 cb       	rjmp	.-2550   	; 0x134a <main+0x22>
		break;
	case display_timer1_input:
		//if (sound_is_on) play_sound;
		LCD_TEXT("0000")
    1d40:	8c e5       	ldi	r24, 0x5C	; 92
    1d42:	91 e0       	ldi	r25, 0x01	; 1
    1d44:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1d48:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer1_input;
    1d4c:	89 e2       	ldi	r24, 0x29	; 41
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	fc ca       	rjmp	.-2568   	; 0x134a <main+0x22>
		break;
	case state_timer1_input:
		ON_JOYSTICK_UP     c = display_set_timer1_countdown;
    1d52:	e3 e2       	ldi	r30, 0x23	; 35
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	80 74       	andi	r24, 0x40	; 64
    1d5e:	90 70       	andi	r25, 0x00	; 0
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	11 f4       	brne	.+4      	; 0x1d68 <main+0xa40>
    1d64:	84 e2       	ldi	r24, 0x24	; 36
    1d66:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   c = display_set_timer1_countdown;
    1d68:	e3 e2       	ldi	r30, 0x23	; 35
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 23       	and	r24, r24
    1d70:	14 f0       	brlt	.+4      	; 0x1d76 <main+0xa4e>
    1d72:	84 e2       	ldi	r24, 0x24	; 36
    1d74:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER c = display_set_timer1_countdown;
    1d76:	e3 e2       	ldi	r30, 0x23	; 35
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	88 2f       	mov	r24, r24
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	80 71       	andi	r24, 0x10	; 16
    1d82:	90 70       	andi	r25, 0x00	; 0
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <main+0xa62>
    1d88:	e0 ca       	rjmp	.-2624   	; 0x134a <main+0x22>
    1d8a:	84 e2       	ldi	r24, 0x24	; 36
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	dd ca       	rjmp	.-2630   	; 0x134a <main+0x22>
		break;

	// DISPLAY SET TIMER2 COUNTDOWN AND WAIT FOR EVENT
	case display_set_timer2_countdown:
		//if (sound_is_on) play_sound;
		LCD_TEXT("CNTDW2")
    1d90:	81 e6       	ldi	r24, 0x61	; 97
    1d92:	91 e0       	ldi	r25, 0x01	; 1
    1d94:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1d98:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_set_timer1_countdown;
    1d9c:	85 e2       	ldi	r24, 0x25	; 37
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	d4 ca       	rjmp	.-2648   	; 0x134a <main+0x22>
		break;
	case state_set_timer2_countdown:
		ON_JOYSTICK_LEFT   c = display_set_timer2_on_off;
    1da2:	ec e2       	ldi	r30, 0x2C	; 44
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	88 2f       	mov	r24, r24
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	84 70       	andi	r24, 0x04	; 4
    1dae:	90 70       	andi	r25, 0x00	; 0
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	11 f4       	brne	.+4      	; 0x1db8 <main+0xa90>
    1db4:	8c e1       	ldi	r24, 0x1C	; 28
    1db6:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_RIGHT  c = display_set_timer2_on_off;
    1db8:	ec e2       	ldi	r30, 0x2C	; 44
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	88 2f       	mov	r24, r24
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	88 70       	andi	r24, 0x08	; 8
    1dc4:	90 70       	andi	r25, 0x00	; 0
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	11 f4       	brne	.+4      	; 0x1dce <main+0xaa6>
    1dca:	8c e1       	ldi	r24, 0x1C	; 28
    1dcc:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_UP     c = display_set_timer2;
    1dce:	e3 e2       	ldi	r30, 0x23	; 35
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	80 74       	andi	r24, 0x40	; 64
    1dda:	90 70       	andi	r25, 0x00	; 0
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	11 f4       	brne	.+4      	; 0x1de4 <main+0xabc>
    1de0:	81 e1       	ldi	r24, 0x11	; 17
    1de2:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   c = display_timer2_input;
    1de4:	e3 e2       	ldi	r30, 0x23	; 35
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	88 23       	and	r24, r24
    1dec:	14 f0       	brlt	.+4      	; 0x1df2 <main+0xaca>
    1dee:	8a e2       	ldi	r24, 0x2A	; 42
    1df0:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER c = display_timer2_input;
    1df2:	e3 e2       	ldi	r30, 0x23	; 35
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	80 71       	andi	r24, 0x10	; 16
    1dfe:	90 70       	andi	r25, 0x00	; 0
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <main+0xade>
    1e04:	a2 ca       	rjmp	.-2748   	; 0x134a <main+0x22>
    1e06:	8a e2       	ldi	r24, 0x2A	; 42
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	9f ca       	rjmp	.-2754   	; 0x134a <main+0x22>
		break;
	case display_timer2_input:
		//if (sound_is_on) play_sound;
		LCD_TEXT("0000")
    1e0c:	8c e5       	ldi	r24, 0x5C	; 92
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	0e 94 b0 04 	call	0x960	; 0x960 <LCD_puts>
		WAIT_FOR_RELEASE_JOYSTICK_ALL();
    1e14:	0e 94 64 09 	call	0x12c8	; 0x12c8 <WAIT_FOR_RELEASE_JOYSTICK_ALL>
		c = state_timer2_input;
    1e18:	8b e2       	ldi	r24, 0x2B	; 43
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	96 ca       	rjmp	.-2772   	; 0x134a <main+0x22>
		break;
	case state_timer2_input:
		ON_JOYSTICK_UP     c = display_set_timer2_countdown;
    1e1e:	e3 e2       	ldi	r30, 0x23	; 35
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	80 74       	andi	r24, 0x40	; 64
    1e2a:	90 70       	andi	r25, 0x00	; 0
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	11 f4       	brne	.+4      	; 0x1e34 <main+0xb0c>
    1e30:	86 e2       	ldi	r24, 0x26	; 38
    1e32:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_DOWN   c = display_set_timer2_countdown;
    1e34:	e3 e2       	ldi	r30, 0x23	; 35
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	88 23       	and	r24, r24
    1e3c:	14 f0       	brlt	.+4      	; 0x1e42 <main+0xb1a>
    1e3e:	86 e2       	ldi	r24, 0x26	; 38
    1e40:	89 83       	std	Y+1, r24	; 0x01
		ON_JOYSTICK_CENTER c = display_set_timer2_countdown;
    1e42:	e3 e2       	ldi	r30, 0x23	; 35
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	88 2f       	mov	r24, r24
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	80 71       	andi	r24, 0x10	; 16
    1e4e:	90 70       	andi	r25, 0x00	; 0
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <main+0xb2e>
    1e54:	7a ca       	rjmp	.-2828   	; 0x134a <main+0x22>
    1e56:	86 e2       	ldi	r24, 0x26	; 38
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	77 ca       	rjmp	.-2834   	; 0x134a <main+0x22>
		break;


	// If we are somehow in an undefined state go back to time again
    default:
		c = display_time;
    1e5c:	19 82       	std	Y+1, r1	; 0x01
    1e5e:	75 ca       	rjmp	.-2838   	; 0x134a <main+0x22>

00001e60 <do_random>:
    1e60:	a0 e0       	ldi	r26, 0x00	; 0
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e6 e3       	ldi	r30, 0x36	; 54
    1e66:	ff e0       	ldi	r31, 0x0F	; 15
    1e68:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__prologue_saves__+0x10>
    1e6c:	ec 01       	movw	r28, r24
    1e6e:	a8 80       	ld	r10, Y
    1e70:	b9 80       	ldd	r11, Y+1	; 0x01
    1e72:	ca 80       	ldd	r12, Y+2	; 0x02
    1e74:	db 80       	ldd	r13, Y+3	; 0x03
    1e76:	a1 14       	cp	r10, r1
    1e78:	b1 04       	cpc	r11, r1
    1e7a:	c1 04       	cpc	r12, r1
    1e7c:	d1 04       	cpc	r13, r1
    1e7e:	41 f4       	brne	.+16     	; 0x1e90 <do_random+0x30>
    1e80:	84 e2       	ldi	r24, 0x24	; 36
    1e82:	a8 2e       	mov	r10, r24
    1e84:	89 ed       	ldi	r24, 0xD9	; 217
    1e86:	b8 2e       	mov	r11, r24
    1e88:	8b e5       	ldi	r24, 0x5B	; 91
    1e8a:	c8 2e       	mov	r12, r24
    1e8c:	87 e0       	ldi	r24, 0x07	; 7
    1e8e:	d8 2e       	mov	r13, r24
    1e90:	c6 01       	movw	r24, r12
    1e92:	b5 01       	movw	r22, r10
    1e94:	2d e1       	ldi	r18, 0x1D	; 29
    1e96:	33 ef       	ldi	r19, 0xF3	; 243
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__divmodsi4>
    1ea0:	27 ea       	ldi	r18, 0xA7	; 167
    1ea2:	31 e4       	ldi	r19, 0x41	; 65
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__mulsi3>
    1eac:	7b 01       	movw	r14, r22
    1eae:	8c 01       	movw	r16, r24
    1eb0:	c6 01       	movw	r24, r12
    1eb2:	b5 01       	movw	r22, r10
    1eb4:	2d e1       	ldi	r18, 0x1D	; 29
    1eb6:	33 ef       	ldi	r19, 0xF3	; 243
    1eb8:	41 e0       	ldi	r20, 0x01	; 1
    1eba:	50 e0       	ldi	r21, 0x00	; 0
    1ebc:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__divmodsi4>
    1ec0:	ca 01       	movw	r24, r20
    1ec2:	b9 01       	movw	r22, r18
    1ec4:	2c ee       	ldi	r18, 0xEC	; 236
    1ec6:	34 ef       	ldi	r19, 0xF4	; 244
    1ec8:	4f ef       	ldi	r20, 0xFF	; 255
    1eca:	5f ef       	ldi	r21, 0xFF	; 255
    1ecc:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__mulsi3>
    1ed0:	6e 0d       	add	r22, r14
    1ed2:	7f 1d       	adc	r23, r15
    1ed4:	80 1f       	adc	r24, r16
    1ed6:	91 1f       	adc	r25, r17
    1ed8:	97 ff       	sbrs	r25, 7
    1eda:	04 c0       	rjmp	.+8      	; 0x1ee4 <do_random+0x84>
    1edc:	61 50       	subi	r22, 0x01	; 1
    1ede:	70 40       	sbci	r23, 0x00	; 0
    1ee0:	80 40       	sbci	r24, 0x00	; 0
    1ee2:	90 48       	sbci	r25, 0x80	; 128
    1ee4:	68 83       	st	Y, r22
    1ee6:	79 83       	std	Y+1, r23	; 0x01
    1ee8:	8a 83       	std	Y+2, r24	; 0x02
    1eea:	9b 83       	std	Y+3, r25	; 0x03
    1eec:	9b 01       	movw	r18, r22
    1eee:	ac 01       	movw	r20, r24
    1ef0:	5f 77       	andi	r21, 0x7F	; 127
    1ef2:	b9 01       	movw	r22, r18
    1ef4:	ca 01       	movw	r24, r20
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	ea e0       	ldi	r30, 0x0A	; 10
    1efc:	0c 94 11 10 	jmp	0x2022	; 0x2022 <__epilogue_restores__+0x10>

00001f00 <random_r>:
    1f00:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <do_random>
    1f04:	08 95       	ret

00001f06 <random>:
    1f06:	88 e6       	ldi	r24, 0x68	; 104
    1f08:	91 e0       	ldi	r25, 0x01	; 1
    1f0a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <do_random>
    1f0e:	08 95       	ret

00001f10 <srandom>:
    1f10:	60 93 68 01 	sts	0x0168, r22
    1f14:	70 93 69 01 	sts	0x0169, r23
    1f18:	80 93 6a 01 	sts	0x016A, r24
    1f1c:	90 93 6b 01 	sts	0x016B, r25
    1f20:	08 95       	ret

00001f22 <__mulsi3>:
    1f22:	62 9f       	mul	r22, r18
    1f24:	d0 01       	movw	r26, r0
    1f26:	73 9f       	mul	r23, r19
    1f28:	f0 01       	movw	r30, r0
    1f2a:	82 9f       	mul	r24, r18
    1f2c:	e0 0d       	add	r30, r0
    1f2e:	f1 1d       	adc	r31, r1
    1f30:	64 9f       	mul	r22, r20
    1f32:	e0 0d       	add	r30, r0
    1f34:	f1 1d       	adc	r31, r1
    1f36:	92 9f       	mul	r25, r18
    1f38:	f0 0d       	add	r31, r0
    1f3a:	83 9f       	mul	r24, r19
    1f3c:	f0 0d       	add	r31, r0
    1f3e:	74 9f       	mul	r23, r20
    1f40:	f0 0d       	add	r31, r0
    1f42:	65 9f       	mul	r22, r21
    1f44:	f0 0d       	add	r31, r0
    1f46:	99 27       	eor	r25, r25
    1f48:	72 9f       	mul	r23, r18
    1f4a:	b0 0d       	add	r27, r0
    1f4c:	e1 1d       	adc	r30, r1
    1f4e:	f9 1f       	adc	r31, r25
    1f50:	63 9f       	mul	r22, r19
    1f52:	b0 0d       	add	r27, r0
    1f54:	e1 1d       	adc	r30, r1
    1f56:	f9 1f       	adc	r31, r25
    1f58:	bd 01       	movw	r22, r26
    1f5a:	cf 01       	movw	r24, r30
    1f5c:	11 24       	eor	r1, r1
    1f5e:	08 95       	ret

00001f60 <__divmodsi4>:
    1f60:	97 fb       	bst	r25, 7
    1f62:	09 2e       	mov	r0, r25
    1f64:	05 26       	eor	r0, r21
    1f66:	0e d0       	rcall	.+28     	; 0x1f84 <__divmodsi4_neg1>
    1f68:	57 fd       	sbrc	r21, 7
    1f6a:	04 d0       	rcall	.+8      	; 0x1f74 <__divmodsi4_neg2>
    1f6c:	14 d0       	rcall	.+40     	; 0x1f96 <__udivmodsi4>
    1f6e:	0a d0       	rcall	.+20     	; 0x1f84 <__divmodsi4_neg1>
    1f70:	00 1c       	adc	r0, r0
    1f72:	38 f4       	brcc	.+14     	; 0x1f82 <__divmodsi4_exit>

00001f74 <__divmodsi4_neg2>:
    1f74:	50 95       	com	r21
    1f76:	40 95       	com	r20
    1f78:	30 95       	com	r19
    1f7a:	21 95       	neg	r18
    1f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7e:	4f 4f       	sbci	r20, 0xFF	; 255
    1f80:	5f 4f       	sbci	r21, 0xFF	; 255

00001f82 <__divmodsi4_exit>:
    1f82:	08 95       	ret

00001f84 <__divmodsi4_neg1>:
    1f84:	f6 f7       	brtc	.-4      	; 0x1f82 <__divmodsi4_exit>
    1f86:	90 95       	com	r25
    1f88:	80 95       	com	r24
    1f8a:	70 95       	com	r23
    1f8c:	61 95       	neg	r22
    1f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f90:	8f 4f       	sbci	r24, 0xFF	; 255
    1f92:	9f 4f       	sbci	r25, 0xFF	; 255
    1f94:	08 95       	ret

00001f96 <__udivmodsi4>:
    1f96:	a1 e2       	ldi	r26, 0x21	; 33
    1f98:	1a 2e       	mov	r1, r26
    1f9a:	aa 1b       	sub	r26, r26
    1f9c:	bb 1b       	sub	r27, r27
    1f9e:	fd 01       	movw	r30, r26
    1fa0:	0d c0       	rjmp	.+26     	; 0x1fbc <__udivmodsi4_ep>

00001fa2 <__udivmodsi4_loop>:
    1fa2:	aa 1f       	adc	r26, r26
    1fa4:	bb 1f       	adc	r27, r27
    1fa6:	ee 1f       	adc	r30, r30
    1fa8:	ff 1f       	adc	r31, r31
    1faa:	a2 17       	cp	r26, r18
    1fac:	b3 07       	cpc	r27, r19
    1fae:	e4 07       	cpc	r30, r20
    1fb0:	f5 07       	cpc	r31, r21
    1fb2:	20 f0       	brcs	.+8      	; 0x1fbc <__udivmodsi4_ep>
    1fb4:	a2 1b       	sub	r26, r18
    1fb6:	b3 0b       	sbc	r27, r19
    1fb8:	e4 0b       	sbc	r30, r20
    1fba:	f5 0b       	sbc	r31, r21

00001fbc <__udivmodsi4_ep>:
    1fbc:	66 1f       	adc	r22, r22
    1fbe:	77 1f       	adc	r23, r23
    1fc0:	88 1f       	adc	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	1a 94       	dec	r1
    1fc6:	69 f7       	brne	.-38     	; 0x1fa2 <__udivmodsi4_loop>
    1fc8:	60 95       	com	r22
    1fca:	70 95       	com	r23
    1fcc:	80 95       	com	r24
    1fce:	90 95       	com	r25
    1fd0:	9b 01       	movw	r18, r22
    1fd2:	ac 01       	movw	r20, r24
    1fd4:	bd 01       	movw	r22, r26
    1fd6:	cf 01       	movw	r24, r30
    1fd8:	08 95       	ret

00001fda <__prologue_saves__>:
    1fda:	2f 92       	push	r2
    1fdc:	3f 92       	push	r3
    1fde:	4f 92       	push	r4
    1fe0:	5f 92       	push	r5
    1fe2:	6f 92       	push	r6
    1fe4:	7f 92       	push	r7
    1fe6:	8f 92       	push	r8
    1fe8:	9f 92       	push	r9
    1fea:	af 92       	push	r10
    1fec:	bf 92       	push	r11
    1fee:	cf 92       	push	r12
    1ff0:	df 92       	push	r13
    1ff2:	ef 92       	push	r14
    1ff4:	ff 92       	push	r15
    1ff6:	0f 93       	push	r16
    1ff8:	1f 93       	push	r17
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	ca 1b       	sub	r28, r26
    2004:	db 0b       	sbc	r29, r27
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	09 94       	ijmp

00002012 <__epilogue_restores__>:
    2012:	2a 88       	ldd	r2, Y+18	; 0x12
    2014:	39 88       	ldd	r3, Y+17	; 0x11
    2016:	48 88       	ldd	r4, Y+16	; 0x10
    2018:	5f 84       	ldd	r5, Y+15	; 0x0f
    201a:	6e 84       	ldd	r6, Y+14	; 0x0e
    201c:	7d 84       	ldd	r7, Y+13	; 0x0d
    201e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2020:	9b 84       	ldd	r9, Y+11	; 0x0b
    2022:	aa 84       	ldd	r10, Y+10	; 0x0a
    2024:	b9 84       	ldd	r11, Y+9	; 0x09
    2026:	c8 84       	ldd	r12, Y+8	; 0x08
    2028:	df 80       	ldd	r13, Y+7	; 0x07
    202a:	ee 80       	ldd	r14, Y+6	; 0x06
    202c:	fd 80       	ldd	r15, Y+5	; 0x05
    202e:	0c 81       	ldd	r16, Y+4	; 0x04
    2030:	1b 81       	ldd	r17, Y+3	; 0x03
    2032:	aa 81       	ldd	r26, Y+2	; 0x02
    2034:	b9 81       	ldd	r27, Y+1	; 0x01
    2036:	ce 0f       	add	r28, r30
    2038:	d1 1d       	adc	r29, r1
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
    2044:	ed 01       	movw	r28, r26
    2046:	08 95       	ret

00002048 <_exit>:
    2048:	f8 94       	cli

0000204a <__stop_program>:
    204a:	ff cf       	rjmp	.-2      	; 0x204a <__stop_program>
